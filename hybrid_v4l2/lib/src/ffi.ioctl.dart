// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'ffi.v4l2.dart' as v4l2;

/// Bindings for `ioctl`.
///
class LibIOCTL {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibIOCTL(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibIOCTL.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int ioctl(
    int __fd,
    int __request,
    ffi.Pointer<v4l2.v4l2_capability> va,
  ) {
    return _ioctl(
      __fd,
      __request,
      va,
    );
  }

  late final _ioctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.UnsignedLong,
              ffi.VarArgs<(ffi.Pointer<v4l2.v4l2_capability>,)>)>>('ioctl');
  late final _ioctl = _ioctlPtr
      .asFunction<int Function(int, int, ffi.Pointer<v4l2.v4l2_capability>)>();
}

const int _SYS_IOCTL_H = 1;
