// Autogenerated from Pigeon (v22.4.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "hybrid_v4l2_api.h"

G_DECLARE_FINAL_TYPE(HybridV4l2MessageCodec, hybrid_v4l2_message_codec, HYBRID_V4L2, MESSAGE_CODEC, FlStandardMessageCodec)

struct _HybridV4l2MessageCodec {
  FlStandardMessageCodec parent_instance;

};

G_DEFINE_TYPE(HybridV4l2MessageCodec, hybrid_v4l2_message_codec, fl_standard_message_codec_get_type())

static gboolean hybrid_v4l2_message_codec_write_value(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(hybrid_v4l2_message_codec_parent_class)->write_value(codec, buffer, value, error);
}

static FlValue* hybrid_v4l2_message_codec_read_value_of_type(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type, GError** error) {
  switch (type) {
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(hybrid_v4l2_message_codec_parent_class)->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void hybrid_v4l2_message_codec_init(HybridV4l2MessageCodec* self) {
}

static void hybrid_v4l2_message_codec_class_init(HybridV4l2MessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value = hybrid_v4l2_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type = hybrid_v4l2_message_codec_read_value_of_type;
}

static HybridV4l2MessageCodec* hybrid_v4l2_message_codec_new() {
  HybridV4l2MessageCodec* self = HYBRID_V4L2_MESSAGE_CODEC(g_object_new(hybrid_v4l2_message_codec_get_type(), nullptr));
  return self;
}

struct _HybridV4l2ViewHostAPIRegisterTextureResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(HybridV4l2ViewHostAPIRegisterTextureResponse, hybrid_v4l2_view_host_a_p_i_register_texture_response, G_TYPE_OBJECT)

static void hybrid_v4l2_view_host_a_p_i_register_texture_response_dispose(GObject* object) {
  HybridV4l2ViewHostAPIRegisterTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_REGISTER_TEXTURE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(hybrid_v4l2_view_host_a_p_i_register_texture_response_parent_class)->dispose(object);
}

static void hybrid_v4l2_view_host_a_p_i_register_texture_response_init(HybridV4l2ViewHostAPIRegisterTextureResponse* self) {
}

static void hybrid_v4l2_view_host_a_p_i_register_texture_response_class_init(HybridV4l2ViewHostAPIRegisterTextureResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = hybrid_v4l2_view_host_a_p_i_register_texture_response_dispose;
}

HybridV4l2ViewHostAPIRegisterTextureResponse* hybrid_v4l2_view_host_a_p_i_register_texture_response_new(int64_t return_value) {
  HybridV4l2ViewHostAPIRegisterTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_REGISTER_TEXTURE_RESPONSE(g_object_new(hybrid_v4l2_view_host_a_p_i_register_texture_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

HybridV4l2ViewHostAPIRegisterTextureResponse* hybrid_v4l2_view_host_a_p_i_register_texture_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  HybridV4l2ViewHostAPIRegisterTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_REGISTER_TEXTURE_RESPONSE(g_object_new(hybrid_v4l2_view_host_a_p_i_register_texture_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _HybridV4l2ViewHostAPIUpdateTextureResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(HybridV4l2ViewHostAPIUpdateTextureResponse, hybrid_v4l2_view_host_a_p_i_update_texture_response, G_TYPE_OBJECT)

static void hybrid_v4l2_view_host_a_p_i_update_texture_response_dispose(GObject* object) {
  HybridV4l2ViewHostAPIUpdateTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_UPDATE_TEXTURE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(hybrid_v4l2_view_host_a_p_i_update_texture_response_parent_class)->dispose(object);
}

static void hybrid_v4l2_view_host_a_p_i_update_texture_response_init(HybridV4l2ViewHostAPIUpdateTextureResponse* self) {
}

static void hybrid_v4l2_view_host_a_p_i_update_texture_response_class_init(HybridV4l2ViewHostAPIUpdateTextureResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = hybrid_v4l2_view_host_a_p_i_update_texture_response_dispose;
}

HybridV4l2ViewHostAPIUpdateTextureResponse* hybrid_v4l2_view_host_a_p_i_update_texture_response_new() {
  HybridV4l2ViewHostAPIUpdateTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_UPDATE_TEXTURE_RESPONSE(g_object_new(hybrid_v4l2_view_host_a_p_i_update_texture_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

HybridV4l2ViewHostAPIUpdateTextureResponse* hybrid_v4l2_view_host_a_p_i_update_texture_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  HybridV4l2ViewHostAPIUpdateTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_UPDATE_TEXTURE_RESPONSE(g_object_new(hybrid_v4l2_view_host_a_p_i_update_texture_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _HybridV4l2ViewHostAPIUnregisterTextureResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(HybridV4l2ViewHostAPIUnregisterTextureResponse, hybrid_v4l2_view_host_a_p_i_unregister_texture_response, G_TYPE_OBJECT)

static void hybrid_v4l2_view_host_a_p_i_unregister_texture_response_dispose(GObject* object) {
  HybridV4l2ViewHostAPIUnregisterTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_UNREGISTER_TEXTURE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(hybrid_v4l2_view_host_a_p_i_unregister_texture_response_parent_class)->dispose(object);
}

static void hybrid_v4l2_view_host_a_p_i_unregister_texture_response_init(HybridV4l2ViewHostAPIUnregisterTextureResponse* self) {
}

static void hybrid_v4l2_view_host_a_p_i_unregister_texture_response_class_init(HybridV4l2ViewHostAPIUnregisterTextureResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = hybrid_v4l2_view_host_a_p_i_unregister_texture_response_dispose;
}

HybridV4l2ViewHostAPIUnregisterTextureResponse* hybrid_v4l2_view_host_a_p_i_unregister_texture_response_new() {
  HybridV4l2ViewHostAPIUnregisterTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_UNREGISTER_TEXTURE_RESPONSE(g_object_new(hybrid_v4l2_view_host_a_p_i_unregister_texture_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

HybridV4l2ViewHostAPIUnregisterTextureResponse* hybrid_v4l2_view_host_a_p_i_unregister_texture_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  HybridV4l2ViewHostAPIUnregisterTextureResponse* self = HYBRID_V4L2_VIEW_HOST_A_P_I_UNREGISTER_TEXTURE_RESPONSE(g_object_new(hybrid_v4l2_view_host_a_p_i_unregister_texture_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(HybridV4l2ViewHostAPI, hybrid_v4l2_view_host_a_p_i, HYBRID_V4L2, VIEW_HOST_A_P_I, GObject)

struct _HybridV4l2ViewHostAPI {
  GObject parent_instance;

  const HybridV4l2ViewHostAPIVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(HybridV4l2ViewHostAPI, hybrid_v4l2_view_host_a_p_i, G_TYPE_OBJECT)

static void hybrid_v4l2_view_host_a_p_i_dispose(GObject* object) {
  HybridV4l2ViewHostAPI* self = HYBRID_V4L2_VIEW_HOST_A_P_I(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(hybrid_v4l2_view_host_a_p_i_parent_class)->dispose(object);
}

static void hybrid_v4l2_view_host_a_p_i_init(HybridV4l2ViewHostAPI* self) {
}

static void hybrid_v4l2_view_host_a_p_i_class_init(HybridV4l2ViewHostAPIClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = hybrid_v4l2_view_host_a_p_i_dispose;
}

static HybridV4l2ViewHostAPI* hybrid_v4l2_view_host_a_p_i_new(const HybridV4l2ViewHostAPIVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  HybridV4l2ViewHostAPI* self = HYBRID_V4L2_VIEW_HOST_A_P_I(g_object_new(hybrid_v4l2_view_host_a_p_i_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void hybrid_v4l2_view_host_a_p_i_register_texture_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  HybridV4l2ViewHostAPI* self = HYBRID_V4L2_VIEW_HOST_A_P_I(user_data);

  if (self->vtable == nullptr || self->vtable->register_texture == nullptr) {
    return;
  }

  g_autoptr(HybridV4l2ViewHostAPIRegisterTextureResponse) response = self->vtable->register_texture(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "ViewHostAPI", "registerTexture");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "ViewHostAPI", "registerTexture", error->message);
  }
}

static void hybrid_v4l2_view_host_a_p_i_update_texture_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  HybridV4l2ViewHostAPI* self = HYBRID_V4L2_VIEW_HOST_A_P_I(user_data);

  if (self->vtable == nullptr || self->vtable->update_texture == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t id_args = fl_value_get_int(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const uint8_t* buffer_args = fl_value_get_uint8_list(value1);
  size_t buffer_args_length = fl_value_get_length(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  int64_t width_args = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  int64_t height_args = fl_value_get_int(value3);
  g_autoptr(HybridV4l2ViewHostAPIUpdateTextureResponse) response = self->vtable->update_texture(id_args, buffer_args, buffer_args_length, width_args, height_args, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "ViewHostAPI", "updateTexture");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "ViewHostAPI", "updateTexture", error->message);
  }
}

static void hybrid_v4l2_view_host_a_p_i_unregister_texture_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  HybridV4l2ViewHostAPI* self = HYBRID_V4L2_VIEW_HOST_A_P_I(user_data);

  if (self->vtable == nullptr || self->vtable->unregister_texture == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t id_args = fl_value_get_int(value0);
  g_autoptr(HybridV4l2ViewHostAPIUnregisterTextureResponse) response = self->vtable->unregister_texture(id_args, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "ViewHostAPI", "unregisterTexture");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "ViewHostAPI", "unregisterTexture", error->message);
  }
}

void hybrid_v4l2_view_host_a_p_i_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const HybridV4l2ViewHostAPIVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(HybridV4l2ViewHostAPI) api_data = hybrid_v4l2_view_host_a_p_i_new(vtable, user_data, user_data_free_func);

  g_autoptr(HybridV4l2MessageCodec) codec = hybrid_v4l2_message_codec_new();
  g_autofree gchar* register_texture_channel_name = g_strdup_printf("dev.flutter.pigeon.hybrid_v4l2.ViewHostAPI.registerTexture%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) register_texture_channel = fl_basic_message_channel_new(messenger, register_texture_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(register_texture_channel, hybrid_v4l2_view_host_a_p_i_register_texture_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* update_texture_channel_name = g_strdup_printf("dev.flutter.pigeon.hybrid_v4l2.ViewHostAPI.updateTexture%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) update_texture_channel = fl_basic_message_channel_new(messenger, update_texture_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(update_texture_channel, hybrid_v4l2_view_host_a_p_i_update_texture_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* unregister_texture_channel_name = g_strdup_printf("dev.flutter.pigeon.hybrid_v4l2.ViewHostAPI.unregisterTexture%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) unregister_texture_channel = fl_basic_message_channel_new(messenger, unregister_texture_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(unregister_texture_channel, hybrid_v4l2_view_host_a_p_i_unregister_texture_cb, g_object_ref(api_data), g_object_unref);
}

void hybrid_v4l2_view_host_a_p_i_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(HybridV4l2MessageCodec) codec = hybrid_v4l2_message_codec_new();
  g_autofree gchar* register_texture_channel_name = g_strdup_printf("dev.flutter.pigeon.hybrid_v4l2.ViewHostAPI.registerTexture%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) register_texture_channel = fl_basic_message_channel_new(messenger, register_texture_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(register_texture_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* update_texture_channel_name = g_strdup_printf("dev.flutter.pigeon.hybrid_v4l2.ViewHostAPI.updateTexture%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) update_texture_channel = fl_basic_message_channel_new(messenger, update_texture_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(update_texture_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* unregister_texture_channel_name = g_strdup_printf("dev.flutter.pigeon.hybrid_v4l2.ViewHostAPI.unregisterTexture%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) unregister_texture_channel = fl_basic_message_channel_new(messenger, unregister_texture_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(unregister_texture_channel, nullptr, nullptr, nullptr);
}
