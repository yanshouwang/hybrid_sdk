// Autogenerated from Pigeon (v22.4.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_HYBRID_V4L2_API_H_
#define PIGEON_HYBRID_V4L2_API_H_

#include <flutter_linux/flutter_linux.h>

G_BEGIN_DECLS

/**
 * HybridV4l2PixelFormat:
 * HYBRID_V4L2_PIXEL_FORMAT_MJPEG:
 * HYBRID_V4L2_PIXEL_FORMAT_RGBA:
 *
 */
typedef enum {
  HYBRID_V4L2_PIXEL_FORMAT_MJPEG = 0,
  HYBRID_V4L2_PIXEL_FORMAT_RGBA = 1
} HybridV4l2PixelFormat;

G_DECLARE_FINAL_TYPE(HybridV4l2ViewHostAPIRegisterTextureResponse, hybrid_v4l2_view_host_a_p_i_register_texture_response, HYBRID_V4L2, VIEW_HOST_A_P_I_REGISTER_TEXTURE_RESPONSE, GObject)

/**
 * hybrid_v4l2_view_host_a_p_i_register_texture_response_new:
 *
 * Creates a new response to ViewHostAPI.registerTexture.
 *
 * Returns: a new #HybridV4l2ViewHostAPIRegisterTextureResponse
 */
HybridV4l2ViewHostAPIRegisterTextureResponse* hybrid_v4l2_view_host_a_p_i_register_texture_response_new(int64_t return_value);

/**
 * hybrid_v4l2_view_host_a_p_i_register_texture_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to ViewHostAPI.registerTexture.
 *
 * Returns: a new #HybridV4l2ViewHostAPIRegisterTextureResponse
 */
HybridV4l2ViewHostAPIRegisterTextureResponse* hybrid_v4l2_view_host_a_p_i_register_texture_response_new_error(const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(HybridV4l2ViewHostAPIUpdateTextureResponse, hybrid_v4l2_view_host_a_p_i_update_texture_response, HYBRID_V4L2, VIEW_HOST_A_P_I_UPDATE_TEXTURE_RESPONSE, GObject)

/**
 * hybrid_v4l2_view_host_a_p_i_update_texture_response_new:
 *
 * Creates a new response to ViewHostAPI.updateTexture.
 *
 * Returns: a new #HybridV4l2ViewHostAPIUpdateTextureResponse
 */
HybridV4l2ViewHostAPIUpdateTextureResponse* hybrid_v4l2_view_host_a_p_i_update_texture_response_new();

/**
 * hybrid_v4l2_view_host_a_p_i_update_texture_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to ViewHostAPI.updateTexture.
 *
 * Returns: a new #HybridV4l2ViewHostAPIUpdateTextureResponse
 */
HybridV4l2ViewHostAPIUpdateTextureResponse* hybrid_v4l2_view_host_a_p_i_update_texture_response_new_error(const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(HybridV4l2ViewHostAPIUnregisterTextureResponse, hybrid_v4l2_view_host_a_p_i_unregister_texture_response, HYBRID_V4L2, VIEW_HOST_A_P_I_UNREGISTER_TEXTURE_RESPONSE, GObject)

/**
 * hybrid_v4l2_view_host_a_p_i_unregister_texture_response_new:
 *
 * Creates a new response to ViewHostAPI.unregisterTexture.
 *
 * Returns: a new #HybridV4l2ViewHostAPIUnregisterTextureResponse
 */
HybridV4l2ViewHostAPIUnregisterTextureResponse* hybrid_v4l2_view_host_a_p_i_unregister_texture_response_new();

/**
 * hybrid_v4l2_view_host_a_p_i_unregister_texture_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to ViewHostAPI.unregisterTexture.
 *
 * Returns: a new #HybridV4l2ViewHostAPIUnregisterTextureResponse
 */
HybridV4l2ViewHostAPIUnregisterTextureResponse* hybrid_v4l2_view_host_a_p_i_unregister_texture_response_new_error(const gchar* code, const gchar* message, FlValue* details);

/**
 * HybridV4l2ViewHostAPIVTable:
 *
 * Table of functions exposed by ViewHostAPI to be implemented by the API provider.
 */
typedef struct {
  HybridV4l2ViewHostAPIRegisterTextureResponse* (*register_texture)(gpointer user_data);
  HybridV4l2ViewHostAPIUpdateTextureResponse* (*update_texture)(int64_t id, const uint8_t* buffer, size_t buffer_length, gpointer user_data);
  HybridV4l2ViewHostAPIUnregisterTextureResponse* (*unregister_texture)(int64_t id, gpointer user_data);
} HybridV4l2ViewHostAPIVTable;

/**
 * hybrid_v4l2_view_host_a_p_i_set_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 * @vtable: implementations of the methods in this API.
 * @user_data: (closure): user data to pass to the functions in @vtable.
 * @user_data_free_func: (allow-none): a function which gets called to free @user_data, or %NULL.
 *
 * Connects the method handlers in the ViewHostAPI API.
 */
void hybrid_v4l2_view_host_a_p_i_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const HybridV4l2ViewHostAPIVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func);

/**
 * hybrid_v4l2_view_host_a_p_i_clear_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 *
 * Clears the method handlers in the ViewHostAPI API.
 */
void hybrid_v4l2_view_host_a_p_i_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix);

G_END_DECLS

#endif  // PIGEON_HYBRID_V4L2_API_H_
