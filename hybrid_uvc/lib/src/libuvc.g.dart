// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `libuvc`.
///
class LibUVC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibUVC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibUVC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  uvc_error uvc_init(
    ffi.Pointer<ffi.Pointer<uvc_context_t>> ctx,
    ffi.Pointer<libusb_context> usb_ctx,
  ) {
    return uvc_error.fromValue(_uvc_init(
      ctx,
      usb_ctx,
    ));
  }

  late final _uvc_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<uvc_context_t>>,
              ffi.Pointer<libusb_context>)>>('uvc_init');
  late final _uvc_init = _uvc_initPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<uvc_context_t>>,
          ffi.Pointer<libusb_context>)>();

  void uvc_exit(
    ffi.Pointer<uvc_context_t> ctx,
  ) {
    return _uvc_exit(
      ctx,
    );
  }

  late final _uvc_exitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<uvc_context_t>)>>(
      'uvc_exit');
  late final _uvc_exit =
      _uvc_exitPtr.asFunction<void Function(ffi.Pointer<uvc_context_t>)>();

  uvc_error uvc_get_device_list(
    ffi.Pointer<uvc_context_t> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<uvc_device_t>>> list,
  ) {
    return uvc_error.fromValue(_uvc_get_device_list(
      ctx,
      list,
    ));
  }

  late final _uvc_get_device_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<uvc_context_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<uvc_device_t>>>)>>(
      'uvc_get_device_list');
  late final _uvc_get_device_list = _uvc_get_device_listPtr.asFunction<
      int Function(ffi.Pointer<uvc_context_t>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<uvc_device_t>>>)>();

  void uvc_free_device_list(
    ffi.Pointer<ffi.Pointer<uvc_device_t>> list,
    int unref_devices,
  ) {
    return _uvc_free_device_list(
      list,
      unref_devices,
    );
  }

  late final _uvc_free_device_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<uvc_device_t>>,
              ffi.Uint8)>>('uvc_free_device_list');
  late final _uvc_free_device_list = _uvc_free_device_listPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<uvc_device_t>>, int)>();

  uvc_error uvc_get_device_descriptor(
    ffi.Pointer<uvc_device_t> dev,
    ffi.Pointer<ffi.Pointer<uvc_device_descriptor_t>> desc,
  ) {
    return uvc_error.fromValue(_uvc_get_device_descriptor(
      dev,
      desc,
    ));
  }

  late final _uvc_get_device_descriptorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<uvc_device_t>,
                  ffi.Pointer<ffi.Pointer<uvc_device_descriptor_t>>)>>(
      'uvc_get_device_descriptor');
  late final _uvc_get_device_descriptor =
      _uvc_get_device_descriptorPtr.asFunction<
          int Function(ffi.Pointer<uvc_device_t>,
              ffi.Pointer<ffi.Pointer<uvc_device_descriptor_t>>)>();

  void uvc_free_device_descriptor(
    ffi.Pointer<uvc_device_descriptor_t> desc,
  ) {
    return _uvc_free_device_descriptor(
      desc,
    );
  }

  late final _uvc_free_device_descriptorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<uvc_device_descriptor_t>)>>(
      'uvc_free_device_descriptor');
  late final _uvc_free_device_descriptor = _uvc_free_device_descriptorPtr
      .asFunction<void Function(ffi.Pointer<uvc_device_descriptor_t>)>();

  int uvc_get_bus_number(
    ffi.Pointer<uvc_device_t> dev,
  ) {
    return _uvc_get_bus_number(
      dev,
    );
  }

  late final _uvc_get_bus_numberPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<uvc_device_t>)>>(
      'uvc_get_bus_number');
  late final _uvc_get_bus_number = _uvc_get_bus_numberPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_t>)>();

  int uvc_get_device_address(
    ffi.Pointer<uvc_device_t> dev,
  ) {
    return _uvc_get_device_address(
      dev,
    );
  }

  late final _uvc_get_device_addressPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<uvc_device_t>)>>(
      'uvc_get_device_address');
  late final _uvc_get_device_address = _uvc_get_device_addressPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_t>)>();

  uvc_error uvc_find_device(
    ffi.Pointer<uvc_context_t> ctx,
    ffi.Pointer<ffi.Pointer<uvc_device_t>> dev,
    int vid,
    int pid,
    ffi.Pointer<ffi.Char> sn,
  ) {
    return uvc_error.fromValue(_uvc_find_device(
      ctx,
      dev,
      vid,
      pid,
      sn,
    ));
  }

  late final _uvc_find_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_context_t>,
              ffi.Pointer<ffi.Pointer<uvc_device_t>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('uvc_find_device');
  late final _uvc_find_device = _uvc_find_devicePtr.asFunction<
      int Function(
          ffi.Pointer<uvc_context_t>,
          ffi.Pointer<ffi.Pointer<uvc_device_t>>,
          int,
          int,
          ffi.Pointer<ffi.Char>)>();

  uvc_error uvc_find_devices(
    ffi.Pointer<uvc_context_t> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<uvc_device_t>>> devs,
    int vid,
    int pid,
    ffi.Pointer<ffi.Char> sn,
  ) {
    return uvc_error.fromValue(_uvc_find_devices(
      ctx,
      devs,
      vid,
      pid,
      sn,
    ));
  }

  late final _uvc_find_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_context_t>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<uvc_device_t>>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('uvc_find_devices');
  late final _uvc_find_devices = _uvc_find_devicesPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_context_t>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<uvc_device_t>>>,
          int,
          int,
          ffi.Pointer<ffi.Char>)>();

  uvc_error uvc_open(
    ffi.Pointer<uvc_device_t> dev,
    ffi.Pointer<ffi.Pointer<uvc_device_handle_t>> devh,
  ) {
    return uvc_error.fromValue(_uvc_open(
      dev,
      devh,
    ));
  }

  late final _uvc_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_t>,
              ffi.Pointer<ffi.Pointer<uvc_device_handle_t>>)>>('uvc_open');
  late final _uvc_open = _uvc_openPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_t>,
          ffi.Pointer<ffi.Pointer<uvc_device_handle_t>>)>();

  void uvc_close(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_close(
      devh,
    );
  }

  late final _uvc_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<uvc_device_handle_t>)>>('uvc_close');
  late final _uvc_close = _uvc_closePtr
      .asFunction<void Function(ffi.Pointer<uvc_device_handle_t>)>();

  ffi.Pointer<uvc_device_t> uvc_get_device(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_get_device(
      devh,
    );
  }

  late final _uvc_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<uvc_device_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_device');
  late final _uvc_get_device = _uvc_get_devicePtr.asFunction<
      ffi.Pointer<uvc_device_t> Function(ffi.Pointer<uvc_device_handle_t>)>();

  ffi.Pointer<libusb_device_handle> uvc_get_libusb_handle(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_get_libusb_handle(
      devh,
    );
  }

  late final _uvc_get_libusb_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<libusb_device_handle> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_libusb_handle');
  late final _uvc_get_libusb_handle = _uvc_get_libusb_handlePtr.asFunction<
      ffi.Pointer<libusb_device_handle> Function(
          ffi.Pointer<uvc_device_handle_t>)>();

  void uvc_ref_device(
    ffi.Pointer<uvc_device_t> dev,
  ) {
    return _uvc_ref_device(
      dev,
    );
  }

  late final _uvc_ref_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<uvc_device_t>)>>(
          'uvc_ref_device');
  late final _uvc_ref_device =
      _uvc_ref_devicePtr.asFunction<void Function(ffi.Pointer<uvc_device_t>)>();

  void uvc_unref_device(
    ffi.Pointer<uvc_device_t> dev,
  ) {
    return _uvc_unref_device(
      dev,
    );
  }

  late final _uvc_unref_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<uvc_device_t>)>>(
          'uvc_unref_device');
  late final _uvc_unref_device = _uvc_unref_devicePtr
      .asFunction<void Function(ffi.Pointer<uvc_device_t>)>();

  void uvc_set_status_callback(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_status_callback_t> cb,
    ffi.Pointer<ffi.Void> user_ptr,
  ) {
    return _uvc_set_status_callback(
      devh,
      cb,
      user_ptr,
    );
  }

  late final _uvc_set_status_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_status_callback_t>,
              ffi.Pointer<ffi.Void>)>>('uvc_set_status_callback');
  late final _uvc_set_status_callback = _uvc_set_status_callbackPtr.asFunction<
      void Function(ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<uvc_status_callback_t>, ffi.Pointer<ffi.Void>)>();

  void uvc_set_button_callback(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_button_callback_t> cb,
    ffi.Pointer<ffi.Void> user_ptr,
  ) {
    return _uvc_set_button_callback(
      devh,
      cb,
      user_ptr,
    );
  }

  late final _uvc_set_button_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_button_callback_t>,
              ffi.Pointer<ffi.Void>)>>('uvc_set_button_callback');
  late final _uvc_set_button_callback = _uvc_set_button_callbackPtr.asFunction<
      void Function(ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<uvc_button_callback_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<uvc_input_terminal_t> uvc_get_camera_terminal(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_get_camera_terminal(
      devh,
    );
  }

  late final _uvc_get_camera_terminalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<uvc_input_terminal_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_camera_terminal');
  late final _uvc_get_camera_terminal = _uvc_get_camera_terminalPtr.asFunction<
      ffi.Pointer<uvc_input_terminal_t> Function(
          ffi.Pointer<uvc_device_handle_t>)>();

  ffi.Pointer<uvc_input_terminal_t> uvc_get_input_terminals(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_get_input_terminals(
      devh,
    );
  }

  late final _uvc_get_input_terminalsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<uvc_input_terminal_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_input_terminals');
  late final _uvc_get_input_terminals = _uvc_get_input_terminalsPtr.asFunction<
      ffi.Pointer<uvc_input_terminal_t> Function(
          ffi.Pointer<uvc_device_handle_t>)>();

  ffi.Pointer<uvc_output_terminal_t> uvc_get_output_terminals(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_get_output_terminals(
      devh,
    );
  }

  late final _uvc_get_output_terminalsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<uvc_output_terminal_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_output_terminals');
  late final _uvc_get_output_terminals =
      _uvc_get_output_terminalsPtr.asFunction<
          ffi.Pointer<uvc_output_terminal_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>();

  ffi.Pointer<uvc_selector_unit_t> uvc_get_selector_units(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_get_selector_units(
      devh,
    );
  }

  late final _uvc_get_selector_unitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<uvc_selector_unit_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_selector_units');
  late final _uvc_get_selector_units = _uvc_get_selector_unitsPtr.asFunction<
      ffi.Pointer<uvc_selector_unit_t> Function(
          ffi.Pointer<uvc_device_handle_t>)>();

  ffi.Pointer<uvc_processing_unit_t> uvc_get_processing_units(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_get_processing_units(
      devh,
    );
  }

  late final _uvc_get_processing_unitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<uvc_processing_unit_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_processing_units');
  late final _uvc_get_processing_units =
      _uvc_get_processing_unitsPtr.asFunction<
          ffi.Pointer<uvc_processing_unit_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>();

  ffi.Pointer<uvc_extension_unit_t> uvc_get_extension_units(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_get_extension_units(
      devh,
    );
  }

  late final _uvc_get_extension_unitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<uvc_extension_unit_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_extension_units');
  late final _uvc_get_extension_units = _uvc_get_extension_unitsPtr.asFunction<
      ffi.Pointer<uvc_extension_unit_t> Function(
          ffi.Pointer<uvc_device_handle_t>)>();

  uvc_error uvc_get_stream_ctrl_format_size(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_stream_ctrl_t> ctrl,
    uvc_frame_format format,
    int width,
    int height,
    int fps,
  ) {
    return uvc_error.fromValue(_uvc_get_stream_ctrl_format_size(
      devh,
      ctrl,
      format.value,
      width,
      height,
      fps,
    ));
  }

  late final _uvc_get_stream_ctrl_format_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_stream_ctrl_t>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('uvc_get_stream_ctrl_format_size');
  late final _uvc_get_stream_ctrl_format_size =
      _uvc_get_stream_ctrl_format_sizePtr.asFunction<
          int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_stream_ctrl_t>, int, int, int, int)>();

  uvc_error uvc_get_still_ctrl_format_size(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_stream_ctrl_t> ctrl,
    ffi.Pointer<uvc_still_ctrl_t> still_ctrl,
    int width,
    int height,
  ) {
    return uvc_error.fromValue(_uvc_get_still_ctrl_format_size(
      devh,
      ctrl,
      still_ctrl,
      width,
      height,
    ));
  }

  late final _uvc_get_still_ctrl_format_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_stream_ctrl_t>,
              ffi.Pointer<uvc_still_ctrl_t>,
              ffi.Int,
              ffi.Int)>>('uvc_get_still_ctrl_format_size');
  late final _uvc_get_still_ctrl_format_size =
      _uvc_get_still_ctrl_format_sizePtr.asFunction<
          int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_stream_ctrl_t>,
              ffi.Pointer<uvc_still_ctrl_t>,
              int,
              int)>();

  uvc_error uvc_trigger_still(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_still_ctrl_t> still_ctrl,
  ) {
    return uvc_error.fromValue(_uvc_trigger_still(
      devh,
      still_ctrl,
    ));
  }

  late final _uvc_trigger_stillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_still_ctrl_t>)>>('uvc_trigger_still');
  late final _uvc_trigger_still = _uvc_trigger_stillPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<uvc_still_ctrl_t>)>();

  ffi.Pointer<uvc_format_desc_t> uvc_get_format_descs(
    ffi.Pointer<uvc_device_handle_t> arg0,
  ) {
    return _uvc_get_format_descs(
      arg0,
    );
  }

  late final _uvc_get_format_descsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<uvc_format_desc_t> Function(
              ffi.Pointer<uvc_device_handle_t>)>>('uvc_get_format_descs');
  late final _uvc_get_format_descs = _uvc_get_format_descsPtr.asFunction<
      ffi.Pointer<uvc_format_desc_t> Function(
          ffi.Pointer<uvc_device_handle_t>)>();

  uvc_error uvc_probe_stream_ctrl(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_stream_ctrl_t> ctrl,
  ) {
    return uvc_error.fromValue(_uvc_probe_stream_ctrl(
      devh,
      ctrl,
    ));
  }

  late final _uvc_probe_stream_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_stream_ctrl_t>)>>('uvc_probe_stream_ctrl');
  late final _uvc_probe_stream_ctrl = _uvc_probe_stream_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<uvc_stream_ctrl_t>)>();

  uvc_error uvc_probe_still_ctrl(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_still_ctrl_t> still_ctrl,
  ) {
    return uvc_error.fromValue(_uvc_probe_still_ctrl(
      devh,
      still_ctrl,
    ));
  }

  late final _uvc_probe_still_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_still_ctrl_t>)>>('uvc_probe_still_ctrl');
  late final _uvc_probe_still_ctrl = _uvc_probe_still_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<uvc_still_ctrl_t>)>();

  uvc_error uvc_start_streaming(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_stream_ctrl_t> ctrl,
    ffi.Pointer<uvc_frame_callback_t> cb,
    ffi.Pointer<ffi.Void> user_ptr,
    int flags,
  ) {
    return uvc_error.fromValue(_uvc_start_streaming(
      devh,
      ctrl,
      cb,
      user_ptr,
      flags,
    ));
  }

  late final _uvc_start_streamingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_stream_ctrl_t>,
              ffi.Pointer<uvc_frame_callback_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint8)>>('uvc_start_streaming');
  late final _uvc_start_streaming = _uvc_start_streamingPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<uvc_stream_ctrl_t>,
          ffi.Pointer<uvc_frame_callback_t>,
          ffi.Pointer<ffi.Void>,
          int)>();

  uvc_error uvc_start_iso_streaming(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<uvc_stream_ctrl_t> ctrl,
    ffi.Pointer<uvc_frame_callback_t> cb,
    ffi.Pointer<ffi.Void> user_ptr,
  ) {
    return uvc_error.fromValue(_uvc_start_iso_streaming(
      devh,
      ctrl,
      cb,
      user_ptr,
    ));
  }

  late final _uvc_start_iso_streamingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<uvc_stream_ctrl_t>,
              ffi.Pointer<uvc_frame_callback_t>,
              ffi.Pointer<ffi.Void>)>>('uvc_start_iso_streaming');
  late final _uvc_start_iso_streaming = _uvc_start_iso_streamingPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<uvc_stream_ctrl_t>,
          ffi.Pointer<uvc_frame_callback_t>,
          ffi.Pointer<ffi.Void>)>();

  void uvc_stop_streaming(
    ffi.Pointer<uvc_device_handle_t> devh,
  ) {
    return _uvc_stop_streaming(
      devh,
    );
  }

  late final _uvc_stop_streamingPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<uvc_device_handle_t>)>>(
      'uvc_stop_streaming');
  late final _uvc_stop_streaming = _uvc_stop_streamingPtr
      .asFunction<void Function(ffi.Pointer<uvc_device_handle_t>)>();

  uvc_error uvc_stream_open_ctrl(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Pointer<uvc_stream_handle_t>> strmh,
    ffi.Pointer<uvc_stream_ctrl_t> ctrl,
  ) {
    return uvc_error.fromValue(_uvc_stream_open_ctrl(
      devh,
      strmh,
      ctrl,
    ));
  }

  late final _uvc_stream_open_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Pointer<uvc_stream_handle_t>>,
              ffi.Pointer<uvc_stream_ctrl_t>)>>('uvc_stream_open_ctrl');
  late final _uvc_stream_open_ctrl = _uvc_stream_open_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<ffi.Pointer<uvc_stream_handle_t>>,
          ffi.Pointer<uvc_stream_ctrl_t>)>();

  uvc_error uvc_stream_ctrl1(
    ffi.Pointer<uvc_stream_handle_t> strmh,
    ffi.Pointer<uvc_stream_ctrl_t> ctrl,
  ) {
    return uvc_error.fromValue(_uvc_stream_ctrl1(
      strmh,
      ctrl,
    ));
  }

  late final _uvc_stream_ctrl1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_stream_handle_t>,
              ffi.Pointer<uvc_stream_ctrl_t>)>>('uvc_stream_ctrl');
  late final _uvc_stream_ctrl1 = _uvc_stream_ctrl1Ptr.asFunction<
      int Function(
          ffi.Pointer<uvc_stream_handle_t>, ffi.Pointer<uvc_stream_ctrl_t>)>();

  uvc_error uvc_stream_start(
    ffi.Pointer<uvc_stream_handle_t> strmh,
    ffi.Pointer<uvc_frame_callback_t> cb,
    ffi.Pointer<ffi.Void> user_ptr,
    int flags,
  ) {
    return uvc_error.fromValue(_uvc_stream_start(
      strmh,
      cb,
      user_ptr,
      flags,
    ));
  }

  late final _uvc_stream_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_stream_handle_t>,
              ffi.Pointer<uvc_frame_callback_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint8)>>('uvc_stream_start');
  late final _uvc_stream_start = _uvc_stream_startPtr.asFunction<
      int Function(ffi.Pointer<uvc_stream_handle_t>,
          ffi.Pointer<uvc_frame_callback_t>, ffi.Pointer<ffi.Void>, int)>();

  uvc_error uvc_stream_start_iso(
    ffi.Pointer<uvc_stream_handle_t> strmh,
    ffi.Pointer<uvc_frame_callback_t> cb,
    ffi.Pointer<ffi.Void> user_ptr,
  ) {
    return uvc_error.fromValue(_uvc_stream_start_iso(
      strmh,
      cb,
      user_ptr,
    ));
  }

  late final _uvc_stream_start_isoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_stream_handle_t>,
              ffi.Pointer<uvc_frame_callback_t>,
              ffi.Pointer<ffi.Void>)>>('uvc_stream_start_iso');
  late final _uvc_stream_start_iso = _uvc_stream_start_isoPtr.asFunction<
      int Function(ffi.Pointer<uvc_stream_handle_t>,
          ffi.Pointer<uvc_frame_callback_t>, ffi.Pointer<ffi.Void>)>();

  uvc_error uvc_stream_get_frame(
    ffi.Pointer<uvc_stream_handle_t> strmh,
    ffi.Pointer<ffi.Pointer<uvc_frame_t>> frame,
    int timeout_us,
  ) {
    return uvc_error.fromValue(_uvc_stream_get_frame(
      strmh,
      frame,
      timeout_us,
    ));
  }

  late final _uvc_stream_get_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_stream_handle_t>,
              ffi.Pointer<ffi.Pointer<uvc_frame_t>>,
              ffi.Int32)>>('uvc_stream_get_frame');
  late final _uvc_stream_get_frame = _uvc_stream_get_framePtr.asFunction<
      int Function(ffi.Pointer<uvc_stream_handle_t>,
          ffi.Pointer<ffi.Pointer<uvc_frame_t>>, int)>();

  uvc_error uvc_stream_stop(
    ffi.Pointer<uvc_stream_handle_t> strmh,
  ) {
    return uvc_error.fromValue(_uvc_stream_stop(
      strmh,
    ));
  }

  late final _uvc_stream_stopPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<uvc_stream_handle_t>)>>(
      'uvc_stream_stop');
  late final _uvc_stream_stop = _uvc_stream_stopPtr
      .asFunction<int Function(ffi.Pointer<uvc_stream_handle_t>)>();

  void uvc_stream_close(
    ffi.Pointer<uvc_stream_handle_t> strmh,
  ) {
    return _uvc_stream_close(
      strmh,
    );
  }

  late final _uvc_stream_closePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<uvc_stream_handle_t>)>>(
      'uvc_stream_close');
  late final _uvc_stream_close = _uvc_stream_closePtr
      .asFunction<void Function(ffi.Pointer<uvc_stream_handle_t>)>();

  int uvc_get_ctrl_len(
    ffi.Pointer<uvc_device_handle_t> devh,
    int unit,
    int ctrl,
  ) {
    return _uvc_get_ctrl_len(
      devh,
      unit,
      ctrl,
    );
  }

  late final _uvc_get_ctrl_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Uint8,
              ffi.Uint8)>>('uvc_get_ctrl_len');
  late final _uvc_get_ctrl_len = _uvc_get_ctrl_lenPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int, int)>();

  int uvc_get_ctrl(
    ffi.Pointer<uvc_device_handle_t> devh,
    int unit,
    int ctrl,
    ffi.Pointer<ffi.Void> data,
    int len,
    uvc_req_code req_code,
  ) {
    return _uvc_get_ctrl(
      devh,
      unit,
      ctrl,
      data,
      len,
      req_code.value,
    );
  }

  late final _uvc_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.UnsignedInt)>>('uvc_get_ctrl');
  late final _uvc_get_ctrl = _uvc_get_ctrlPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>, int, int,
          ffi.Pointer<ffi.Void>, int, int)>();

  int uvc_set_ctrl(
    ffi.Pointer<uvc_device_handle_t> devh,
    int unit,
    int ctrl,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _uvc_set_ctrl(
      devh,
      unit,
      ctrl,
      data,
      len,
    );
  }

  late final _uvc_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Uint8,
              ffi.Uint8, ffi.Pointer<ffi.Void>, ffi.Int)>>('uvc_set_ctrl');
  late final _uvc_set_ctrl = _uvc_set_ctrlPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>, int, int,
          ffi.Pointer<ffi.Void>, int)>();

  uvc_error uvc_get_power_mode(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.UnsignedInt> mode,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_power_mode(
      devh,
      mode,
      req_code.value,
    ));
  }

  late final _uvc_get_power_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('uvc_get_power_mode');
  late final _uvc_get_power_mode = _uvc_get_power_modePtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<ffi.UnsignedInt>, int)>();

  uvc_error uvc_set_power_mode(
    ffi.Pointer<uvc_device_handle_t> devh,
    uvc_device_power_mode mode,
  ) {
    return uvc_error.fromValue(_uvc_set_power_mode(
      devh,
      mode.value,
    ));
  }

  late final _uvc_set_power_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.UnsignedInt)>>('uvc_set_power_mode');
  late final _uvc_set_power_mode = _uvc_set_power_modePtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  /// AUTO-GENERATED control accessors! Update them with the output of `ctrl-gen.py decl`.
  uvc_error uvc_get_scanning_mode(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> mode,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_scanning_mode(
      devh,
      mode,
      req_code.value,
    ));
  }

  late final _uvc_get_scanning_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_scanning_mode');
  late final _uvc_get_scanning_mode = _uvc_get_scanning_modePtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_scanning_mode(
    ffi.Pointer<uvc_device_handle_t> devh,
    int mode,
  ) {
    return uvc_error.fromValue(_uvc_set_scanning_mode(
      devh,
      mode,
    ));
  }

  late final _uvc_set_scanning_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_scanning_mode');
  late final _uvc_set_scanning_mode = _uvc_set_scanning_modePtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_ae_mode(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> mode,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_ae_mode(
      devh,
      mode,
      req_code.value,
    ));
  }

  late final _uvc_get_ae_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>, ffi.UnsignedInt)>>('uvc_get_ae_mode');
  late final _uvc_get_ae_mode = _uvc_get_ae_modePtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_ae_mode(
    ffi.Pointer<uvc_device_handle_t> devh,
    int mode,
  ) {
    return uvc_error.fromValue(_uvc_set_ae_mode(
      devh,
      mode,
    ));
  }

  late final _uvc_set_ae_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Uint8)>>('uvc_set_ae_mode');
  late final _uvc_set_ae_mode = _uvc_set_ae_modePtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_ae_priority(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> priority,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_ae_priority(
      devh,
      priority,
      req_code.value,
    ));
  }

  late final _uvc_get_ae_priorityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>, ffi.UnsignedInt)>>('uvc_get_ae_priority');
  late final _uvc_get_ae_priority = _uvc_get_ae_priorityPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_ae_priority(
    ffi.Pointer<uvc_device_handle_t> devh,
    int priority,
  ) {
    return uvc_error.fromValue(_uvc_set_ae_priority(
      devh,
      priority,
    ));
  }

  late final _uvc_set_ae_priorityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_ae_priority');
  late final _uvc_set_ae_priority = _uvc_set_ae_priorityPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_exposure_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint32> time,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_exposure_abs(
      devh,
      time,
      req_code.value,
    ));
  }

  late final _uvc_get_exposure_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint32>,
              ffi.UnsignedInt)>>('uvc_get_exposure_abs');
  late final _uvc_get_exposure_abs = _uvc_get_exposure_absPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint32>, int)>();

  uvc_error uvc_set_exposure_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    int time,
  ) {
    return uvc_error.fromValue(_uvc_set_exposure_abs(
      devh,
      time,
    ));
  }

  late final _uvc_set_exposure_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint32)>>('uvc_set_exposure_abs');
  late final _uvc_set_exposure_abs = _uvc_set_exposure_absPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_exposure_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int8> step,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_exposure_rel(
      devh,
      step,
      req_code.value,
    ));
  }

  late final _uvc_get_exposure_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int8>, ffi.UnsignedInt)>>('uvc_get_exposure_rel');
  late final _uvc_get_exposure_rel = _uvc_get_exposure_relPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Int8>, int)>();

  uvc_error uvc_set_exposure_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    int step,
  ) {
    return uvc_error.fromValue(_uvc_set_exposure_rel(
      devh,
      step,
    ));
  }

  late final _uvc_set_exposure_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Int8)>>('uvc_set_exposure_rel');
  late final _uvc_set_exposure_rel = _uvc_set_exposure_relPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_focus_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> focus,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_focus_abs(
      devh,
      focus,
      req_code.value,
    ));
  }

  late final _uvc_get_focus_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.UnsignedInt)>>('uvc_get_focus_abs');
  late final _uvc_get_focus_abs = _uvc_get_focus_absPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_focus_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    int focus,
  ) {
    return uvc_error.fromValue(_uvc_set_focus_abs(
      devh,
      focus,
    ));
  }

  late final _uvc_set_focus_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_focus_abs');
  late final _uvc_set_focus_abs = _uvc_set_focus_absPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_focus_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int8> focus_rel,
    ffi.Pointer<ffi.Uint8> speed,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_focus_rel(
      devh,
      focus_rel,
      speed,
      req_code.value,
    ));
  }

  late final _uvc_get_focus_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_focus_rel');
  late final _uvc_get_focus_rel = _uvc_get_focus_relPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_focus_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    int focus_rel,
    int speed,
  ) {
    return uvc_error.fromValue(_uvc_set_focus_rel(
      devh,
      focus_rel,
      speed,
    ));
  }

  late final _uvc_set_focus_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Int8,
              ffi.Uint8)>>('uvc_set_focus_rel');
  late final _uvc_set_focus_rel = _uvc_set_focus_relPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int, int)>();

  uvc_error uvc_get_focus_simple_range(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> focus,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_focus_simple_range(
      devh,
      focus,
      req_code.value,
    ));
  }

  late final _uvc_get_focus_simple_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_focus_simple_range');
  late final _uvc_get_focus_simple_range =
      _uvc_get_focus_simple_rangePtr.asFunction<
          int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_focus_simple_range(
    ffi.Pointer<uvc_device_handle_t> devh,
    int focus,
  ) {
    return uvc_error.fromValue(_uvc_set_focus_simple_range(
      devh,
      focus,
    ));
  }

  late final _uvc_set_focus_simple_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_focus_simple_range');
  late final _uvc_set_focus_simple_range = _uvc_set_focus_simple_rangePtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_focus_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> state,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_focus_auto(
      devh,
      state,
      req_code.value,
    ));
  }

  late final _uvc_get_focus_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>, ffi.UnsignedInt)>>('uvc_get_focus_auto');
  late final _uvc_get_focus_auto = _uvc_get_focus_autoPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_focus_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    int state,
  ) {
    return uvc_error.fromValue(_uvc_set_focus_auto(
      devh,
      state,
    ));
  }

  late final _uvc_set_focus_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_focus_auto');
  late final _uvc_set_focus_auto = _uvc_set_focus_autoPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_iris_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> iris,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_iris_abs(
      devh,
      iris,
      req_code.value,
    ));
  }

  late final _uvc_get_iris_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.UnsignedInt)>>('uvc_get_iris_abs');
  late final _uvc_get_iris_abs = _uvc_get_iris_absPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_iris_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    int iris,
  ) {
    return uvc_error.fromValue(_uvc_set_iris_abs(
      devh,
      iris,
    ));
  }

  late final _uvc_set_iris_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_iris_abs');
  late final _uvc_set_iris_abs = _uvc_set_iris_absPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_iris_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> iris_rel,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_iris_rel(
      devh,
      iris_rel,
      req_code.value,
    ));
  }

  late final _uvc_get_iris_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>, ffi.UnsignedInt)>>('uvc_get_iris_rel');
  late final _uvc_get_iris_rel = _uvc_get_iris_relPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_iris_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    int iris_rel,
  ) {
    return uvc_error.fromValue(_uvc_set_iris_rel(
      devh,
      iris_rel,
    ));
  }

  late final _uvc_set_iris_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_iris_rel');
  late final _uvc_set_iris_rel = _uvc_set_iris_relPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_zoom_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> focal_length,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_zoom_abs(
      devh,
      focal_length,
      req_code.value,
    ));
  }

  late final _uvc_get_zoom_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.UnsignedInt)>>('uvc_get_zoom_abs');
  late final _uvc_get_zoom_abs = _uvc_get_zoom_absPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_zoom_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    int focal_length,
  ) {
    return uvc_error.fromValue(_uvc_set_zoom_abs(
      devh,
      focal_length,
    ));
  }

  late final _uvc_set_zoom_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_zoom_abs');
  late final _uvc_set_zoom_abs = _uvc_set_zoom_absPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_zoom_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int8> zoom_rel,
    ffi.Pointer<ffi.Uint8> digital_zoom,
    ffi.Pointer<ffi.Uint8> speed,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_zoom_rel(
      devh,
      zoom_rel,
      digital_zoom,
      speed,
      req_code.value,
    ));
  }

  late final _uvc_get_zoom_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_zoom_rel');
  late final _uvc_get_zoom_rel = _uvc_get_zoom_relPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_zoom_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    int zoom_rel,
    int digital_zoom,
    int speed,
  ) {
    return uvc_error.fromValue(_uvc_set_zoom_rel(
      devh,
      zoom_rel,
      digital_zoom,
      speed,
    ));
  }

  late final _uvc_set_zoom_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Int8,
              ffi.Uint8, ffi.Uint8)>>('uvc_set_zoom_rel');
  late final _uvc_set_zoom_rel = _uvc_set_zoom_relPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>, int, int, int)>();

  uvc_error uvc_get_pantilt_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int32> pan,
    ffi.Pointer<ffi.Int32> tilt,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_pantilt_abs(
      devh,
      pan,
      tilt,
      req_code.value,
    ));
  }

  late final _uvc_get_pantilt_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.UnsignedInt)>>('uvc_get_pantilt_abs');
  late final _uvc_get_pantilt_abs = _uvc_get_pantilt_absPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>, int)>();

  uvc_error uvc_set_pantilt_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    int pan,
    int tilt,
  ) {
    return uvc_error.fromValue(_uvc_set_pantilt_abs(
      devh,
      pan,
      tilt,
    ));
  }

  late final _uvc_set_pantilt_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Int32,
              ffi.Int32)>>('uvc_set_pantilt_abs');
  late final _uvc_set_pantilt_abs = _uvc_set_pantilt_absPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int, int)>();

  uvc_error uvc_get_pantilt_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int8> pan_rel,
    ffi.Pointer<ffi.Uint8> pan_speed,
    ffi.Pointer<ffi.Int8> tilt_rel,
    ffi.Pointer<ffi.Uint8> tilt_speed,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_pantilt_rel(
      devh,
      pan_rel,
      pan_speed,
      tilt_rel,
      tilt_speed,
      req_code.value,
    ));
  }

  late final _uvc_get_pantilt_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_pantilt_rel');
  late final _uvc_get_pantilt_rel = _uvc_get_pantilt_relPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  uvc_error uvc_set_pantilt_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    int pan_rel,
    int pan_speed,
    int tilt_rel,
    int tilt_speed,
  ) {
    return uvc_error.fromValue(_uvc_set_pantilt_rel(
      devh,
      pan_rel,
      pan_speed,
      tilt_rel,
      tilt_speed,
    ));
  }

  late final _uvc_set_pantilt_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Int8,
              ffi.Uint8, ffi.Int8, ffi.Uint8)>>('uvc_set_pantilt_rel');
  late final _uvc_set_pantilt_rel = _uvc_set_pantilt_relPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>, int, int, int, int)>();

  uvc_error uvc_get_roll_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int16> roll,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_roll_abs(
      devh,
      roll,
      req_code.value,
    ));
  }

  late final _uvc_get_roll_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int16>, ffi.UnsignedInt)>>('uvc_get_roll_abs');
  late final _uvc_get_roll_abs = _uvc_get_roll_absPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Int16>, int)>();

  uvc_error uvc_set_roll_abs(
    ffi.Pointer<uvc_device_handle_t> devh,
    int roll,
  ) {
    return uvc_error.fromValue(_uvc_set_roll_abs(
      devh,
      roll,
    ));
  }

  late final _uvc_set_roll_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Int16)>>('uvc_set_roll_abs');
  late final _uvc_set_roll_abs = _uvc_set_roll_absPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_roll_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int8> roll_rel,
    ffi.Pointer<ffi.Uint8> speed,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_roll_rel(
      devh,
      roll_rel,
      speed,
      req_code.value,
    ));
  }

  late final _uvc_get_roll_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_roll_rel');
  late final _uvc_get_roll_rel = _uvc_get_roll_relPtr.asFunction<
      int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_roll_rel(
    ffi.Pointer<uvc_device_handle_t> devh,
    int roll_rel,
    int speed,
  ) {
    return uvc_error.fromValue(_uvc_set_roll_rel(
      devh,
      roll_rel,
      speed,
    ));
  }

  late final _uvc_set_roll_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Int8,
              ffi.Uint8)>>('uvc_set_roll_rel');
  late final _uvc_set_roll_rel = _uvc_set_roll_relPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int, int)>();

  uvc_error uvc_get_privacy(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> privacy,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_privacy(
      devh,
      privacy,
      req_code.value,
    ));
  }

  late final _uvc_get_privacyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>, ffi.UnsignedInt)>>('uvc_get_privacy');
  late final _uvc_get_privacy = _uvc_get_privacyPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_privacy(
    ffi.Pointer<uvc_device_handle_t> devh,
    int privacy,
  ) {
    return uvc_error.fromValue(_uvc_set_privacy(
      devh,
      privacy,
    ));
  }

  late final _uvc_set_privacyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Uint8)>>('uvc_set_privacy');
  late final _uvc_set_privacy = _uvc_set_privacyPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_digital_window(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> window_top,
    ffi.Pointer<ffi.Uint16> window_left,
    ffi.Pointer<ffi.Uint16> window_bottom,
    ffi.Pointer<ffi.Uint16> window_right,
    ffi.Pointer<ffi.Uint16> num_steps,
    ffi.Pointer<ffi.Uint16> num_steps_units,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_digital_window(
      devh,
      window_top,
      window_left,
      window_bottom,
      window_right,
      num_steps,
      num_steps_units,
      req_code.value,
    ));
  }

  late final _uvc_get_digital_windowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.UnsignedInt)>>('uvc_get_digital_window');
  late final _uvc_get_digital_window = _uvc_get_digital_windowPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          int)>();

  uvc_error uvc_set_digital_window(
    ffi.Pointer<uvc_device_handle_t> devh,
    int window_top,
    int window_left,
    int window_bottom,
    int window_right,
    int num_steps,
    int num_steps_units,
  ) {
    return uvc_error.fromValue(_uvc_set_digital_window(
      devh,
      window_top,
      window_left,
      window_bottom,
      window_right,
      num_steps,
      num_steps_units,
    ));
  }

  late final _uvc_set_digital_windowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Uint16)>>('uvc_set_digital_window');
  late final _uvc_set_digital_window = _uvc_set_digital_windowPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, int, int, int, int, int, int)>();

  uvc_error uvc_get_digital_roi(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> roi_top,
    ffi.Pointer<ffi.Uint16> roi_left,
    ffi.Pointer<ffi.Uint16> roi_bottom,
    ffi.Pointer<ffi.Uint16> roi_right,
    ffi.Pointer<ffi.Uint16> auto_controls,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_digital_roi(
      devh,
      roi_top,
      roi_left,
      roi_bottom,
      roi_right,
      auto_controls,
      req_code.value,
    ));
  }

  late final _uvc_get_digital_roiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.UnsignedInt)>>('uvc_get_digital_roi');
  late final _uvc_get_digital_roi = _uvc_get_digital_roiPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          int)>();

  uvc_error uvc_set_digital_roi(
    ffi.Pointer<uvc_device_handle_t> devh,
    int roi_top,
    int roi_left,
    int roi_bottom,
    int roi_right,
    int auto_controls,
  ) {
    return uvc_error.fromValue(_uvc_set_digital_roi(
      devh,
      roi_top,
      roi_left,
      roi_bottom,
      roi_right,
      auto_controls,
    ));
  }

  late final _uvc_set_digital_roiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Uint16)>>('uvc_set_digital_roi');
  late final _uvc_set_digital_roi = _uvc_set_digital_roiPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, int, int, int, int, int)>();

  uvc_error uvc_get_backlight_compensation(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> backlight_compensation,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_backlight_compensation(
      devh,
      backlight_compensation,
      req_code.value,
    ));
  }

  late final _uvc_get_backlight_compensationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>,
              ffi.UnsignedInt)>>('uvc_get_backlight_compensation');
  late final _uvc_get_backlight_compensation =
      _uvc_get_backlight_compensationPtr.asFunction<
          int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_backlight_compensation(
    ffi.Pointer<uvc_device_handle_t> devh,
    int backlight_compensation,
  ) {
    return uvc_error.fromValue(_uvc_set_backlight_compensation(
      devh,
      backlight_compensation,
    ));
  }

  late final _uvc_set_backlight_compensationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_backlight_compensation');
  late final _uvc_set_backlight_compensation =
      _uvc_set_backlight_compensationPtr
          .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_brightness(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int16> brightness,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_brightness(
      devh,
      brightness,
      req_code.value,
    ));
  }

  late final _uvc_get_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int16>, ffi.UnsignedInt)>>('uvc_get_brightness');
  late final _uvc_get_brightness = _uvc_get_brightnessPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Int16>, int)>();

  uvc_error uvc_set_brightness(
    ffi.Pointer<uvc_device_handle_t> devh,
    int brightness,
  ) {
    return uvc_error.fromValue(_uvc_set_brightness(
      devh,
      brightness,
    ));
  }

  late final _uvc_set_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Int16)>>('uvc_set_brightness');
  late final _uvc_set_brightness = _uvc_set_brightnessPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_contrast(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> contrast,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_contrast(
      devh,
      contrast,
      req_code.value,
    ));
  }

  late final _uvc_get_contrastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.UnsignedInt)>>('uvc_get_contrast');
  late final _uvc_get_contrast = _uvc_get_contrastPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_contrast(
    ffi.Pointer<uvc_device_handle_t> devh,
    int contrast,
  ) {
    return uvc_error.fromValue(_uvc_set_contrast(
      devh,
      contrast,
    ));
  }

  late final _uvc_set_contrastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_contrast');
  late final _uvc_set_contrast = _uvc_set_contrastPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_contrast_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> contrast_auto,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_contrast_auto(
      devh,
      contrast_auto,
      req_code.value,
    ));
  }

  late final _uvc_get_contrast_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_contrast_auto');
  late final _uvc_get_contrast_auto = _uvc_get_contrast_autoPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_contrast_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    int contrast_auto,
  ) {
    return uvc_error.fromValue(_uvc_set_contrast_auto(
      devh,
      contrast_auto,
    ));
  }

  late final _uvc_set_contrast_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_contrast_auto');
  late final _uvc_set_contrast_auto = _uvc_set_contrast_autoPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_gain(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> gain,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_gain(
      devh,
      gain,
      req_code.value,
    ));
  }

  late final _uvc_get_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.UnsignedInt)>>('uvc_get_gain');
  late final _uvc_get_gain = _uvc_get_gainPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_gain(
    ffi.Pointer<uvc_device_handle_t> devh,
    int gain,
  ) {
    return uvc_error.fromValue(_uvc_set_gain(
      devh,
      gain,
    ));
  }

  late final _uvc_set_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Uint16)>>('uvc_set_gain');
  late final _uvc_set_gain = _uvc_set_gainPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_power_line_frequency(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> power_line_frequency,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_power_line_frequency(
      devh,
      power_line_frequency,
      req_code.value,
    ));
  }

  late final _uvc_get_power_line_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_power_line_frequency');
  late final _uvc_get_power_line_frequency =
      _uvc_get_power_line_frequencyPtr.asFunction<
          int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_power_line_frequency(
    ffi.Pointer<uvc_device_handle_t> devh,
    int power_line_frequency,
  ) {
    return uvc_error.fromValue(_uvc_set_power_line_frequency(
      devh,
      power_line_frequency,
    ));
  }

  late final _uvc_set_power_line_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_power_line_frequency');
  late final _uvc_set_power_line_frequency = _uvc_set_power_line_frequencyPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_hue(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Int16> hue,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_hue(
      devh,
      hue,
      req_code.value,
    ));
  }

  late final _uvc_get_huePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Int16>, ffi.UnsignedInt)>>('uvc_get_hue');
  late final _uvc_get_hue = _uvc_get_huePtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Int16>, int)>();

  uvc_error uvc_set_hue(
    ffi.Pointer<uvc_device_handle_t> devh,
    int hue,
  ) {
    return uvc_error.fromValue(_uvc_set_hue(
      devh,
      hue,
    ));
  }

  late final _uvc_set_huePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Int16)>>('uvc_set_hue');
  late final _uvc_set_hue = _uvc_set_huePtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_hue_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> hue_auto,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_hue_auto(
      devh,
      hue_auto,
      req_code.value,
    ));
  }

  late final _uvc_get_hue_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>, ffi.UnsignedInt)>>('uvc_get_hue_auto');
  late final _uvc_get_hue_auto = _uvc_get_hue_autoPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_hue_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    int hue_auto,
  ) {
    return uvc_error.fromValue(_uvc_set_hue_auto(
      devh,
      hue_auto,
    ));
  }

  late final _uvc_set_hue_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_hue_auto');
  late final _uvc_set_hue_auto = _uvc_set_hue_autoPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_saturation(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> saturation,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_saturation(
      devh,
      saturation,
      req_code.value,
    ));
  }

  late final _uvc_get_saturationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.UnsignedInt)>>('uvc_get_saturation');
  late final _uvc_get_saturation = _uvc_get_saturationPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_saturation(
    ffi.Pointer<uvc_device_handle_t> devh,
    int saturation,
  ) {
    return uvc_error.fromValue(_uvc_set_saturation(
      devh,
      saturation,
    ));
  }

  late final _uvc_set_saturationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_saturation');
  late final _uvc_set_saturation = _uvc_set_saturationPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_sharpness(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> sharpness,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_sharpness(
      devh,
      sharpness,
      req_code.value,
    ));
  }

  late final _uvc_get_sharpnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.UnsignedInt)>>('uvc_get_sharpness');
  late final _uvc_get_sharpness = _uvc_get_sharpnessPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_sharpness(
    ffi.Pointer<uvc_device_handle_t> devh,
    int sharpness,
  ) {
    return uvc_error.fromValue(_uvc_set_sharpness(
      devh,
      sharpness,
    ));
  }

  late final _uvc_set_sharpnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_sharpness');
  late final _uvc_set_sharpness = _uvc_set_sharpnessPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_gamma(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> gamma,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_gamma(
      devh,
      gamma,
      req_code.value,
    ));
  }

  late final _uvc_get_gammaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.UnsignedInt)>>('uvc_get_gamma');
  late final _uvc_get_gamma = _uvc_get_gammaPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_gamma(
    ffi.Pointer<uvc_device_handle_t> devh,
    int gamma,
  ) {
    return uvc_error.fromValue(_uvc_set_gamma(
      devh,
      gamma,
    ));
  }

  late final _uvc_set_gammaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Uint16)>>('uvc_set_gamma');
  late final _uvc_set_gamma = _uvc_set_gammaPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_white_balance_temperature(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> temperature,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_white_balance_temperature(
      devh,
      temperature,
      req_code.value,
    ));
  }

  late final _uvc_get_white_balance_temperaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>,
              ffi.UnsignedInt)>>('uvc_get_white_balance_temperature');
  late final _uvc_get_white_balance_temperature =
      _uvc_get_white_balance_temperaturePtr.asFunction<
          int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_white_balance_temperature(
    ffi.Pointer<uvc_device_handle_t> devh,
    int temperature,
  ) {
    return uvc_error.fromValue(_uvc_set_white_balance_temperature(
      devh,
      temperature,
    ));
  }

  late final _uvc_set_white_balance_temperaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_white_balance_temperature');
  late final _uvc_set_white_balance_temperature =
      _uvc_set_white_balance_temperaturePtr
          .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_white_balance_temperature_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> temperature_auto,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_white_balance_temperature_auto(
      devh,
      temperature_auto,
      req_code.value,
    ));
  }

  late final _uvc_get_white_balance_temperature_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_white_balance_temperature_auto');
  late final _uvc_get_white_balance_temperature_auto =
      _uvc_get_white_balance_temperature_autoPtr.asFunction<
          int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_white_balance_temperature_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    int temperature_auto,
  ) {
    return uvc_error.fromValue(_uvc_set_white_balance_temperature_auto(
      devh,
      temperature_auto,
    ));
  }

  late final _uvc_set_white_balance_temperature_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_white_balance_temperature_auto');
  late final _uvc_set_white_balance_temperature_auto =
      _uvc_set_white_balance_temperature_autoPtr
          .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_white_balance_component(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> blue,
    ffi.Pointer<ffi.Uint16> red,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_white_balance_component(
      devh,
      blue,
      red,
      req_code.value,
    ));
  }

  late final _uvc_get_white_balance_componentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.UnsignedInt)>>('uvc_get_white_balance_component');
  late final _uvc_get_white_balance_component =
      _uvc_get_white_balance_componentPtr.asFunction<
          int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_white_balance_component(
    ffi.Pointer<uvc_device_handle_t> devh,
    int blue,
    int red,
  ) {
    return uvc_error.fromValue(_uvc_set_white_balance_component(
      devh,
      blue,
      red,
    ));
  }

  late final _uvc_set_white_balance_componentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>, ffi.Uint16,
              ffi.Uint16)>>('uvc_set_white_balance_component');
  late final _uvc_set_white_balance_component =
      _uvc_set_white_balance_componentPtr.asFunction<
          int Function(ffi.Pointer<uvc_device_handle_t>, int, int)>();

  uvc_error uvc_get_white_balance_component_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> white_balance_component_auto,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_white_balance_component_auto(
      devh,
      white_balance_component_auto,
      req_code.value,
    ));
  }

  late final _uvc_get_white_balance_component_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_white_balance_component_auto');
  late final _uvc_get_white_balance_component_auto =
      _uvc_get_white_balance_component_autoPtr.asFunction<
          int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_white_balance_component_auto(
    ffi.Pointer<uvc_device_handle_t> devh,
    int white_balance_component_auto,
  ) {
    return uvc_error.fromValue(_uvc_set_white_balance_component_auto(
      devh,
      white_balance_component_auto,
    ));
  }

  late final _uvc_set_white_balance_component_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_white_balance_component_auto');
  late final _uvc_set_white_balance_component_auto =
      _uvc_set_white_balance_component_autoPtr
          .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_digital_multiplier(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> multiplier_step,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_digital_multiplier(
      devh,
      multiplier_step,
      req_code.value,
    ));
  }

  late final _uvc_get_digital_multiplierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>,
              ffi.UnsignedInt)>>('uvc_get_digital_multiplier');
  late final _uvc_get_digital_multiplier =
      _uvc_get_digital_multiplierPtr.asFunction<
          int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_digital_multiplier(
    ffi.Pointer<uvc_device_handle_t> devh,
    int multiplier_step,
  ) {
    return uvc_error.fromValue(_uvc_set_digital_multiplier(
      devh,
      multiplier_step,
    ));
  }

  late final _uvc_set_digital_multiplierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_digital_multiplier');
  late final _uvc_set_digital_multiplier = _uvc_set_digital_multiplierPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_digital_multiplier_limit(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint16> multiplier_step,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_digital_multiplier_limit(
      devh,
      multiplier_step,
      req_code.value,
    ));
  }

  late final _uvc_get_digital_multiplier_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>,
              ffi.UnsignedInt)>>('uvc_get_digital_multiplier_limit');
  late final _uvc_get_digital_multiplier_limit =
      _uvc_get_digital_multiplier_limitPtr.asFunction<
          int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint16>, int)>();

  uvc_error uvc_set_digital_multiplier_limit(
    ffi.Pointer<uvc_device_handle_t> devh,
    int multiplier_step,
  ) {
    return uvc_error.fromValue(_uvc_set_digital_multiplier_limit(
      devh,
      multiplier_step,
    ));
  }

  late final _uvc_set_digital_multiplier_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint16)>>('uvc_set_digital_multiplier_limit');
  late final _uvc_set_digital_multiplier_limit =
      _uvc_set_digital_multiplier_limitPtr
          .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_analog_video_standard(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> video_standard,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_analog_video_standard(
      devh,
      video_standard,
      req_code.value,
    ));
  }

  late final _uvc_get_analog_video_standardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_analog_video_standard');
  late final _uvc_get_analog_video_standard =
      _uvc_get_analog_video_standardPtr.asFunction<
          int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_analog_video_standard(
    ffi.Pointer<uvc_device_handle_t> devh,
    int video_standard,
  ) {
    return uvc_error.fromValue(_uvc_set_analog_video_standard(
      devh,
      video_standard,
    ));
  }

  late final _uvc_set_analog_video_standardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_analog_video_standard');
  late final _uvc_set_analog_video_standard = _uvc_set_analog_video_standardPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_analog_video_lock_status(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> status,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_analog_video_lock_status(
      devh,
      status,
      req_code.value,
    ));
  }

  late final _uvc_get_analog_video_lock_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_analog_video_lock_status');
  late final _uvc_get_analog_video_lock_status =
      _uvc_get_analog_video_lock_statusPtr.asFunction<
          int Function(
              ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_analog_video_lock_status(
    ffi.Pointer<uvc_device_handle_t> devh,
    int status,
  ) {
    return uvc_error.fromValue(_uvc_set_analog_video_lock_status(
      devh,
      status,
    ));
  }

  late final _uvc_set_analog_video_lock_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_analog_video_lock_status');
  late final _uvc_set_analog_video_lock_status =
      _uvc_set_analog_video_lock_statusPtr
          .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  uvc_error uvc_get_input_select(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<ffi.Uint8> selector,
    uvc_req_code req_code,
  ) {
    return uvc_error.fromValue(_uvc_get_input_select(
      devh,
      selector,
      req_code.value,
    ));
  }

  late final _uvc_get_input_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedInt)>>('uvc_get_input_select');
  late final _uvc_get_input_select = _uvc_get_input_selectPtr.asFunction<
      int Function(
          ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<ffi.Uint8>, int)>();

  uvc_error uvc_set_input_select(
    ffi.Pointer<uvc_device_handle_t> devh,
    int selector,
  ) {
    return uvc_error.fromValue(_uvc_set_input_select(
      devh,
      selector,
    ));
  }

  late final _uvc_set_input_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Uint8)>>('uvc_set_input_select');
  late final _uvc_set_input_select = _uvc_set_input_selectPtr
      .asFunction<int Function(ffi.Pointer<uvc_device_handle_t>, int)>();

  /// end AUTO-GENERATED control accessors
  void uvc_perror(
    uvc_error err,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _uvc_perror(
      err.value,
      msg,
    );
  }

  late final _uvc_perrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('uvc_perror');
  late final _uvc_perror =
      _uvc_perrorPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> uvc_strerror(
    uvc_error err,
  ) {
    return _uvc_strerror(
      err.value,
    );
  }

  late final _uvc_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'uvc_strerror');
  late final _uvc_strerror =
      _uvc_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void uvc_print_diag(
    ffi.Pointer<uvc_device_handle_t> devh,
    ffi.Pointer<FILE> stream,
  ) {
    return _uvc_print_diag(
      devh,
      stream,
    );
  }

  late final _uvc_print_diagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<uvc_device_handle_t>,
              ffi.Pointer<FILE>)>>('uvc_print_diag');
  late final _uvc_print_diag = _uvc_print_diagPtr.asFunction<
      void Function(ffi.Pointer<uvc_device_handle_t>, ffi.Pointer<FILE>)>();

  void uvc_print_stream_ctrl(
    ffi.Pointer<uvc_stream_ctrl_t> ctrl,
    ffi.Pointer<FILE> stream,
  ) {
    return _uvc_print_stream_ctrl(
      ctrl,
      stream,
    );
  }

  late final _uvc_print_stream_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<uvc_stream_ctrl_t>,
              ffi.Pointer<FILE>)>>('uvc_print_stream_ctrl');
  late final _uvc_print_stream_ctrl = _uvc_print_stream_ctrlPtr.asFunction<
      void Function(ffi.Pointer<uvc_stream_ctrl_t>, ffi.Pointer<FILE>)>();

  ffi.Pointer<uvc_frame_t> uvc_allocate_frame(
    int data_bytes,
  ) {
    return _uvc_allocate_frame(
      data_bytes,
    );
  }

  late final _uvc_allocate_framePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<uvc_frame_t> Function(ffi.Size)>>(
          'uvc_allocate_frame');
  late final _uvc_allocate_frame = _uvc_allocate_framePtr
      .asFunction<ffi.Pointer<uvc_frame_t> Function(int)>();

  void uvc_free_frame(
    ffi.Pointer<uvc_frame_t> frame,
  ) {
    return _uvc_free_frame(
      frame,
    );
  }

  late final _uvc_free_framePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<uvc_frame_t>)>>(
          'uvc_free_frame');
  late final _uvc_free_frame =
      _uvc_free_framePtr.asFunction<void Function(ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_duplicate_frame(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_duplicate_frame(
      in1,
      out,
    ));
  }

  late final _uvc_duplicate_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_duplicate_frame');
  late final _uvc_duplicate_frame = _uvc_duplicate_framePtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_yuyv2rgb(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_yuyv2rgb(
      in1,
      out,
    ));
  }

  late final _uvc_yuyv2rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_yuyv2rgb');
  late final _uvc_yuyv2rgb = _uvc_yuyv2rgbPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_uyvy2rgb(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_uyvy2rgb(
      in1,
      out,
    ));
  }

  late final _uvc_uyvy2rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_uyvy2rgb');
  late final _uvc_uyvy2rgb = _uvc_uyvy2rgbPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_any2rgb(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_any2rgb(
      in1,
      out,
    ));
  }

  late final _uvc_any2rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_any2rgb');
  late final _uvc_any2rgb = _uvc_any2rgbPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_yuyv2bgr(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_yuyv2bgr(
      in1,
      out,
    ));
  }

  late final _uvc_yuyv2bgrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_yuyv2bgr');
  late final _uvc_yuyv2bgr = _uvc_yuyv2bgrPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_uyvy2bgr(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_uyvy2bgr(
      in1,
      out,
    ));
  }

  late final _uvc_uyvy2bgrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_uyvy2bgr');
  late final _uvc_uyvy2bgr = _uvc_uyvy2bgrPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_any2bgr(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_any2bgr(
      in1,
      out,
    ));
  }

  late final _uvc_any2bgrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_any2bgr');
  late final _uvc_any2bgr = _uvc_any2bgrPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_yuyv2y(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_yuyv2y(
      in1,
      out,
    ));
  }

  late final _uvc_yuyv2yPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_yuyv2y');
  late final _uvc_yuyv2y = _uvc_yuyv2yPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_yuyv2uv(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_yuyv2uv(
      in1,
      out,
    ));
  }

  late final _uvc_yuyv2uvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_yuyv2uv');
  late final _uvc_yuyv2uv = _uvc_yuyv2uvPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_mjpeg2rgb(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_mjpeg2rgb(
      in1,
      out,
    ));
  }

  late final _uvc_mjpeg2rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_mjpeg2rgb');
  late final _uvc_mjpeg2rgb = _uvc_mjpeg2rgbPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();

  uvc_error uvc_mjpeg2gray(
    ffi.Pointer<uvc_frame_t> in1,
    ffi.Pointer<uvc_frame_t> out,
  ) {
    return uvc_error.fromValue(_uvc_mjpeg2gray(
      in1,
      out,
    ));
  }

  late final _uvc_mjpeg2grayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<uvc_frame_t>,
              ffi.Pointer<uvc_frame_t>)>>('uvc_mjpeg2gray');
  late final _uvc_mjpeg2gray = _uvc_mjpeg2grayPtr.asFunction<
      int Function(ffi.Pointer<uvc_frame_t>, ffi.Pointer<uvc_frame_t>)>();
}

final class libusb_context extends ffi.Opaque {}

final class libusb_device_handle extends ffi.Opaque {}

/// UVC error types, based on libusb errors
/// @ingroup diag
enum uvc_error {
  /// Success (no error)
  UVC_SUCCESS(0),

  /// Input/output error
  UVC_ERROR_IO(-1),

  /// Invalid parameter
  UVC_ERROR_INVALID_PARAM(-2),

  /// Access denied
  UVC_ERROR_ACCESS(-3),

  /// No such device
  UVC_ERROR_NO_DEVICE(-4),

  /// Entity not found
  UVC_ERROR_NOT_FOUND(-5),

  /// Resource busy
  UVC_ERROR_BUSY(-6),

  /// Operation timed out
  UVC_ERROR_TIMEOUT(-7),

  /// Overflow
  UVC_ERROR_OVERFLOW(-8),

  /// Pipe error
  UVC_ERROR_PIPE(-9),

  /// System call interrupted
  UVC_ERROR_INTERRUPTED(-10),

  /// Insufficient memory
  UVC_ERROR_NO_MEM(-11),

  /// Operation not supported
  UVC_ERROR_NOT_SUPPORTED(-12),

  /// Device is not UVC-compliant
  UVC_ERROR_INVALID_DEVICE(-50),

  /// Mode not supported
  UVC_ERROR_INVALID_MODE(-51),

  /// Resource has a callback (can't use polling and async)
  UVC_ERROR_CALLBACK_EXISTS(-52),

  /// Undefined error
  UVC_ERROR_OTHER(-99);

  final int value;
  const uvc_error(this.value);

  static uvc_error fromValue(int value) => switch (value) {
        0 => UVC_SUCCESS,
        -1 => UVC_ERROR_IO,
        -2 => UVC_ERROR_INVALID_PARAM,
        -3 => UVC_ERROR_ACCESS,
        -4 => UVC_ERROR_NO_DEVICE,
        -5 => UVC_ERROR_NOT_FOUND,
        -6 => UVC_ERROR_BUSY,
        -7 => UVC_ERROR_TIMEOUT,
        -8 => UVC_ERROR_OVERFLOW,
        -9 => UVC_ERROR_PIPE,
        -10 => UVC_ERROR_INTERRUPTED,
        -11 => UVC_ERROR_NO_MEM,
        -12 => UVC_ERROR_NOT_SUPPORTED,
        -50 => UVC_ERROR_INVALID_DEVICE,
        -51 => UVC_ERROR_INVALID_MODE,
        -52 => UVC_ERROR_CALLBACK_EXISTS,
        -99 => UVC_ERROR_OTHER,
        _ => throw ArgumentError("Unknown value for uvc_error: $value"),
      };
}

/// Color coding of stream, transport-independent
/// @ingroup streaming
enum uvc_frame_format {
  UVC_FRAME_FORMAT_UNKNOWN(0),
  UVC_FRAME_FORMAT_UNCOMPRESSED(1),
  UVC_FRAME_FORMAT_COMPRESSED(2),

  /// YUYV/YUV2/YUV422: YUV encoding with one luminance value per pixel and
  /// one UV (chrominance) pair for every two pixels.
  UVC_FRAME_FORMAT_YUYV(3),
  UVC_FRAME_FORMAT_UYVY(4),

  /// 24-bit RGB
  UVC_FRAME_FORMAT_RGB(5),
  UVC_FRAME_FORMAT_BGR(6),

  /// Motion-JPEG (or JPEG) encoded images
  UVC_FRAME_FORMAT_MJPEG(7),
  UVC_FRAME_FORMAT_H264(8),

  /// Greyscale images
  UVC_FRAME_FORMAT_GRAY8(9),
  UVC_FRAME_FORMAT_GRAY16(10),

  /// Raw colour mosaic images
  UVC_FRAME_FORMAT_BY8(11),
  UVC_FRAME_FORMAT_BA81(12),
  UVC_FRAME_FORMAT_SGRBG8(13),
  UVC_FRAME_FORMAT_SGBRG8(14),
  UVC_FRAME_FORMAT_SRGGB8(15),
  UVC_FRAME_FORMAT_SBGGR8(16),

  /// YUV420: NV12
  UVC_FRAME_FORMAT_NV12(17),

  /// YUV: P010
  UVC_FRAME_FORMAT_P010(18),

  /// Number of formats understood
  UVC_FRAME_FORMAT_COUNT(19);

  /// Any supported format
  static const UVC_FRAME_FORMAT_ANY = UVC_FRAME_FORMAT_UNKNOWN;

  final int value;
  const uvc_frame_format(this.value);

  static uvc_frame_format fromValue(int value) => switch (value) {
        0 => UVC_FRAME_FORMAT_UNKNOWN,
        1 => UVC_FRAME_FORMAT_UNCOMPRESSED,
        2 => UVC_FRAME_FORMAT_COMPRESSED,
        3 => UVC_FRAME_FORMAT_YUYV,
        4 => UVC_FRAME_FORMAT_UYVY,
        5 => UVC_FRAME_FORMAT_RGB,
        6 => UVC_FRAME_FORMAT_BGR,
        7 => UVC_FRAME_FORMAT_MJPEG,
        8 => UVC_FRAME_FORMAT_H264,
        9 => UVC_FRAME_FORMAT_GRAY8,
        10 => UVC_FRAME_FORMAT_GRAY16,
        11 => UVC_FRAME_FORMAT_BY8,
        12 => UVC_FRAME_FORMAT_BA81,
        13 => UVC_FRAME_FORMAT_SGRBG8,
        14 => UVC_FRAME_FORMAT_SGBRG8,
        15 => UVC_FRAME_FORMAT_SRGGB8,
        16 => UVC_FRAME_FORMAT_SBGGR8,
        17 => UVC_FRAME_FORMAT_NV12,
        18 => UVC_FRAME_FORMAT_P010,
        19 => UVC_FRAME_FORMAT_COUNT,
        _ => throw ArgumentError("Unknown value for uvc_frame_format: $value"),
      };

  @override
  String toString() {
    if (this == UVC_FRAME_FORMAT_UNKNOWN)
      return "uvc_frame_format.UVC_FRAME_FORMAT_UNKNOWN, uvc_frame_format.UVC_FRAME_FORMAT_ANY";
    return super.toString();
  }
}

/// VideoStreaming interface descriptor subtype (A.6)
enum uvc_vs_desc_subtype {
  UVC_VS_UNDEFINED(0),
  UVC_VS_INPUT_HEADER(1),
  UVC_VS_OUTPUT_HEADER(2),
  UVC_VS_STILL_IMAGE_FRAME(3),
  UVC_VS_FORMAT_UNCOMPRESSED(4),
  UVC_VS_FRAME_UNCOMPRESSED(5),
  UVC_VS_FORMAT_MJPEG(6),
  UVC_VS_FRAME_MJPEG(7),
  UVC_VS_FORMAT_MPEG2TS(10),
  UVC_VS_FORMAT_DV(12),
  UVC_VS_COLORFORMAT(13),
  UVC_VS_FORMAT_FRAME_BASED(16),
  UVC_VS_FRAME_FRAME_BASED(17),
  UVC_VS_FORMAT_STREAM_BASED(18);

  final int value;
  const uvc_vs_desc_subtype(this.value);

  static uvc_vs_desc_subtype fromValue(int value) => switch (value) {
        0 => UVC_VS_UNDEFINED,
        1 => UVC_VS_INPUT_HEADER,
        2 => UVC_VS_OUTPUT_HEADER,
        3 => UVC_VS_STILL_IMAGE_FRAME,
        4 => UVC_VS_FORMAT_UNCOMPRESSED,
        5 => UVC_VS_FRAME_UNCOMPRESSED,
        6 => UVC_VS_FORMAT_MJPEG,
        7 => UVC_VS_FRAME_MJPEG,
        10 => UVC_VS_FORMAT_MPEG2TS,
        12 => UVC_VS_FORMAT_DV,
        13 => UVC_VS_COLORFORMAT,
        16 => UVC_VS_FORMAT_FRAME_BASED,
        17 => UVC_VS_FRAME_FRAME_BASED,
        18 => UVC_VS_FORMAT_STREAM_BASED,
        _ =>
          throw ArgumentError("Unknown value for uvc_vs_desc_subtype: $value"),
      };
}

/// Format descriptor
///
/// A "format" determines a stream's image type (e.g., raw YUYV or JPEG)
/// and includes many "frame" configurations.
final class uvc_format_desc extends ffi.Struct {
  external ffi.Pointer<uvc_streaming_interface> parent;

  external ffi.Pointer<uvc_format_desc> prev;

  external ffi.Pointer<uvc_format_desc> next;

  /// Type of image stream, such as JPEG or uncompressed.
  @ffi.UnsignedInt()
  external int bDescriptorSubtype;

  /// Identifier of this format within the VS interface's format list
  @ffi.Uint8()
  external int bFormatIndex;

  @ffi.Uint8()
  external int bNumFrameDescriptors;

  /// Format specifier
  external UnnamedUnion1 unnamed;

  /// Format-specific data
  external UnnamedUnion2 unnamed1;

  /// Default {uvc_frame_desc} to choose given this format
  @ffi.Uint8()
  external int bDefaultFrameIndex;

  @ffi.Uint8()
  external int bAspectRatioX;

  @ffi.Uint8()
  external int bAspectRatioY;

  @ffi.Uint8()
  external int bmInterlaceFlags;

  @ffi.Uint8()
  external int bCopyProtect;

  @ffi.Uint8()
  external int bVariableSize;

  /// Available frame specifications for this format
  external ffi.Pointer<uvc_frame_desc> frame_descs;

  external ffi.Pointer<uvc_still_frame_desc> still_frame_desc;
}

final class uvc_streaming_interface extends ffi.Opaque {}

/// Format specifier
final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> guidFormat;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> fourccFormat;
}

/// Format-specific data
final class UnnamedUnion2 extends ffi.Union {
  /// BPP for uncompressed stream
  @ffi.Uint8()
  external int bBitsPerPixel;

  /// Flags for JPEG stream
  @ffi.Uint8()
  external int bmFlags;
}

/// Frame descriptor
///
/// A "frame" is a configuration of a streaming format
/// for a particular image size at one of possibly several
/// available frame rates.
final class uvc_frame_desc extends ffi.Struct {
  external ffi.Pointer<uvc_format_desc> parent;

  external ffi.Pointer<uvc_frame_desc> prev;

  external ffi.Pointer<uvc_frame_desc> next;

  /// Type of frame, such as JPEG frame or uncompressed frme
  @ffi.UnsignedInt()
  external int bDescriptorSubtype;

  /// Index of the frame within the list of specs available for this format
  @ffi.Uint8()
  external int bFrameIndex;

  @ffi.Uint8()
  external int bmCapabilities;

  /// Image width
  @ffi.Uint16()
  external int wWidth;

  /// Image height
  @ffi.Uint16()
  external int wHeight;

  /// Bitrate of corresponding stream at minimal frame rate
  @ffi.Uint32()
  external int dwMinBitRate;

  /// Bitrate of corresponding stream at maximal frame rate
  @ffi.Uint32()
  external int dwMaxBitRate;

  /// Maximum number of bytes for a video frame
  @ffi.Uint32()
  external int dwMaxVideoFrameBufferSize;

  /// Default frame interval (in 100ns units)
  @ffi.Uint32()
  external int dwDefaultFrameInterval;

  /// Minimum frame interval for continuous mode (100ns units)
  @ffi.Uint32()
  external int dwMinFrameInterval;

  /// Maximum frame interval for continuous mode (100ns units)
  @ffi.Uint32()
  external int dwMaxFrameInterval;

  /// Granularity of frame interval range for continuous mode (100ns)
  @ffi.Uint32()
  external int dwFrameIntervalStep;

  /// Frame intervals
  @ffi.Uint8()
  external int bFrameIntervalType;

  /// number of bytes per line
  @ffi.Uint32()
  external int dwBytesPerLine;

  /// Available frame rates, zero-terminated (in 100ns units)
  external ffi.Pointer<ffi.Uint32> intervals;
}

final class uvc_still_frame_desc extends ffi.Struct {
  external ffi.Pointer<uvc_format_desc> parent;

  external ffi.Pointer<uvc_still_frame_desc> prev;

  external ffi.Pointer<uvc_still_frame_desc> next;

  /// Type of frame, such as JPEG frame or uncompressed frme
  @ffi.UnsignedInt()
  external int bDescriptorSubtype;

  /// Index of the frame within the list of specs available for this format
  @ffi.Uint8()
  external int bEndPointAddress;

  external ffi.Pointer<uvc_still_frame_res_t> imageSizePatterns;

  @ffi.Uint8()
  external int bNumCompressionPattern;

  /// indication of compression level, the higher, the more compression is applied to image
  external ffi.Pointer<ffi.Uint8> bCompression;
}

typedef uvc_still_frame_res_t = uvc_still_frame_res;

final class uvc_still_frame_res extends ffi.Struct {
  external ffi.Pointer<uvc_still_frame_res> prev;

  external ffi.Pointer<uvc_still_frame_res> next;

  @ffi.Uint8()
  external int bResolutionIndex;

  /// Image width
  @ffi.Uint16()
  external int wWidth;

  /// Image height
  @ffi.Uint16()
  external int wHeight;
}

/// UVC request code (A.8)
enum uvc_req_code {
  UVC_RC_UNDEFINED(0),
  UVC_SET_CUR(1),
  UVC_GET_CUR(129),
  UVC_GET_MIN(130),
  UVC_GET_MAX(131),
  UVC_GET_RES(132),
  UVC_GET_LEN(133),
  UVC_GET_INFO(134),
  UVC_GET_DEF(135);

  final int value;
  const uvc_req_code(this.value);

  static uvc_req_code fromValue(int value) => switch (value) {
        0 => UVC_RC_UNDEFINED,
        1 => UVC_SET_CUR,
        129 => UVC_GET_CUR,
        130 => UVC_GET_MIN,
        131 => UVC_GET_MAX,
        132 => UVC_GET_RES,
        133 => UVC_GET_LEN,
        134 => UVC_GET_INFO,
        135 => UVC_GET_DEF,
        _ => throw ArgumentError("Unknown value for uvc_req_code: $value"),
      };
}

enum uvc_device_power_mode {
  UVC_VC_VIDEO_POWER_MODE_FULL(11),
  UVC_VC_VIDEO_POWER_MODE_DEVICE_DEPENDENT(27);

  final int value;
  const uvc_device_power_mode(this.value);

  static uvc_device_power_mode fromValue(int value) => switch (value) {
        11 => UVC_VC_VIDEO_POWER_MODE_FULL,
        27 => UVC_VC_VIDEO_POWER_MODE_DEVICE_DEPENDENT,
        _ => throw ArgumentError(
            "Unknown value for uvc_device_power_mode: $value"),
      };
}

/// Camera terminal control selector (A.9.4)
enum uvc_ct_ctrl_selector {
  UVC_CT_CONTROL_UNDEFINED(0),
  UVC_CT_SCANNING_MODE_CONTROL(1),
  UVC_CT_AE_MODE_CONTROL(2),
  UVC_CT_AE_PRIORITY_CONTROL(3),
  UVC_CT_EXPOSURE_TIME_ABSOLUTE_CONTROL(4),
  UVC_CT_EXPOSURE_TIME_RELATIVE_CONTROL(5),
  UVC_CT_FOCUS_ABSOLUTE_CONTROL(6),
  UVC_CT_FOCUS_RELATIVE_CONTROL(7),
  UVC_CT_FOCUS_AUTO_CONTROL(8),
  UVC_CT_IRIS_ABSOLUTE_CONTROL(9),
  UVC_CT_IRIS_RELATIVE_CONTROL(10),
  UVC_CT_ZOOM_ABSOLUTE_CONTROL(11),
  UVC_CT_ZOOM_RELATIVE_CONTROL(12),
  UVC_CT_PANTILT_ABSOLUTE_CONTROL(13),
  UVC_CT_PANTILT_RELATIVE_CONTROL(14),
  UVC_CT_ROLL_ABSOLUTE_CONTROL(15),
  UVC_CT_ROLL_RELATIVE_CONTROL(16),
  UVC_CT_PRIVACY_CONTROL(17),
  UVC_CT_FOCUS_SIMPLE_CONTROL(18),
  UVC_CT_DIGITAL_WINDOW_CONTROL(19),
  UVC_CT_REGION_OF_INTEREST_CONTROL(20);

  final int value;
  const uvc_ct_ctrl_selector(this.value);

  static uvc_ct_ctrl_selector fromValue(int value) => switch (value) {
        0 => UVC_CT_CONTROL_UNDEFINED,
        1 => UVC_CT_SCANNING_MODE_CONTROL,
        2 => UVC_CT_AE_MODE_CONTROL,
        3 => UVC_CT_AE_PRIORITY_CONTROL,
        4 => UVC_CT_EXPOSURE_TIME_ABSOLUTE_CONTROL,
        5 => UVC_CT_EXPOSURE_TIME_RELATIVE_CONTROL,
        6 => UVC_CT_FOCUS_ABSOLUTE_CONTROL,
        7 => UVC_CT_FOCUS_RELATIVE_CONTROL,
        8 => UVC_CT_FOCUS_AUTO_CONTROL,
        9 => UVC_CT_IRIS_ABSOLUTE_CONTROL,
        10 => UVC_CT_IRIS_RELATIVE_CONTROL,
        11 => UVC_CT_ZOOM_ABSOLUTE_CONTROL,
        12 => UVC_CT_ZOOM_RELATIVE_CONTROL,
        13 => UVC_CT_PANTILT_ABSOLUTE_CONTROL,
        14 => UVC_CT_PANTILT_RELATIVE_CONTROL,
        15 => UVC_CT_ROLL_ABSOLUTE_CONTROL,
        16 => UVC_CT_ROLL_RELATIVE_CONTROL,
        17 => UVC_CT_PRIVACY_CONTROL,
        18 => UVC_CT_FOCUS_SIMPLE_CONTROL,
        19 => UVC_CT_DIGITAL_WINDOW_CONTROL,
        20 => UVC_CT_REGION_OF_INTEREST_CONTROL,
        _ =>
          throw ArgumentError("Unknown value for uvc_ct_ctrl_selector: $value"),
      };
}

/// Processing unit control selector (A.9.5)
enum uvc_pu_ctrl_selector {
  UVC_PU_CONTROL_UNDEFINED(0),
  UVC_PU_BACKLIGHT_COMPENSATION_CONTROL(1),
  UVC_PU_BRIGHTNESS_CONTROL(2),
  UVC_PU_CONTRAST_CONTROL(3),
  UVC_PU_GAIN_CONTROL(4),
  UVC_PU_POWER_LINE_FREQUENCY_CONTROL(5),
  UVC_PU_HUE_CONTROL(6),
  UVC_PU_SATURATION_CONTROL(7),
  UVC_PU_SHARPNESS_CONTROL(8),
  UVC_PU_GAMMA_CONTROL(9),
  UVC_PU_WHITE_BALANCE_TEMPERATURE_CONTROL(10),
  UVC_PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL(11),
  UVC_PU_WHITE_BALANCE_COMPONENT_CONTROL(12),
  UVC_PU_WHITE_BALANCE_COMPONENT_AUTO_CONTROL(13),
  UVC_PU_DIGITAL_MULTIPLIER_CONTROL(14),
  UVC_PU_DIGITAL_MULTIPLIER_LIMIT_CONTROL(15),
  UVC_PU_HUE_AUTO_CONTROL(16),
  UVC_PU_ANALOG_VIDEO_STANDARD_CONTROL(17),
  UVC_PU_ANALOG_LOCK_STATUS_CONTROL(18),
  UVC_PU_CONTRAST_AUTO_CONTROL(19);

  final int value;
  const uvc_pu_ctrl_selector(this.value);

  static uvc_pu_ctrl_selector fromValue(int value) => switch (value) {
        0 => UVC_PU_CONTROL_UNDEFINED,
        1 => UVC_PU_BACKLIGHT_COMPENSATION_CONTROL,
        2 => UVC_PU_BRIGHTNESS_CONTROL,
        3 => UVC_PU_CONTRAST_CONTROL,
        4 => UVC_PU_GAIN_CONTROL,
        5 => UVC_PU_POWER_LINE_FREQUENCY_CONTROL,
        6 => UVC_PU_HUE_CONTROL,
        7 => UVC_PU_SATURATION_CONTROL,
        8 => UVC_PU_SHARPNESS_CONTROL,
        9 => UVC_PU_GAMMA_CONTROL,
        10 => UVC_PU_WHITE_BALANCE_TEMPERATURE_CONTROL,
        11 => UVC_PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL,
        12 => UVC_PU_WHITE_BALANCE_COMPONENT_CONTROL,
        13 => UVC_PU_WHITE_BALANCE_COMPONENT_AUTO_CONTROL,
        14 => UVC_PU_DIGITAL_MULTIPLIER_CONTROL,
        15 => UVC_PU_DIGITAL_MULTIPLIER_LIMIT_CONTROL,
        16 => UVC_PU_HUE_AUTO_CONTROL,
        17 => UVC_PU_ANALOG_VIDEO_STANDARD_CONTROL,
        18 => UVC_PU_ANALOG_LOCK_STATUS_CONTROL,
        19 => UVC_PU_CONTRAST_AUTO_CONTROL,
        _ =>
          throw ArgumentError("Unknown value for uvc_pu_ctrl_selector: $value"),
      };
}

/// USB terminal type (B.1)
enum uvc_term_type {
  UVC_TT_VENDOR_SPECIFIC(256),
  UVC_TT_STREAMING(257);

  final int value;
  const uvc_term_type(this.value);

  static uvc_term_type fromValue(int value) => switch (value) {
        256 => UVC_TT_VENDOR_SPECIFIC,
        257 => UVC_TT_STREAMING,
        _ => throw ArgumentError("Unknown value for uvc_term_type: $value"),
      };
}

/// Input terminal type (B.2)
enum uvc_it_type {
  UVC_ITT_VENDOR_SPECIFIC(512),
  UVC_ITT_CAMERA(513),
  UVC_ITT_MEDIA_TRANSPORT_INPUT(514);

  final int value;
  const uvc_it_type(this.value);

  static uvc_it_type fromValue(int value) => switch (value) {
        512 => UVC_ITT_VENDOR_SPECIFIC,
        513 => UVC_ITT_CAMERA,
        514 => UVC_ITT_MEDIA_TRANSPORT_INPUT,
        _ => throw ArgumentError("Unknown value for uvc_it_type: $value"),
      };
}

/// Output terminal type (B.3)
enum uvc_ot_type {
  UVC_OTT_VENDOR_SPECIFIC(768),
  UVC_OTT_DISPLAY(769),
  UVC_OTT_MEDIA_TRANSPORT_OUTPUT(770);

  final int value;
  const uvc_ot_type(this.value);

  static uvc_ot_type fromValue(int value) => switch (value) {
        768 => UVC_OTT_VENDOR_SPECIFIC,
        769 => UVC_OTT_DISPLAY,
        770 => UVC_OTT_MEDIA_TRANSPORT_OUTPUT,
        _ => throw ArgumentError("Unknown value for uvc_ot_type: $value"),
      };
}

/// External terminal type (B.4)
enum uvc_et_type {
  UVC_EXTERNAL_VENDOR_SPECIFIC(1024),
  UVC_COMPOSITE_CONNECTOR(1025),
  UVC_SVIDEO_CONNECTOR(1026),
  UVC_COMPONENT_CONNECTOR(1027);

  final int value;
  const uvc_et_type(this.value);

  static uvc_et_type fromValue(int value) => switch (value) {
        1024 => UVC_EXTERNAL_VENDOR_SPECIFIC,
        1025 => UVC_COMPOSITE_CONNECTOR,
        1026 => UVC_SVIDEO_CONNECTOR,
        1027 => UVC_COMPONENT_CONNECTOR,
        _ => throw ArgumentError("Unknown value for uvc_et_type: $value"),
      };
}

/// Context, equivalent to libusb's contexts.
///
/// May either own a libusb context or use one that's already made.
///
/// Always create these with uvc_get_context.
final class uvc_context extends ffi.Opaque {}

/// UVC device.
///
/// Get this from uvc_get_device_list() or uvc_find_device().
final class uvc_device extends ffi.Opaque {}

/// Handle on an open UVC device.
///
/// Get one of these from uvc_open(). Once you uvc_close()
/// it, it's no longer valid.
final class uvc_device_handle extends ffi.Opaque {}

/// Handle on an open UVC stream.
///
/// Get one of these from uvc_stream_open*().
/// Once you uvc_stream_close() it, it will no longer be valid.
final class uvc_stream_handle extends ffi.Opaque {}

/// Representation of the interface that brings data into the UVC device
final class uvc_input_terminal extends ffi.Struct {
  external ffi.Pointer<uvc_input_terminal> prev;

  external ffi.Pointer<uvc_input_terminal> next;

  /// Index of the terminal within the device
  @ffi.Uint8()
  external int bTerminalID;

  /// Type of terminal (e.g., camera)
  @ffi.UnsignedInt()
  external int wTerminalType;

  @ffi.Uint16()
  external int wObjectiveFocalLengthMin;

  @ffi.Uint16()
  external int wObjectiveFocalLengthMax;

  @ffi.Uint16()
  external int wOcularFocalLength;

  /// Camera controls (meaning of bits given in {uvc_ct_ctrl_selector})
  @ffi.Uint64()
  external int bmControls;
}

final class uvc_output_terminal extends ffi.Struct {
  external ffi.Pointer<uvc_output_terminal> prev;

  external ffi.Pointer<uvc_output_terminal> next;
}

/// Represents post-capture processing functions
final class uvc_processing_unit extends ffi.Struct {
  external ffi.Pointer<uvc_processing_unit> prev;

  external ffi.Pointer<uvc_processing_unit> next;

  /// Index of the processing unit within the device
  @ffi.Uint8()
  external int bUnitID;

  /// Index of the terminal from which the device accepts images
  @ffi.Uint8()
  external int bSourceID;

  /// Processing controls (meaning of bits given in {uvc_pu_ctrl_selector})
  @ffi.Uint64()
  external int bmControls;
}

/// Represents selector unit to connect other units
final class uvc_selector_unit extends ffi.Struct {
  external ffi.Pointer<uvc_selector_unit> prev;

  external ffi.Pointer<uvc_selector_unit> next;

  /// Index of the selector unit within the device
  @ffi.Uint8()
  external int bUnitID;
}

/// Custom processing or camera-control functions
final class uvc_extension_unit extends ffi.Struct {
  external ffi.Pointer<uvc_extension_unit> prev;

  external ffi.Pointer<uvc_extension_unit> next;

  /// Index of the extension unit within the device
  @ffi.Uint8()
  external int bUnitID;

  /// GUID identifying the extension unit
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> guidExtensionCode;

  /// Bitmap of available controls (manufacturer-dependent)
  @ffi.Uint64()
  external int bmControls;
}

enum uvc_status_class {
  UVC_STATUS_CLASS_CONTROL(16),
  UVC_STATUS_CLASS_CONTROL_CAMERA(17),
  UVC_STATUS_CLASS_CONTROL_PROCESSING(18);

  final int value;
  const uvc_status_class(this.value);

  static uvc_status_class fromValue(int value) => switch (value) {
        16 => UVC_STATUS_CLASS_CONTROL,
        17 => UVC_STATUS_CLASS_CONTROL_CAMERA,
        18 => UVC_STATUS_CLASS_CONTROL_PROCESSING,
        _ => throw ArgumentError("Unknown value for uvc_status_class: $value"),
      };
}

enum uvc_status_attribute {
  UVC_STATUS_ATTRIBUTE_VALUE_CHANGE(0),
  UVC_STATUS_ATTRIBUTE_INFO_CHANGE(1),
  UVC_STATUS_ATTRIBUTE_FAILURE_CHANGE(2),
  UVC_STATUS_ATTRIBUTE_UNKNOWN(255);

  final int value;
  const uvc_status_attribute(this.value);

  static uvc_status_attribute fromValue(int value) => switch (value) {
        0 => UVC_STATUS_ATTRIBUTE_VALUE_CHANGE,
        1 => UVC_STATUS_ATTRIBUTE_INFO_CHANGE,
        2 => UVC_STATUS_ATTRIBUTE_FAILURE_CHANGE,
        255 => UVC_STATUS_ATTRIBUTE_UNKNOWN,
        _ =>
          throw ArgumentError("Unknown value for uvc_status_attribute: $value"),
      };
}

/// Structure representing a UVC device descriptor.
///
/// (This isn't a standard structure.)
final class uvc_device_descriptor extends ffi.Struct {
  /// Vendor ID
  @ffi.Uint16()
  external int idVendor;

  /// Product ID
  @ffi.Uint16()
  external int idProduct;

  /// UVC compliance level, e.g. 0x0100 (1.0), 0x0110
  @ffi.Uint16()
  external int bcdUVC;

  /// Serial number (null if unavailable)
  external ffi.Pointer<ffi.Char> serialNumber;

  /// Device-reported manufacturer name (or null)
  external ffi.Pointer<ffi.Char> manufacturer;

  /// Device-reporter product name (or null)
  external ffi.Pointer<ffi.Char> product;
}

/// An image frame received from the UVC device
/// @ingroup streaming
final class uvc_frame extends ffi.Struct {
  /// Image data for this frame
  external ffi.Pointer<ffi.Void> data;

  /// Size of image data buffer
  @ffi.Size()
  external int data_bytes;

  /// Width of image in pixels
  @ffi.Uint32()
  external int width;

  /// Height of image in pixels
  @ffi.Uint32()
  external int height;

  /// Pixel data format
  @ffi.UnsignedInt()
  external int frame_format;

  /// Number of bytes per horizontal line (undefined for compressed format)
  @ffi.Size()
  external int step;

  /// Frame number (may skip, but is strictly monotonically increasing)
  @ffi.Uint32()
  external int sequence;

  /// Estimate of system time when the device started capturing the image
  external timeval capture_time;

  /// Estimate of system time when the device finished receiving the image
  external timespec capture_time_finished;

  /// Handle on the device that produced the image.
  /// @warning You must not call any uvc_* functions during a callback.
  external ffi.Pointer<uvc_device_handle_t> source;

  /// Is the data buffer owned by the library?
  /// If 1, the data buffer can be arbitrarily reallocated by frame conversion
  /// functions.
  /// If 0, the data buffer will not be reallocated or freed by the library.
  /// Set this field to zero if you are supplying the buffer.
  @ffi.Uint8()
  external int library_owns_data;

  /// Metadata for this frame if available
  external ffi.Pointer<ffi.Void> metadata;

  /// Size of metadata buffer
  @ffi.Size()
  external int metadata_bytes;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;
typedef uvc_device_handle_t = uvc_device_handle;

/// Streaming mode, includes all information needed to select stream
/// @ingroup streaming
final class uvc_stream_ctrl extends ffi.Struct {
  @ffi.Uint16()
  external int bmHint;

  @ffi.Uint8()
  external int bFormatIndex;

  @ffi.Uint8()
  external int bFrameIndex;

  @ffi.Uint32()
  external int dwFrameInterval;

  @ffi.Uint16()
  external int wKeyFrameRate;

  @ffi.Uint16()
  external int wPFrameRate;

  @ffi.Uint16()
  external int wCompQuality;

  @ffi.Uint16()
  external int wCompWindowSize;

  @ffi.Uint16()
  external int wDelay;

  @ffi.Uint32()
  external int dwMaxVideoFrameSize;

  @ffi.Uint32()
  external int dwMaxPayloadTransferSize;

  @ffi.Uint32()
  external int dwClockFrequency;

  @ffi.Uint8()
  external int bmFramingInfo;

  @ffi.Uint8()
  external int bPreferredVersion;

  @ffi.Uint8()
  external int bMinVersion;

  @ffi.Uint8()
  external int bMaxVersion;

  @ffi.Uint8()
  external int bInterfaceNumber;
}

final class uvc_still_ctrl extends ffi.Struct {
  /// Video format index from a format descriptor
  @ffi.Uint8()
  external int bFormatIndex;

  /// Video frame index from a frame descriptor
  @ffi.Uint8()
  external int bFrameIndex;

  /// Compression index from a frame descriptor
  @ffi.Uint8()
  external int bCompressionIndex;

  /// Maximum still image size in bytes.
  @ffi.Uint32()
  external int dwMaxVideoFrameSize;

  /// Maximum number of byte per payload
  @ffi.Uint32()
  external int dwMaxPayloadTransferSize;

  @ffi.Uint8()
  external int bInterfaceNumber;
}

typedef uvc_context_t = uvc_context;
typedef uvc_device_t = uvc_device;

/// Structure representing a UVC device descriptor.
///
/// (This isn't a standard structure.)
typedef uvc_device_descriptor_t = uvc_device_descriptor;

/// A callback function to accept status updates
/// @ingroup device
typedef uvc_status_callback_t = ffi.NativeFunction<
    ffi.Void Function(
        ffi.UnsignedInt status_class,
        ffi.Int event,
        ffi.Int selector,
        ffi.UnsignedInt status_attribute,
        ffi.Pointer<ffi.Void> data,
        ffi.Size data_len,
        ffi.Pointer<ffi.Void> user_ptr)>;

/// A callback function to accept button events
/// @ingroup device
typedef uvc_button_callback_t = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Int button, ffi.Int state, ffi.Pointer<ffi.Void> user_ptr)>;

/// Representation of the interface that brings data into the UVC device
typedef uvc_input_terminal_t = uvc_input_terminal;
typedef uvc_output_terminal_t = uvc_output_terminal;

/// Represents selector unit to connect other units
typedef uvc_selector_unit_t = uvc_selector_unit;

/// Represents post-capture processing functions
typedef uvc_processing_unit_t = uvc_processing_unit;

/// Custom processing or camera-control functions
typedef uvc_extension_unit_t = uvc_extension_unit;

/// Streaming mode, includes all information needed to select stream
/// @ingroup streaming
typedef uvc_stream_ctrl_t = uvc_stream_ctrl;
typedef uvc_still_ctrl_t = uvc_still_ctrl;

/// Format descriptor
///
/// A "format" determines a stream's image type (e.g., raw YUYV or JPEG)
/// and includes many "frame" configurations.
typedef uvc_format_desc_t = uvc_format_desc;

/// A callback function to handle incoming assembled UVC frames
/// @ingroup streaming
typedef uvc_frame_callback_t = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<uvc_frame> frame, ffi.Pointer<ffi.Void> user_ptr)>;
typedef uvc_stream_handle_t = uvc_stream_handle;

/// An image frame received from the UVC device
/// @ingroup streaming
typedef uvc_frame_t = uvc_frame;
typedef FILE = _IO_FILE;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

const int LIBUVC_VERSION_MAJOR = 0;

const int LIBUVC_VERSION_MINOR = 0;

const int LIBUVC_VERSION_PATCH = 7;

const String LIBUVC_VERSION_STR = '0.0.7';

const int LIBUVC_VERSION_INT = 7;

const int LIBUVC_HAS_JPEG = 1;

const int UVC_COLOR_FORMAT_UNKNOWN = 0;

const int UVC_COLOR_FORMAT_UNCOMPRESSED = 1;

const int UVC_COLOR_FORMAT_COMPRESSED = 2;

const int UVC_COLOR_FORMAT_YUYV = 3;

const int UVC_COLOR_FORMAT_UYVY = 4;

const int UVC_COLOR_FORMAT_RGB = 5;

const int UVC_COLOR_FORMAT_BGR = 6;

const int UVC_COLOR_FORMAT_MJPEG = 7;

const int UVC_COLOR_FORMAT_GRAY8 = 9;

const int UVC_COLOR_FORMAT_GRAY16 = 10;

const int UVC_COLOR_FORMAT_NV12 = 17;
