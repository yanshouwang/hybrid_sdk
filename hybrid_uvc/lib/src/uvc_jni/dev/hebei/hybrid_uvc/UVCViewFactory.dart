// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'UVCView.dart' as uvcview_;

/// from: `dev.hebei.hybrid_uvc.UVCViewFactory`
class UVCViewFactory extends jni.JObject {
  @override
  late final jni.JObjType<UVCViewFactory> $type = type;

  UVCViewFactory.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'dev/hebei/hybrid_uvc/UVCViewFactory');

  /// The type which includes information such as the signature of this class.
  static const type = $UVCViewFactoryType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Ldev/hebei/hybrid_uvc/UVCViewFactory;',
  );

  /// from: `static public final dev.hebei.hybrid_uvc.UVCViewFactory INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static UVCViewFactory get INSTANCE =>
      _id_INSTANCE.get(_class, const $UVCViewFactoryType());

  static final _id_create = _class.instanceMethodId(
    r'create',
    r'(Landroid/content/Context;ILjava/lang/Object;)Lio/flutter/plugin/platform/PlatformView;',
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: `public io.flutter.plugin.platform.PlatformView create(android.content.Context context, int i, java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject create(
    jni.JObject context,
    int i,
    jni.JObject object,
  ) {
    return _create(reference.pointer, _id_create as jni.JMethodIDPtr,
            context.reference.pointer, i, object.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_retrieve = _class.instanceMethodId(
    r'retrieve',
    r'(I)Ldev/hebei/hybrid_uvc/UVCView;',
  );

  static final _retrieve = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final dev.hebei.hybrid_uvc.UVCView retrieve(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  uvcview_.UVCView retrieve(
    int i,
  ) {
    return _retrieve(reference.pointer, _id_retrieve as jni.JMethodIDPtr, i)
        .object(const uvcview_.$UVCViewType());
  }

  static final _id_dispose = _class.instanceMethodId(
    r'dispose',
    r'(I)V',
  );

  static final _dispose = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final void dispose(int i)`
  void dispose(
    int i,
  ) {
    _dispose(reference.pointer, _id_dispose as jni.JMethodIDPtr, i).check();
  }
}

final class $UVCViewFactoryType extends jni.JObjType<UVCViewFactory> {
  const $UVCViewFactoryType();

  @override
  String get signature => r'Ldev/hebei/hybrid_uvc/UVCViewFactory;';

  @override
  UVCViewFactory fromReference(jni.JReference reference) =>
      UVCViewFactory.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UVCViewFactoryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UVCViewFactoryType) &&
        other is $UVCViewFactoryType;
  }
}
