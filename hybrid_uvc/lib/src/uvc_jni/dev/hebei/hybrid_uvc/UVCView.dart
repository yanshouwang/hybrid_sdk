// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `dev.hebei.hybrid_uvc.UVCView`
class UVCView extends jni.JObject {
  @override
  late final jni.JObjType<UVCView> $type = type;

  UVCView.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'dev/hebei/hybrid_uvc/UVCView');

  /// The type which includes information such as the signature of this class.
  static const type = $UVCViewType();
  static final _id_new0 = _class.constructorId(
    r'(ILandroid/content/Context;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(int i, android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory UVCView(
    int i,
    jni.JObject context,
  ) {
    return UVCView.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, i, context.reference.pointer)
        .reference);
  }

  static final _id_getMemory = _class.instanceMethodId(
    r'getMemory',
    r'()[B',
  );

  static final _getMemory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final byte[] getMemory()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getMemory() {
    return _getMemory(reference.pointer, _id_getMemory as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_setMemory = _class.instanceMethodId(
    r'setMemory',
    r'([B)V',
  );

  static final _setMemory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setMemory(byte[] bs)`
  void setMemory(
    jni.JArray<jni.jbyte> bs,
  ) {
    _setMemory(reference.pointer, _id_setMemory as jni.JMethodIDPtr,
            bs.reference.pointer)
        .check();
  }

  static final _id_getView = _class.instanceMethodId(
    r'getView',
    r'()Landroid/view/View;',
  );

  static final _getView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.View getView()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getView() {
    return _getView(reference.pointer, _id_getView as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_dispose = _class.instanceMethodId(
    r'dispose',
    r'()V',
  );

  static final _dispose = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void dispose()`
  void dispose() {
    _dispose(reference.pointer, _id_dispose as jni.JMethodIDPtr).check();
  }
}

final class $UVCViewType extends jni.JObjType<UVCView> {
  const $UVCViewType();

  @override
  String get signature => r'Ldev/hebei/hybrid_uvc/UVCView;';

  @override
  UVCView fromReference(jni.JReference reference) =>
      UVCView.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UVCViewType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UVCViewType) && other is $UVCViewType;
  }
}
