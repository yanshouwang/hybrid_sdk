// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `android.view.Surface$OutOfResourcesException`
class Surface_OutOfResourcesException extends jni.JObject {
  @override
  late final jni.JObjType<Surface_OutOfResourcesException> $type = type;

  Surface_OutOfResourcesException.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/view/Surface$OutOfResourcesException');

  /// The type which includes information such as the signature of this class.
  static const type = $Surface_OutOfResourcesExceptionType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Surface_OutOfResourcesException() {
    return Surface_OutOfResourcesException.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Surface_OutOfResourcesException.new1(
    jni.JString string,
  ) {
    return Surface_OutOfResourcesException.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .reference);
  }
}

final class $Surface_OutOfResourcesExceptionType
    extends jni.JObjType<Surface_OutOfResourcesException> {
  const $Surface_OutOfResourcesExceptionType();

  @override
  String get signature => r'Landroid/view/Surface$OutOfResourcesException;';

  @override
  Surface_OutOfResourcesException fromReference(jni.JReference reference) =>
      Surface_OutOfResourcesException.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Surface_OutOfResourcesExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Surface_OutOfResourcesExceptionType) &&
        other is $Surface_OutOfResourcesExceptionType;
  }
}

/// from: `android.view.Surface`
class Surface extends jni.JObject {
  @override
  late final jni.JObjType<Surface> $type = type;

  Surface.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/view/Surface');

  /// The type which includes information such as the signature of this class.
  static const type = $SurfaceType();

  /// from: `static public final int CHANGE_FRAME_RATE_ALWAYS`
  static const CHANGE_FRAME_RATE_ALWAYS = 1;

  /// from: `static public final int CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS`
  static const CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS = 0;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  /// from: `static public final int FRAME_RATE_COMPATIBILITY_DEFAULT`
  static const FRAME_RATE_COMPATIBILITY_DEFAULT = 0;

  /// from: `static public final int FRAME_RATE_COMPATIBILITY_FIXED_SOURCE`
  static const FRAME_RATE_COMPATIBILITY_FIXED_SOURCE = 1;

  /// from: `static public final int ROTATION_0`
  static const ROTATION_0 = 0;

  /// from: `static public final int ROTATION_180`
  static const ROTATION_180 = 2;

  /// from: `static public final int ROTATION_270`
  static const ROTATION_270 = 3;

  /// from: `static public final int ROTATION_90`
  static const ROTATION_90 = 1;
  static final _id_new0 = _class.constructorId(
    r'(Landroid/view/SurfaceControl;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.view.SurfaceControl surfaceControl)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Surface(
    jni.JObject surfaceControl,
  ) {
    return Surface.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, surfaceControl.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/graphics/SurfaceTexture;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.graphics.SurfaceTexture surfaceTexture)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Surface.new1(
    jni.JObject surfaceTexture,
  ) {
    return Surface.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, surfaceTexture.reference.pointer)
        .reference);
  }

  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected void finalize()`
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }

  static final _id_release1 = _class.instanceMethodId(
    r'release',
    r'()V',
  );

  static final _release1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void release()`
  void release1() {
    _release1(reference.pointer, _id_release1 as jni.JMethodIDPtr).check();
  }

  static final _id_isValid = _class.instanceMethodId(
    r'isValid',
    r'()Z',
  );

  static final _isValid = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isValid()`
  bool isValid() {
    return _isValid(reference.pointer, _id_isValid as jni.JMethodIDPtr).boolean;
  }

  static final _id_lockCanvas = _class.instanceMethodId(
    r'lockCanvas',
    r'(Landroid/graphics/Rect;)Landroid/graphics/Canvas;',
  );

  static final _lockCanvas = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public android.graphics.Canvas lockCanvas(android.graphics.Rect rect)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject lockCanvas(
    jni.JObject rect,
  ) {
    return _lockCanvas(reference.pointer, _id_lockCanvas as jni.JMethodIDPtr,
            rect.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_unlockCanvasAndPost = _class.instanceMethodId(
    r'unlockCanvasAndPost',
    r'(Landroid/graphics/Canvas;)V',
  );

  static final _unlockCanvasAndPost = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void unlockCanvasAndPost(android.graphics.Canvas canvas)`
  void unlockCanvasAndPost(
    jni.JObject canvas,
  ) {
    _unlockCanvasAndPost(
            reference.pointer,
            _id_unlockCanvasAndPost as jni.JMethodIDPtr,
            canvas.reference.pointer)
        .check();
  }

  static final _id_lockHardwareCanvas = _class.instanceMethodId(
    r'lockHardwareCanvas',
    r'()Landroid/graphics/Canvas;',
  );

  static final _lockHardwareCanvas = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Canvas lockHardwareCanvas()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject lockHardwareCanvas() {
    return _lockHardwareCanvas(
            reference.pointer, _id_lockHardwareCanvas as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_unlockCanvas = _class.instanceMethodId(
    r'unlockCanvas',
    r'(Landroid/graphics/Canvas;)V',
  );

  static final _unlockCanvas = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void unlockCanvas(android.graphics.Canvas canvas)`
  void unlockCanvas(
    jni.JObject canvas,
  ) {
    _unlockCanvas(reference.pointer, _id_unlockCanvas as jni.JMethodIDPtr,
            canvas.reference.pointer)
        .check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r'readFromParcel',
    r'(Landroid/os/Parcel;)V',
  );

  static final _readFromParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void readFromParcel(android.os.Parcel parcel)`
  void readFromParcel(
    jni.JObject parcel,
  ) {
    _readFromParcel(reference.pointer, _id_readFromParcel as jni.JMethodIDPtr,
            parcel.reference.pointer)
        .check();
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setFrameRate = _class.instanceMethodId(
    r'setFrameRate',
    r'(FII)V',
  );

  static final _setFrameRate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Double, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double, int, int)>();

  /// from: `public void setFrameRate(float f, int i, int i1)`
  void setFrameRate(
    double f,
    int i,
    int i1,
  ) {
    _setFrameRate(
            reference.pointer, _id_setFrameRate as jni.JMethodIDPtr, f, i, i1)
        .check();
  }

  static final _id_clearFrameRate = _class.instanceMethodId(
    r'clearFrameRate',
    r'()V',
  );

  static final _clearFrameRate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void clearFrameRate()`
  void clearFrameRate() {
    _clearFrameRate(reference.pointer, _id_clearFrameRate as jni.JMethodIDPtr)
        .check();
  }

  static final _id_setFrameRate1 = _class.instanceMethodId(
    r'setFrameRate',
    r'(FI)V',
  );

  static final _setFrameRate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double, int)>();

  /// from: `public void setFrameRate(float f, int i)`
  void setFrameRate1(
    double f,
    int i,
  ) {
    _setFrameRate1(
            reference.pointer, _id_setFrameRate1 as jni.JMethodIDPtr, f, i)
        .check();
  }
}

final class $SurfaceType extends jni.JObjType<Surface> {
  const $SurfaceType();

  @override
  String get signature => r'Landroid/view/Surface;';

  @override
  Surface fromReference(jni.JReference reference) =>
      Surface.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($SurfaceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($SurfaceType) && other is $SurfaceType;
  }
}
