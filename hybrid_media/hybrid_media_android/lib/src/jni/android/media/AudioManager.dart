// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `android.media.AudioManager$AudioPlaybackCallback`
class AudioManager_AudioPlaybackCallback extends jni.JObject {
  @override
  late final jni.JObjType<AudioManager_AudioPlaybackCallback> $type = type;

  AudioManager_AudioPlaybackCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/media/AudioManager$AudioPlaybackCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $AudioManager_AudioPlaybackCallbackType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioManager_AudioPlaybackCallback() {
    return AudioManager_AudioPlaybackCallback.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_onPlaybackConfigChanged = _class.instanceMethodId(
    r'onPlaybackConfigChanged',
    r'(Ljava/util/List;)V',
  );

  static final _onPlaybackConfigChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void onPlaybackConfigChanged(java.util.List list)`
  void onPlaybackConfigChanged(
    jni.JList<jni.JObject> list,
  ) {
    _onPlaybackConfigChanged(
            reference.pointer,
            _id_onPlaybackConfigChanged as jni.JMethodIDPtr,
            list.reference.pointer)
        .check();
  }
}

final class $AudioManager_AudioPlaybackCallbackType
    extends jni.JObjType<AudioManager_AudioPlaybackCallback> {
  const $AudioManager_AudioPlaybackCallbackType();

  @override
  String get signature => r'Landroid/media/AudioManager$AudioPlaybackCallback;';

  @override
  AudioManager_AudioPlaybackCallback fromReference(jni.JReference reference) =>
      AudioManager_AudioPlaybackCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AudioManager_AudioPlaybackCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioManager_AudioPlaybackCallbackType) &&
        other is $AudioManager_AudioPlaybackCallbackType;
  }
}

/// from: `android.media.AudioManager$AudioRecordingCallback`
class AudioManager_AudioRecordingCallback extends jni.JObject {
  @override
  late final jni.JObjType<AudioManager_AudioRecordingCallback> $type = type;

  AudioManager_AudioRecordingCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/media/AudioManager$AudioRecordingCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $AudioManager_AudioRecordingCallbackType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioManager_AudioRecordingCallback() {
    return AudioManager_AudioRecordingCallback.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_onRecordingConfigChanged = _class.instanceMethodId(
    r'onRecordingConfigChanged',
    r'(Ljava/util/List;)V',
  );

  static final _onRecordingConfigChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void onRecordingConfigChanged(java.util.List list)`
  void onRecordingConfigChanged(
    jni.JList<jni.JObject> list,
  ) {
    _onRecordingConfigChanged(
            reference.pointer,
            _id_onRecordingConfigChanged as jni.JMethodIDPtr,
            list.reference.pointer)
        .check();
  }
}

final class $AudioManager_AudioRecordingCallbackType
    extends jni.JObjType<AudioManager_AudioRecordingCallback> {
  const $AudioManager_AudioRecordingCallbackType();

  @override
  String get signature =>
      r'Landroid/media/AudioManager$AudioRecordingCallback;';

  @override
  AudioManager_AudioRecordingCallback fromReference(jni.JReference reference) =>
      AudioManager_AudioRecordingCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AudioManager_AudioRecordingCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioManager_AudioRecordingCallbackType) &&
        other is $AudioManager_AudioRecordingCallbackType;
  }
}

/// from: `android.media.AudioManager$OnAudioFocusChangeListener`
class AudioManager_OnAudioFocusChangeListener extends jni.JObject {
  @override
  late final jni.JObjType<AudioManager_OnAudioFocusChangeListener> $type = type;

  AudioManager_OnAudioFocusChangeListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/media/AudioManager$OnAudioFocusChangeListener');

  /// The type which includes information such as the signature of this class.
  static const type = $AudioManager_OnAudioFocusChangeListenerType();
  static final _id_onAudioFocusChange = _class.instanceMethodId(
    r'onAudioFocusChange',
    r'(I)V',
  );

  static final _onAudioFocusChange = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onAudioFocusChange(int i)`
  void onAudioFocusChange(
    int i,
  ) {
    _onAudioFocusChange(
            reference.pointer, _id_onAudioFocusChange as jni.JMethodIDPtr, i)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $AudioManager_OnAudioFocusChangeListenerImpl> _$impls =
      {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onAudioFocusChange(I)V') {
        _$impls[$p]!.onAudioFocusChange(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory AudioManager_OnAudioFocusChangeListener.implement(
    $AudioManager_OnAudioFocusChangeListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = AudioManager_OnAudioFocusChangeListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.media.AudioManager$OnAudioFocusChangeListener',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $AudioManager_OnAudioFocusChangeListenerImpl {
  factory $AudioManager_OnAudioFocusChangeListenerImpl({
    required void Function(int i) onAudioFocusChange,
  }) = _$AudioManager_OnAudioFocusChangeListenerImpl;

  void onAudioFocusChange(int i);
}

class _$AudioManager_OnAudioFocusChangeListenerImpl
    implements $AudioManager_OnAudioFocusChangeListenerImpl {
  _$AudioManager_OnAudioFocusChangeListenerImpl({
    required void Function(int i) onAudioFocusChange,
  }) : _onAudioFocusChange = onAudioFocusChange;

  final void Function(int i) _onAudioFocusChange;

  void onAudioFocusChange(int i) {
    return _onAudioFocusChange(i);
  }
}

final class $AudioManager_OnAudioFocusChangeListenerType
    extends jni.JObjType<AudioManager_OnAudioFocusChangeListener> {
  const $AudioManager_OnAudioFocusChangeListenerType();

  @override
  String get signature =>
      r'Landroid/media/AudioManager$OnAudioFocusChangeListener;';

  @override
  AudioManager_OnAudioFocusChangeListener fromReference(
          jni.JReference reference) =>
      AudioManager_OnAudioFocusChangeListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AudioManager_OnAudioFocusChangeListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AudioManager_OnAudioFocusChangeListenerType) &&
        other is $AudioManager_OnAudioFocusChangeListenerType;
  }
}

/// from: `android.media.AudioManager$OnCommunicationDeviceChangedListener`
class AudioManager_OnCommunicationDeviceChangedListener extends jni.JObject {
  @override
  late final jni.JObjType<AudioManager_OnCommunicationDeviceChangedListener>
      $type = type;

  AudioManager_OnCommunicationDeviceChangedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/media/AudioManager$OnCommunicationDeviceChangedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $AudioManager_OnCommunicationDeviceChangedListenerType();
  static final _id_onCommunicationDeviceChanged = _class.instanceMethodId(
    r'onCommunicationDeviceChanged',
    r'(Landroid/media/AudioDeviceInfo;)V',
  );

  static final _onCommunicationDeviceChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onCommunicationDeviceChanged(android.media.AudioDeviceInfo audioDeviceInfo)`
  void onCommunicationDeviceChanged(
    jni.JObject audioDeviceInfo,
  ) {
    _onCommunicationDeviceChanged(
            reference.pointer,
            _id_onCommunicationDeviceChanged as jni.JMethodIDPtr,
            audioDeviceInfo.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $AudioManager_OnCommunicationDeviceChangedListenerImpl>
      _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onCommunicationDeviceChanged(Landroid/media/AudioDeviceInfo;)V') {
        _$impls[$p]!.onCommunicationDeviceChanged(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory AudioManager_OnCommunicationDeviceChangedListener.implement(
    $AudioManager_OnCommunicationDeviceChangedListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = AudioManager_OnCommunicationDeviceChangedListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.media.AudioManager$OnCommunicationDeviceChangedListener',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $AudioManager_OnCommunicationDeviceChangedListenerImpl {
  factory $AudioManager_OnCommunicationDeviceChangedListenerImpl({
    required void Function(jni.JObject audioDeviceInfo)
        onCommunicationDeviceChanged,
  }) = _$AudioManager_OnCommunicationDeviceChangedListenerImpl;

  void onCommunicationDeviceChanged(jni.JObject audioDeviceInfo);
}

class _$AudioManager_OnCommunicationDeviceChangedListenerImpl
    implements $AudioManager_OnCommunicationDeviceChangedListenerImpl {
  _$AudioManager_OnCommunicationDeviceChangedListenerImpl({
    required void Function(jni.JObject audioDeviceInfo)
        onCommunicationDeviceChanged,
  }) : _onCommunicationDeviceChanged = onCommunicationDeviceChanged;

  final void Function(jni.JObject audioDeviceInfo)
      _onCommunicationDeviceChanged;

  void onCommunicationDeviceChanged(jni.JObject audioDeviceInfo) {
    return _onCommunicationDeviceChanged(audioDeviceInfo);
  }
}

final class $AudioManager_OnCommunicationDeviceChangedListenerType
    extends jni.JObjType<AudioManager_OnCommunicationDeviceChangedListener> {
  const $AudioManager_OnCommunicationDeviceChangedListenerType();

  @override
  String get signature =>
      r'Landroid/media/AudioManager$OnCommunicationDeviceChangedListener;';

  @override
  AudioManager_OnCommunicationDeviceChangedListener fromReference(
          jni.JReference reference) =>
      AudioManager_OnCommunicationDeviceChangedListener.fromReference(
          reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($AudioManager_OnCommunicationDeviceChangedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AudioManager_OnCommunicationDeviceChangedListenerType) &&
        other is $AudioManager_OnCommunicationDeviceChangedListenerType;
  }
}

/// from: `android.media.AudioManager$OnModeChangedListener`
class AudioManager_OnModeChangedListener extends jni.JObject {
  @override
  late final jni.JObjType<AudioManager_OnModeChangedListener> $type = type;

  AudioManager_OnModeChangedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/media/AudioManager$OnModeChangedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $AudioManager_OnModeChangedListenerType();
  static final _id_onModeChanged = _class.instanceMethodId(
    r'onModeChanged',
    r'(I)V',
  );

  static final _onModeChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onModeChanged(int i)`
  void onModeChanged(
    int i,
  ) {
    _onModeChanged(reference.pointer, _id_onModeChanged as jni.JMethodIDPtr, i)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $AudioManager_OnModeChangedListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onModeChanged(I)V') {
        _$impls[$p]!.onModeChanged(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory AudioManager_OnModeChangedListener.implement(
    $AudioManager_OnModeChangedListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = AudioManager_OnModeChangedListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.media.AudioManager$OnModeChangedListener',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $AudioManager_OnModeChangedListenerImpl {
  factory $AudioManager_OnModeChangedListenerImpl({
    required void Function(int i) onModeChanged,
  }) = _$AudioManager_OnModeChangedListenerImpl;

  void onModeChanged(int i);
}

class _$AudioManager_OnModeChangedListenerImpl
    implements $AudioManager_OnModeChangedListenerImpl {
  _$AudioManager_OnModeChangedListenerImpl({
    required void Function(int i) onModeChanged,
  }) : _onModeChanged = onModeChanged;

  final void Function(int i) _onModeChanged;

  void onModeChanged(int i) {
    return _onModeChanged(i);
  }
}

final class $AudioManager_OnModeChangedListenerType
    extends jni.JObjType<AudioManager_OnModeChangedListener> {
  const $AudioManager_OnModeChangedListenerType();

  @override
  String get signature => r'Landroid/media/AudioManager$OnModeChangedListener;';

  @override
  AudioManager_OnModeChangedListener fromReference(jni.JReference reference) =>
      AudioManager_OnModeChangedListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AudioManager_OnModeChangedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioManager_OnModeChangedListenerType) &&
        other is $AudioManager_OnModeChangedListenerType;
  }
}

/// from: `android.media.AudioManager$OnPreferredMixerAttributesChangedListener`
class AudioManager_OnPreferredMixerAttributesChangedListener
    extends jni.JObject {
  @override
  late final jni
      .JObjType<AudioManager_OnPreferredMixerAttributesChangedListener> $type =
      type;

  AudioManager_OnPreferredMixerAttributesChangedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/media/AudioManager$OnPreferredMixerAttributesChangedListener');

  /// The type which includes information such as the signature of this class.
  static const type =
      $AudioManager_OnPreferredMixerAttributesChangedListenerType();
  static final _id_onPreferredMixerAttributesChanged = _class.instanceMethodId(
    r'onPreferredMixerAttributesChanged',
    r'(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;Landroid/media/AudioMixerAttributes;)V',
  );

  static final _onPreferredMixerAttributesChanged =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onPreferredMixerAttributesChanged(android.media.AudioAttributes audioAttributes, android.media.AudioDeviceInfo audioDeviceInfo, android.media.AudioMixerAttributes audioMixerAttributes)`
  void onPreferredMixerAttributesChanged(
    jni.JObject audioAttributes,
    jni.JObject audioDeviceInfo,
    jni.JObject audioMixerAttributes,
  ) {
    _onPreferredMixerAttributesChanged(
            reference.pointer,
            _id_onPreferredMixerAttributesChanged as jni.JMethodIDPtr,
            audioAttributes.reference.pointer,
            audioDeviceInfo.reference.pointer,
            audioMixerAttributes.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int,
      $AudioManager_OnPreferredMixerAttributesChangedListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onPreferredMixerAttributesChanged(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;Landroid/media/AudioMixerAttributes;)V') {
        _$impls[$p]!.onPreferredMixerAttributesChanged(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory AudioManager_OnPreferredMixerAttributesChangedListener.implement(
    $AudioManager_OnPreferredMixerAttributesChangedListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x =
        AudioManager_OnPreferredMixerAttributesChangedListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.media.AudioManager$OnPreferredMixerAttributesChangedListener',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $AudioManager_OnPreferredMixerAttributesChangedListenerImpl {
  factory $AudioManager_OnPreferredMixerAttributesChangedListenerImpl({
    required void Function(jni.JObject audioAttributes,
            jni.JObject audioDeviceInfo, jni.JObject audioMixerAttributes)
        onPreferredMixerAttributesChanged,
  }) = _$AudioManager_OnPreferredMixerAttributesChangedListenerImpl;

  void onPreferredMixerAttributesChanged(jni.JObject audioAttributes,
      jni.JObject audioDeviceInfo, jni.JObject audioMixerAttributes);
}

class _$AudioManager_OnPreferredMixerAttributesChangedListenerImpl
    implements $AudioManager_OnPreferredMixerAttributesChangedListenerImpl {
  _$AudioManager_OnPreferredMixerAttributesChangedListenerImpl({
    required void Function(jni.JObject audioAttributes,
            jni.JObject audioDeviceInfo, jni.JObject audioMixerAttributes)
        onPreferredMixerAttributesChanged,
  }) : _onPreferredMixerAttributesChanged = onPreferredMixerAttributesChanged;

  final void Function(jni.JObject audioAttributes, jni.JObject audioDeviceInfo,
      jni.JObject audioMixerAttributes) _onPreferredMixerAttributesChanged;

  void onPreferredMixerAttributesChanged(jni.JObject audioAttributes,
      jni.JObject audioDeviceInfo, jni.JObject audioMixerAttributes) {
    return _onPreferredMixerAttributesChanged(
        audioAttributes, audioDeviceInfo, audioMixerAttributes);
  }
}

final class $AudioManager_OnPreferredMixerAttributesChangedListenerType
    extends jni
    .JObjType<AudioManager_OnPreferredMixerAttributesChangedListener> {
  const $AudioManager_OnPreferredMixerAttributesChangedListenerType();

  @override
  String get signature =>
      r'Landroid/media/AudioManager$OnPreferredMixerAttributesChangedListener;';

  @override
  AudioManager_OnPreferredMixerAttributesChangedListener fromReference(
          jni.JReference reference) =>
      AudioManager_OnPreferredMixerAttributesChangedListener.fromReference(
          reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($AudioManager_OnPreferredMixerAttributesChangedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AudioManager_OnPreferredMixerAttributesChangedListenerType) &&
        other is $AudioManager_OnPreferredMixerAttributesChangedListenerType;
  }
}

/// from: `android.media.AudioManager`
class AudioManager extends jni.JObject {
  @override
  late final jni.JObjType<AudioManager> $type = type;

  AudioManager.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/media/AudioManager');

  /// The type which includes information such as the signature of this class.
  static const type = $AudioManagerType();
  static final _id_ACTION_AUDIO_BECOMING_NOISY = _class.staticFieldId(
    r'ACTION_AUDIO_BECOMING_NOISY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_AUDIO_BECOMING_NOISY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_AUDIO_BECOMING_NOISY =>
      _id_ACTION_AUDIO_BECOMING_NOISY.get(_class, const jni.JStringType());

  static final _id_ACTION_HDMI_AUDIO_PLUG = _class.staticFieldId(
    r'ACTION_HDMI_AUDIO_PLUG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_HDMI_AUDIO_PLUG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_HDMI_AUDIO_PLUG =>
      _id_ACTION_HDMI_AUDIO_PLUG.get(_class, const jni.JStringType());

  static final _id_ACTION_HEADSET_PLUG = _class.staticFieldId(
    r'ACTION_HEADSET_PLUG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_HEADSET_PLUG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_HEADSET_PLUG =>
      _id_ACTION_HEADSET_PLUG.get(_class, const jni.JStringType());

  static final _id_ACTION_MICROPHONE_MUTE_CHANGED = _class.staticFieldId(
    r'ACTION_MICROPHONE_MUTE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MICROPHONE_MUTE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MICROPHONE_MUTE_CHANGED =>
      _id_ACTION_MICROPHONE_MUTE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_SCO_AUDIO_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_SCO_AUDIO_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCO_AUDIO_STATE_CHANGED =>
      _id_ACTION_SCO_AUDIO_STATE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_SCO_AUDIO_STATE_UPDATED = _class.staticFieldId(
    r'ACTION_SCO_AUDIO_STATE_UPDATED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCO_AUDIO_STATE_UPDATED =>
      _id_ACTION_SCO_AUDIO_STATE_UPDATED.get(_class, const jni.JStringType());

  static final _id_ACTION_SPEAKERPHONE_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_SPEAKERPHONE_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SPEAKERPHONE_STATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SPEAKERPHONE_STATE_CHANGED =>
      _id_ACTION_SPEAKERPHONE_STATE_CHANGED.get(
          _class, const jni.JStringType());

  /// from: `static public final int ADJUST_LOWER`
  static const ADJUST_LOWER = -1;

  /// from: `static public final int ADJUST_MUTE`
  static const ADJUST_MUTE = -100;

  /// from: `static public final int ADJUST_RAISE`
  static const ADJUST_RAISE = 1;

  /// from: `static public final int ADJUST_SAME`
  static const ADJUST_SAME = 0;

  /// from: `static public final int ADJUST_TOGGLE_MUTE`
  static const ADJUST_TOGGLE_MUTE = 101;

  /// from: `static public final int ADJUST_UNMUTE`
  static const ADJUST_UNMUTE = 100;

  /// from: `static public final int AUDIOFOCUS_GAIN`
  static const AUDIOFOCUS_GAIN = 1;

  /// from: `static public final int AUDIOFOCUS_GAIN_TRANSIENT`
  static const AUDIOFOCUS_GAIN_TRANSIENT = 2;

  /// from: `static public final int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE`
  static const AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE = 4;

  /// from: `static public final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK`
  static const AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK = 3;

  /// from: `static public final int AUDIOFOCUS_LOSS`
  static const AUDIOFOCUS_LOSS = -1;

  /// from: `static public final int AUDIOFOCUS_LOSS_TRANSIENT`
  static const AUDIOFOCUS_LOSS_TRANSIENT = -2;

  /// from: `static public final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK`
  static const AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK = -3;

  /// from: `static public final int AUDIOFOCUS_NONE`
  static const AUDIOFOCUS_NONE = 0;

  /// from: `static public final int AUDIOFOCUS_REQUEST_DELAYED`
  static const AUDIOFOCUS_REQUEST_DELAYED = 2;

  /// from: `static public final int AUDIOFOCUS_REQUEST_FAILED`
  static const AUDIOFOCUS_REQUEST_FAILED = 0;

  /// from: `static public final int AUDIOFOCUS_REQUEST_GRANTED`
  static const AUDIOFOCUS_REQUEST_GRANTED = 1;

  /// from: `static public final int AUDIO_SESSION_ID_GENERATE`
  static const AUDIO_SESSION_ID_GENERATE = 0;

  /// from: `static public final int DIRECT_PLAYBACK_BITSTREAM_SUPPORTED`
  static const DIRECT_PLAYBACK_BITSTREAM_SUPPORTED = 4;

  /// from: `static public final int DIRECT_PLAYBACK_NOT_SUPPORTED`
  static const DIRECT_PLAYBACK_NOT_SUPPORTED = 0;

  /// from: `static public final int DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED`
  static const DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED = 3;

  /// from: `static public final int DIRECT_PLAYBACK_OFFLOAD_SUPPORTED`
  static const DIRECT_PLAYBACK_OFFLOAD_SUPPORTED = 1;

  /// from: `static public final int ENCODED_SURROUND_OUTPUT_ALWAYS`
  static const ENCODED_SURROUND_OUTPUT_ALWAYS = 2;

  /// from: `static public final int ENCODED_SURROUND_OUTPUT_AUTO`
  static const ENCODED_SURROUND_OUTPUT_AUTO = 0;

  /// from: `static public final int ENCODED_SURROUND_OUTPUT_MANUAL`
  static const ENCODED_SURROUND_OUTPUT_MANUAL = 3;

  /// from: `static public final int ENCODED_SURROUND_OUTPUT_NEVER`
  static const ENCODED_SURROUND_OUTPUT_NEVER = 1;

  /// from: `static public final int ENCODED_SURROUND_OUTPUT_UNKNOWN`
  static const ENCODED_SURROUND_OUTPUT_UNKNOWN = -1;

  /// from: `static public final int ERROR`
  static const ERROR = -1;

  /// from: `static public final int ERROR_DEAD_OBJECT`
  static const ERROR_DEAD_OBJECT = -6;
  static final _id_EXTRA_AUDIO_PLUG_STATE = _class.staticFieldId(
    r'EXTRA_AUDIO_PLUG_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_AUDIO_PLUG_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_AUDIO_PLUG_STATE =>
      _id_EXTRA_AUDIO_PLUG_STATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ENCODINGS = _class.staticFieldId(
    r'EXTRA_ENCODINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ENCODINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ENCODINGS =>
      _id_EXTRA_ENCODINGS.get(_class, const jni.JStringType());

  static final _id_EXTRA_MAX_CHANNEL_COUNT = _class.staticFieldId(
    r'EXTRA_MAX_CHANNEL_COUNT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_MAX_CHANNEL_COUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MAX_CHANNEL_COUNT =>
      _id_EXTRA_MAX_CHANNEL_COUNT.get(_class, const jni.JStringType());

  static final _id_EXTRA_RINGER_MODE = _class.staticFieldId(
    r'EXTRA_RINGER_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RINGER_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RINGER_MODE =>
      _id_EXTRA_RINGER_MODE.get(_class, const jni.JStringType());

  static final _id_EXTRA_SCO_AUDIO_PREVIOUS_STATE = _class.staticFieldId(
    r'EXTRA_SCO_AUDIO_PREVIOUS_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SCO_AUDIO_PREVIOUS_STATE =>
      _id_EXTRA_SCO_AUDIO_PREVIOUS_STATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_SCO_AUDIO_STATE = _class.staticFieldId(
    r'EXTRA_SCO_AUDIO_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SCO_AUDIO_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SCO_AUDIO_STATE =>
      _id_EXTRA_SCO_AUDIO_STATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_VIBRATE_SETTING = _class.staticFieldId(
    r'EXTRA_VIBRATE_SETTING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_VIBRATE_SETTING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_VIBRATE_SETTING =>
      _id_EXTRA_VIBRATE_SETTING.get(_class, const jni.JStringType());

  static final _id_EXTRA_VIBRATE_TYPE = _class.staticFieldId(
    r'EXTRA_VIBRATE_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_VIBRATE_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_VIBRATE_TYPE =>
      _id_EXTRA_VIBRATE_TYPE.get(_class, const jni.JStringType());

  /// from: `static public final int FLAG_ALLOW_RINGER_MODES`
  static const FLAG_ALLOW_RINGER_MODES = 2;

  /// from: `static public final int FLAG_PLAY_SOUND`
  static const FLAG_PLAY_SOUND = 4;

  /// from: `static public final int FLAG_REMOVE_SOUND_AND_VIBRATE`
  static const FLAG_REMOVE_SOUND_AND_VIBRATE = 8;

  /// from: `static public final int FLAG_SHOW_UI`
  static const FLAG_SHOW_UI = 1;

  /// from: `static public final int FLAG_VIBRATE`
  static const FLAG_VIBRATE = 16;

  /// from: `static public final int FX_BACK`
  static const FX_BACK = 10;

  /// from: `static public final int FX_FOCUS_NAVIGATION_DOWN`
  static const FX_FOCUS_NAVIGATION_DOWN = 2;

  /// from: `static public final int FX_FOCUS_NAVIGATION_LEFT`
  static const FX_FOCUS_NAVIGATION_LEFT = 3;

  /// from: `static public final int FX_FOCUS_NAVIGATION_RIGHT`
  static const FX_FOCUS_NAVIGATION_RIGHT = 4;

  /// from: `static public final int FX_FOCUS_NAVIGATION_UP`
  static const FX_FOCUS_NAVIGATION_UP = 1;

  /// from: `static public final int FX_KEYPRESS_DELETE`
  static const FX_KEYPRESS_DELETE = 7;

  /// from: `static public final int FX_KEYPRESS_INVALID`
  static const FX_KEYPRESS_INVALID = 9;

  /// from: `static public final int FX_KEYPRESS_RETURN`
  static const FX_KEYPRESS_RETURN = 8;

  /// from: `static public final int FX_KEYPRESS_SPACEBAR`
  static const FX_KEYPRESS_SPACEBAR = 6;

  /// from: `static public final int FX_KEYPRESS_STANDARD`
  static const FX_KEYPRESS_STANDARD = 5;

  /// from: `static public final int FX_KEY_CLICK`
  static const FX_KEY_CLICK = 0;

  /// from: `static public final int GET_DEVICES_ALL`
  static const GET_DEVICES_ALL = 3;

  /// from: `static public final int GET_DEVICES_INPUTS`
  static const GET_DEVICES_INPUTS = 1;

  /// from: `static public final int GET_DEVICES_OUTPUTS`
  static const GET_DEVICES_OUTPUTS = 2;

  /// from: `static public final int MODE_CALL_REDIRECT`
  static const MODE_CALL_REDIRECT = 5;

  /// from: `static public final int MODE_CALL_SCREENING`
  static const MODE_CALL_SCREENING = 4;

  /// from: `static public final int MODE_COMMUNICATION_REDIRECT`
  static const MODE_COMMUNICATION_REDIRECT = 6;

  /// from: `static public final int MODE_CURRENT`
  static const MODE_CURRENT = -1;

  /// from: `static public final int MODE_INVALID`
  static const MODE_INVALID = -2;

  /// from: `static public final int MODE_IN_CALL`
  static const MODE_IN_CALL = 2;

  /// from: `static public final int MODE_IN_COMMUNICATION`
  static const MODE_IN_COMMUNICATION = 3;

  /// from: `static public final int MODE_NORMAL`
  static const MODE_NORMAL = 0;

  /// from: `static public final int MODE_RINGTONE`
  static const MODE_RINGTONE = 1;

  /// from: `static public final int NUM_STREAMS`
  static const NUM_STREAMS = 5;

  /// from: `static public final int PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED`
  static const PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED = 2;

  /// from: `static public final int PLAYBACK_OFFLOAD_NOT_SUPPORTED`
  static const PLAYBACK_OFFLOAD_NOT_SUPPORTED = 0;

  /// from: `static public final int PLAYBACK_OFFLOAD_SUPPORTED`
  static const PLAYBACK_OFFLOAD_SUPPORTED = 1;
  static final _id_PROPERTY_OUTPUT_FRAMES_PER_BUFFER = _class.staticFieldId(
    r'PROPERTY_OUTPUT_FRAMES_PER_BUFFER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_OUTPUT_FRAMES_PER_BUFFER =>
      _id_PROPERTY_OUTPUT_FRAMES_PER_BUFFER.get(
          _class, const jni.JStringType());

  static final _id_PROPERTY_OUTPUT_SAMPLE_RATE = _class.staticFieldId(
    r'PROPERTY_OUTPUT_SAMPLE_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_OUTPUT_SAMPLE_RATE =>
      _id_PROPERTY_OUTPUT_SAMPLE_RATE.get(_class, const jni.JStringType());

  static final _id_PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED =
      _class.staticFieldId(
    r'PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED =>
      _id_PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED.get(
          _class, const jni.JStringType());

  static final _id_PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND = _class.staticFieldId(
    r'PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND =>
      _id_PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND.get(
          _class, const jni.JStringType());

  static final _id_PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND =
      _class.staticFieldId(
    r'PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND =>
      _id_PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND.get(
          _class, const jni.JStringType());

  static final _id_RINGER_MODE_CHANGED_ACTION = _class.staticFieldId(
    r'RINGER_MODE_CHANGED_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RINGER_MODE_CHANGED_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RINGER_MODE_CHANGED_ACTION =>
      _id_RINGER_MODE_CHANGED_ACTION.get(_class, const jni.JStringType());

  /// from: `static public final int RINGER_MODE_NORMAL`
  static const RINGER_MODE_NORMAL = 2;

  /// from: `static public final int RINGER_MODE_SILENT`
  static const RINGER_MODE_SILENT = 0;

  /// from: `static public final int RINGER_MODE_VIBRATE`
  static const RINGER_MODE_VIBRATE = 1;

  /// from: `static public final int ROUTE_ALL`
  static const ROUTE_ALL = -1;

  /// from: `static public final int ROUTE_BLUETOOTH`
  static const ROUTE_BLUETOOTH = 4;

  /// from: `static public final int ROUTE_BLUETOOTH_A2DP`
  static const ROUTE_BLUETOOTH_A2DP = 16;

  /// from: `static public final int ROUTE_BLUETOOTH_SCO`
  static const ROUTE_BLUETOOTH_SCO = 4;

  /// from: `static public final int ROUTE_EARPIECE`
  static const ROUTE_EARPIECE = 1;

  /// from: `static public final int ROUTE_HEADSET`
  static const ROUTE_HEADSET = 8;

  /// from: `static public final int ROUTE_SPEAKER`
  static const ROUTE_SPEAKER = 2;

  /// from: `static public final int SCO_AUDIO_STATE_CONNECTED`
  static const SCO_AUDIO_STATE_CONNECTED = 1;

  /// from: `static public final int SCO_AUDIO_STATE_CONNECTING`
  static const SCO_AUDIO_STATE_CONNECTING = 2;

  /// from: `static public final int SCO_AUDIO_STATE_DISCONNECTED`
  static const SCO_AUDIO_STATE_DISCONNECTED = 0;

  /// from: `static public final int SCO_AUDIO_STATE_ERROR`
  static const SCO_AUDIO_STATE_ERROR = -1;

  /// from: `static public final int STREAM_ACCESSIBILITY`
  static const STREAM_ACCESSIBILITY = 10;

  /// from: `static public final int STREAM_ALARM`
  static const STREAM_ALARM = 4;

  /// from: `static public final int STREAM_DTMF`
  static const STREAM_DTMF = 8;

  /// from: `static public final int STREAM_MUSIC`
  static const STREAM_MUSIC = 3;

  /// from: `static public final int STREAM_NOTIFICATION`
  static const STREAM_NOTIFICATION = 5;

  /// from: `static public final int STREAM_RING`
  static const STREAM_RING = 2;

  /// from: `static public final int STREAM_SYSTEM`
  static const STREAM_SYSTEM = 1;

  /// from: `static public final int STREAM_VOICE_CALL`
  static const STREAM_VOICE_CALL = 0;

  /// from: `static public final int USE_DEFAULT_STREAM_TYPE`
  static const USE_DEFAULT_STREAM_TYPE = -2147483648;
  static final _id_VIBRATE_SETTING_CHANGED_ACTION = _class.staticFieldId(
    r'VIBRATE_SETTING_CHANGED_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATE_SETTING_CHANGED_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATE_SETTING_CHANGED_ACTION =>
      _id_VIBRATE_SETTING_CHANGED_ACTION.get(_class, const jni.JStringType());

  /// from: `static public final int VIBRATE_SETTING_OFF`
  static const VIBRATE_SETTING_OFF = 0;

  /// from: `static public final int VIBRATE_SETTING_ON`
  static const VIBRATE_SETTING_ON = 1;

  /// from: `static public final int VIBRATE_SETTING_ONLY_SILENT`
  static const VIBRATE_SETTING_ONLY_SILENT = 2;

  /// from: `static public final int VIBRATE_TYPE_NOTIFICATION`
  static const VIBRATE_TYPE_NOTIFICATION = 1;

  /// from: `static public final int VIBRATE_TYPE_RINGER`
  static const VIBRATE_TYPE_RINGER = 0;
  static final _id_dispatchMediaKeyEvent = _class.instanceMethodId(
    r'dispatchMediaKeyEvent',
    r'(Landroid/view/KeyEvent;)V',
  );

  static final _dispatchMediaKeyEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void dispatchMediaKeyEvent(android.view.KeyEvent keyEvent)`
  void dispatchMediaKeyEvent(
    jni.JObject keyEvent,
  ) {
    _dispatchMediaKeyEvent(
            reference.pointer,
            _id_dispatchMediaKeyEvent as jni.JMethodIDPtr,
            keyEvent.reference.pointer)
        .check();
  }

  static final _id_isVolumeFixed = _class.instanceMethodId(
    r'isVolumeFixed',
    r'()Z',
  );

  static final _isVolumeFixed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isVolumeFixed()`
  bool isVolumeFixed() {
    return _isVolumeFixed(
            reference.pointer, _id_isVolumeFixed as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_adjustStreamVolume = _class.instanceMethodId(
    r'adjustStreamVolume',
    r'(III)V',
  );

  static final _adjustStreamVolume = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: `public void adjustStreamVolume(int i, int i1, int i2)`
  void adjustStreamVolume(
    int i,
    int i1,
    int i2,
  ) {
    _adjustStreamVolume(reference.pointer,
            _id_adjustStreamVolume as jni.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_adjustVolume = _class.instanceMethodId(
    r'adjustVolume',
    r'(II)V',
  );

  static final _adjustVolume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: `public void adjustVolume(int i, int i1)`
  void adjustVolume(
    int i,
    int i1,
  ) {
    _adjustVolume(
            reference.pointer, _id_adjustVolume as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_adjustSuggestedStreamVolume = _class.instanceMethodId(
    r'adjustSuggestedStreamVolume',
    r'(III)V',
  );

  static final _adjustSuggestedStreamVolume = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: `public void adjustSuggestedStreamVolume(int i, int i1, int i2)`
  void adjustSuggestedStreamVolume(
    int i,
    int i1,
    int i2,
  ) {
    _adjustSuggestedStreamVolume(reference.pointer,
            _id_adjustSuggestedStreamVolume as jni.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_getRingerMode = _class.instanceMethodId(
    r'getRingerMode',
    r'()I',
  );

  static final _getRingerMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getRingerMode()`
  int getRingerMode() {
    return _getRingerMode(
            reference.pointer, _id_getRingerMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isRampingRingerEnabled = _class.instanceMethodId(
    r'isRampingRingerEnabled',
    r'()Z',
  );

  static final _isRampingRingerEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isRampingRingerEnabled()`
  bool isRampingRingerEnabled() {
    return _isRampingRingerEnabled(
            reference.pointer, _id_isRampingRingerEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getStreamMaxVolume = _class.instanceMethodId(
    r'getStreamMaxVolume',
    r'(I)I',
  );

  static final _getStreamMaxVolume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public int getStreamMaxVolume(int i)`
  int getStreamMaxVolume(
    int i,
  ) {
    return _getStreamMaxVolume(
            reference.pointer, _id_getStreamMaxVolume as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getStreamMinVolume = _class.instanceMethodId(
    r'getStreamMinVolume',
    r'(I)I',
  );

  static final _getStreamMinVolume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public int getStreamMinVolume(int i)`
  int getStreamMinVolume(
    int i,
  ) {
    return _getStreamMinVolume(
            reference.pointer, _id_getStreamMinVolume as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getStreamVolume = _class.instanceMethodId(
    r'getStreamVolume',
    r'(I)I',
  );

  static final _getStreamVolume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public int getStreamVolume(int i)`
  int getStreamVolume(
    int i,
  ) {
    return _getStreamVolume(
            reference.pointer, _id_getStreamVolume as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getStreamVolumeDb = _class.instanceMethodId(
    r'getStreamVolumeDb',
    r'(III)F',
  );

  static final _getStreamVolumeDb = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: `public float getStreamVolumeDb(int i, int i1, int i2)`
  double getStreamVolumeDb(
    int i,
    int i1,
    int i2,
  ) {
    return _getStreamVolumeDb(reference.pointer,
            _id_getStreamVolumeDb as jni.JMethodIDPtr, i, i1, i2)
        .float;
  }

  static final _id_setRingerMode = _class.instanceMethodId(
    r'setRingerMode',
    r'(I)V',
  );

  static final _setRingerMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setRingerMode(int i)`
  void setRingerMode(
    int i,
  ) {
    _setRingerMode(reference.pointer, _id_setRingerMode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setStreamVolume = _class.instanceMethodId(
    r'setStreamVolume',
    r'(III)V',
  );

  static final _setStreamVolume = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: `public void setStreamVolume(int i, int i1, int i2)`
  void setStreamVolume(
    int i,
    int i1,
    int i2,
  ) {
    _setStreamVolume(reference.pointer, _id_setStreamVolume as jni.JMethodIDPtr,
            i, i1, i2)
        .check();
  }

  static final _id_getVolumeGroupIdForAttributes = _class.instanceMethodId(
    r'getVolumeGroupIdForAttributes',
    r'(Landroid/media/AudioAttributes;)I',
  );

  static final _getVolumeGroupIdForAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public int getVolumeGroupIdForAttributes(android.media.AudioAttributes audioAttributes)`
  int getVolumeGroupIdForAttributes(
    jni.JObject audioAttributes,
  ) {
    return _getVolumeGroupIdForAttributes(
            reference.pointer,
            _id_getVolumeGroupIdForAttributes as jni.JMethodIDPtr,
            audioAttributes.reference.pointer)
        .integer;
  }

  static final _id_adjustVolumeGroupVolume = _class.instanceMethodId(
    r'adjustVolumeGroupVolume',
    r'(III)V',
  );

  static final _adjustVolumeGroupVolume = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: `public void adjustVolumeGroupVolume(int i, int i1, int i2)`
  void adjustVolumeGroupVolume(
    int i,
    int i1,
    int i2,
  ) {
    _adjustVolumeGroupVolume(reference.pointer,
            _id_adjustVolumeGroupVolume as jni.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_isVolumeGroupMuted = _class.instanceMethodId(
    r'isVolumeGroupMuted',
    r'(I)Z',
  );

  static final _isVolumeGroupMuted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public boolean isVolumeGroupMuted(int i)`
  bool isVolumeGroupMuted(
    int i,
  ) {
    return _isVolumeGroupMuted(
            reference.pointer, _id_isVolumeGroupMuted as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_setStreamSolo = _class.instanceMethodId(
    r'setStreamSolo',
    r'(IZ)V',
  );

  static final _setStreamSolo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: `public void setStreamSolo(int i, boolean z)`
  void setStreamSolo(
    int i,
    bool z,
  ) {
    _setStreamSolo(reference.pointer, _id_setStreamSolo as jni.JMethodIDPtr, i,
            z ? 1 : 0)
        .check();
  }

  static final _id_setStreamMute = _class.instanceMethodId(
    r'setStreamMute',
    r'(IZ)V',
  );

  static final _setStreamMute = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: `public void setStreamMute(int i, boolean z)`
  void setStreamMute(
    int i,
    bool z,
  ) {
    _setStreamMute(reference.pointer, _id_setStreamMute as jni.JMethodIDPtr, i,
            z ? 1 : 0)
        .check();
  }

  static final _id_isStreamMute = _class.instanceMethodId(
    r'isStreamMute',
    r'(I)Z',
  );

  static final _isStreamMute = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public boolean isStreamMute(int i)`
  bool isStreamMute(
    int i,
  ) {
    return _isStreamMute(
            reference.pointer, _id_isStreamMute as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_shouldVibrate = _class.instanceMethodId(
    r'shouldVibrate',
    r'(I)Z',
  );

  static final _shouldVibrate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public boolean shouldVibrate(int i)`
  bool shouldVibrate(
    int i,
  ) {
    return _shouldVibrate(
            reference.pointer, _id_shouldVibrate as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_getVibrateSetting = _class.instanceMethodId(
    r'getVibrateSetting',
    r'(I)I',
  );

  static final _getVibrateSetting = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public int getVibrateSetting(int i)`
  int getVibrateSetting(
    int i,
  ) {
    return _getVibrateSetting(
            reference.pointer, _id_getVibrateSetting as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_setVibrateSetting = _class.instanceMethodId(
    r'setVibrateSetting',
    r'(II)V',
  );

  static final _setVibrateSetting = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: `public void setVibrateSetting(int i, int i1)`
  void setVibrateSetting(
    int i,
    int i1,
  ) {
    _setVibrateSetting(
            reference.pointer, _id_setVibrateSetting as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_setSpeakerphoneOn = _class.instanceMethodId(
    r'setSpeakerphoneOn',
    r'(Z)V',
  );

  static final _setSpeakerphoneOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setSpeakerphoneOn(boolean z)`
  void setSpeakerphoneOn(
    bool z,
  ) {
    _setSpeakerphoneOn(reference.pointer,
            _id_setSpeakerphoneOn as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isSpeakerphoneOn = _class.instanceMethodId(
    r'isSpeakerphoneOn',
    r'()Z',
  );

  static final _isSpeakerphoneOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isSpeakerphoneOn()`
  bool isSpeakerphoneOn() {
    return _isSpeakerphoneOn(
            reference.pointer, _id_isSpeakerphoneOn as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setAllowedCapturePolicy = _class.instanceMethodId(
    r'setAllowedCapturePolicy',
    r'(I)V',
  );

  static final _setAllowedCapturePolicy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setAllowedCapturePolicy(int i)`
  void setAllowedCapturePolicy(
    int i,
  ) {
    _setAllowedCapturePolicy(reference.pointer,
            _id_setAllowedCapturePolicy as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getAllowedCapturePolicy = _class.instanceMethodId(
    r'getAllowedCapturePolicy',
    r'()I',
  );

  static final _getAllowedCapturePolicy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getAllowedCapturePolicy()`
  int getAllowedCapturePolicy() {
    return _getAllowedCapturePolicy(
            reference.pointer, _id_getAllowedCapturePolicy as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDirectPlaybackSupport = _class.staticMethodId(
    r'getDirectPlaybackSupport',
    r'(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)I',
  );

  static final _getDirectPlaybackSupport = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public int getDirectPlaybackSupport(android.media.AudioFormat audioFormat, android.media.AudioAttributes audioAttributes)`
  static int getDirectPlaybackSupport(
    jni.JObject audioFormat,
    jni.JObject audioAttributes,
  ) {
    return _getDirectPlaybackSupport(
            _class.reference.pointer,
            _id_getDirectPlaybackSupport as jni.JMethodIDPtr,
            audioFormat.reference.pointer,
            audioAttributes.reference.pointer)
        .integer;
  }

  static final _id_isOffloadedPlaybackSupported = _class.staticMethodId(
    r'isOffloadedPlaybackSupported',
    r'(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)Z',
  );

  static final _isOffloadedPlaybackSupported = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public boolean isOffloadedPlaybackSupported(android.media.AudioFormat audioFormat, android.media.AudioAttributes audioAttributes)`
  static bool isOffloadedPlaybackSupported(
    jni.JObject audioFormat,
    jni.JObject audioAttributes,
  ) {
    return _isOffloadedPlaybackSupported(
            _class.reference.pointer,
            _id_isOffloadedPlaybackSupported as jni.JMethodIDPtr,
            audioFormat.reference.pointer,
            audioAttributes.reference.pointer)
        .boolean;
  }

  static final _id_getPlaybackOffloadSupport = _class.staticMethodId(
    r'getPlaybackOffloadSupport',
    r'(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)I',
  );

  static final _getPlaybackOffloadSupport = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public int getPlaybackOffloadSupport(android.media.AudioFormat audioFormat, android.media.AudioAttributes audioAttributes)`
  static int getPlaybackOffloadSupport(
    jni.JObject audioFormat,
    jni.JObject audioAttributes,
  ) {
    return _getPlaybackOffloadSupport(
            _class.reference.pointer,
            _id_getPlaybackOffloadSupport as jni.JMethodIDPtr,
            audioFormat.reference.pointer,
            audioAttributes.reference.pointer)
        .integer;
  }

  static final _id_getSpatializer = _class.instanceMethodId(
    r'getSpatializer',
    r'()Landroid/media/Spatializer;',
  );

  static final _getSpatializer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.media.Spatializer getSpatializer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSpatializer() {
    return _getSpatializer(
            reference.pointer, _id_getSpatializer as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_isBluetoothScoAvailableOffCall = _class.instanceMethodId(
    r'isBluetoothScoAvailableOffCall',
    r'()Z',
  );

  static final _isBluetoothScoAvailableOffCall = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isBluetoothScoAvailableOffCall()`
  bool isBluetoothScoAvailableOffCall() {
    return _isBluetoothScoAvailableOffCall(reference.pointer,
            _id_isBluetoothScoAvailableOffCall as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_startBluetoothSco = _class.instanceMethodId(
    r'startBluetoothSco',
    r'()V',
  );

  static final _startBluetoothSco = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void startBluetoothSco()`
  void startBluetoothSco() {
    _startBluetoothSco(
            reference.pointer, _id_startBluetoothSco as jni.JMethodIDPtr)
        .check();
  }

  static final _id_stopBluetoothSco = _class.instanceMethodId(
    r'stopBluetoothSco',
    r'()V',
  );

  static final _stopBluetoothSco = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void stopBluetoothSco()`
  void stopBluetoothSco() {
    _stopBluetoothSco(
            reference.pointer, _id_stopBluetoothSco as jni.JMethodIDPtr)
        .check();
  }

  static final _id_setBluetoothScoOn = _class.instanceMethodId(
    r'setBluetoothScoOn',
    r'(Z)V',
  );

  static final _setBluetoothScoOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setBluetoothScoOn(boolean z)`
  void setBluetoothScoOn(
    bool z,
  ) {
    _setBluetoothScoOn(reference.pointer,
            _id_setBluetoothScoOn as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isBluetoothScoOn = _class.instanceMethodId(
    r'isBluetoothScoOn',
    r'()Z',
  );

  static final _isBluetoothScoOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isBluetoothScoOn()`
  bool isBluetoothScoOn() {
    return _isBluetoothScoOn(
            reference.pointer, _id_isBluetoothScoOn as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setBluetoothA2dpOn = _class.instanceMethodId(
    r'setBluetoothA2dpOn',
    r'(Z)V',
  );

  static final _setBluetoothA2dpOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setBluetoothA2dpOn(boolean z)`
  void setBluetoothA2dpOn(
    bool z,
  ) {
    _setBluetoothA2dpOn(reference.pointer,
            _id_setBluetoothA2dpOn as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isBluetoothA2dpOn = _class.instanceMethodId(
    r'isBluetoothA2dpOn',
    r'()Z',
  );

  static final _isBluetoothA2dpOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isBluetoothA2dpOn()`
  bool isBluetoothA2dpOn() {
    return _isBluetoothA2dpOn(
            reference.pointer, _id_isBluetoothA2dpOn as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setWiredHeadsetOn = _class.instanceMethodId(
    r'setWiredHeadsetOn',
    r'(Z)V',
  );

  static final _setWiredHeadsetOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setWiredHeadsetOn(boolean z)`
  void setWiredHeadsetOn(
    bool z,
  ) {
    _setWiredHeadsetOn(reference.pointer,
            _id_setWiredHeadsetOn as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isWiredHeadsetOn = _class.instanceMethodId(
    r'isWiredHeadsetOn',
    r'()Z',
  );

  static final _isWiredHeadsetOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isWiredHeadsetOn()`
  bool isWiredHeadsetOn() {
    return _isWiredHeadsetOn(
            reference.pointer, _id_isWiredHeadsetOn as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setMicrophoneMute = _class.instanceMethodId(
    r'setMicrophoneMute',
    r'(Z)V',
  );

  static final _setMicrophoneMute = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setMicrophoneMute(boolean z)`
  void setMicrophoneMute(
    bool z,
  ) {
    _setMicrophoneMute(reference.pointer,
            _id_setMicrophoneMute as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isMicrophoneMute = _class.instanceMethodId(
    r'isMicrophoneMute',
    r'()Z',
  );

  static final _isMicrophoneMute = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isMicrophoneMute()`
  bool isMicrophoneMute() {
    return _isMicrophoneMute(
            reference.pointer, _id_isMicrophoneMute as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setMode = _class.instanceMethodId(
    r'setMode',
    r'(I)V',
  );

  static final _setMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setMode(int i)`
  void setMode(
    int i,
  ) {
    _setMode(reference.pointer, _id_setMode as jni.JMethodIDPtr, i).check();
  }

  static final _id_getMode = _class.instanceMethodId(
    r'getMode',
    r'()I',
  );

  static final _getMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getMode()`
  int getMode() {
    return _getMode(reference.pointer, _id_getMode as jni.JMethodIDPtr).integer;
  }

  static final _id_addOnModeChangedListener = _class.instanceMethodId(
    r'addOnModeChangedListener',
    r'(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$OnModeChangedListener;)V',
  );

  static final _addOnModeChangedListener = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnModeChangedListener(java.util.concurrent.Executor executor, android.media.AudioManager$OnModeChangedListener onModeChangedListener)`
  void addOnModeChangedListener(
    jni.JObject executor,
    AudioManager_OnModeChangedListener onModeChangedListener,
  ) {
    _addOnModeChangedListener(
            reference.pointer,
            _id_addOnModeChangedListener as jni.JMethodIDPtr,
            executor.reference.pointer,
            onModeChangedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnModeChangedListener = _class.instanceMethodId(
    r'removeOnModeChangedListener',
    r'(Landroid/media/AudioManager$OnModeChangedListener;)V',
  );

  static final _removeOnModeChangedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnModeChangedListener(android.media.AudioManager$OnModeChangedListener onModeChangedListener)`
  void removeOnModeChangedListener(
    AudioManager_OnModeChangedListener onModeChangedListener,
  ) {
    _removeOnModeChangedListener(
            reference.pointer,
            _id_removeOnModeChangedListener as jni.JMethodIDPtr,
            onModeChangedListener.reference.pointer)
        .check();
  }

  static final _id_isCallScreeningModeSupported = _class.instanceMethodId(
    r'isCallScreeningModeSupported',
    r'()Z',
  );

  static final _isCallScreeningModeSupported = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isCallScreeningModeSupported()`
  bool isCallScreeningModeSupported() {
    return _isCallScreeningModeSupported(reference.pointer,
            _id_isCallScreeningModeSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setRouting = _class.instanceMethodId(
    r'setRouting',
    r'(III)V',
  );

  static final _setRouting = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: `public void setRouting(int i, int i1, int i2)`
  void setRouting(
    int i,
    int i1,
    int i2,
  ) {
    _setRouting(
            reference.pointer, _id_setRouting as jni.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_getRouting = _class.instanceMethodId(
    r'getRouting',
    r'(I)I',
  );

  static final _getRouting = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public int getRouting(int i)`
  int getRouting(
    int i,
  ) {
    return _getRouting(reference.pointer, _id_getRouting as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_isMusicActive = _class.instanceMethodId(
    r'isMusicActive',
    r'()Z',
  );

  static final _isMusicActive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isMusicActive()`
  bool isMusicActive() {
    return _isMusicActive(
            reference.pointer, _id_isMusicActive as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_generateAudioSessionId = _class.instanceMethodId(
    r'generateAudioSessionId',
    r'()I',
  );

  static final _generateAudioSessionId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int generateAudioSessionId()`
  int generateAudioSessionId() {
    return _generateAudioSessionId(
            reference.pointer, _id_generateAudioSessionId as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setParameters = _class.instanceMethodId(
    r'setParameters',
    r'(Ljava/lang/String;)V',
  );

  static final _setParameters = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setParameters(java.lang.String string)`
  void setParameters(
    jni.JString string,
  ) {
    _setParameters(reference.pointer, _id_setParameters as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getParameters = _class.instanceMethodId(
    r'getParameters',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getParameters = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public java.lang.String getParameters(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getParameters(
    jni.JString string,
  ) {
    return _getParameters(reference.pointer,
            _id_getParameters as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_playSoundEffect = _class.instanceMethodId(
    r'playSoundEffect',
    r'(I)V',
  );

  static final _playSoundEffect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void playSoundEffect(int i)`
  void playSoundEffect(
    int i,
  ) {
    _playSoundEffect(
            reference.pointer, _id_playSoundEffect as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_playSoundEffect1 = _class.instanceMethodId(
    r'playSoundEffect',
    r'(IF)V',
  );

  static final _playSoundEffect1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<($Int32, ffi.Double)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, double)>();

  /// from: `public void playSoundEffect(int i, float f)`
  void playSoundEffect1(
    int i,
    double f,
  ) {
    _playSoundEffect1(
            reference.pointer, _id_playSoundEffect1 as jni.JMethodIDPtr, i, f)
        .check();
  }

  static final _id_loadSoundEffects = _class.instanceMethodId(
    r'loadSoundEffects',
    r'()V',
  );

  static final _loadSoundEffects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void loadSoundEffects()`
  void loadSoundEffects() {
    _loadSoundEffects(
            reference.pointer, _id_loadSoundEffects as jni.JMethodIDPtr)
        .check();
  }

  static final _id_unloadSoundEffects = _class.instanceMethodId(
    r'unloadSoundEffects',
    r'()V',
  );

  static final _unloadSoundEffects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void unloadSoundEffects()`
  void unloadSoundEffects() {
    _unloadSoundEffects(
            reference.pointer, _id_unloadSoundEffects as jni.JMethodIDPtr)
        .check();
  }

  static final _id_requestAudioFocus = _class.instanceMethodId(
    r'requestAudioFocus',
    r'(Landroid/media/AudioManager$OnAudioFocusChangeListener;II)I',
  );

  static final _requestAudioFocus = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: `public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener onAudioFocusChangeListener, int i, int i1)`
  int requestAudioFocus(
    AudioManager_OnAudioFocusChangeListener onAudioFocusChangeListener,
    int i,
    int i1,
  ) {
    return _requestAudioFocus(
            reference.pointer,
            _id_requestAudioFocus as jni.JMethodIDPtr,
            onAudioFocusChangeListener.reference.pointer,
            i,
            i1)
        .integer;
  }

  static final _id_requestAudioFocus1 = _class.instanceMethodId(
    r'requestAudioFocus',
    r'(Landroid/media/AudioFocusRequest;)I',
  );

  static final _requestAudioFocus1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public int requestAudioFocus(android.media.AudioFocusRequest audioFocusRequest)`
  int requestAudioFocus1(
    jni.JObject audioFocusRequest,
  ) {
    return _requestAudioFocus1(
            reference.pointer,
            _id_requestAudioFocus1 as jni.JMethodIDPtr,
            audioFocusRequest.reference.pointer)
        .integer;
  }

  static final _id_abandonAudioFocusRequest = _class.instanceMethodId(
    r'abandonAudioFocusRequest',
    r'(Landroid/media/AudioFocusRequest;)I',
  );

  static final _abandonAudioFocusRequest = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public int abandonAudioFocusRequest(android.media.AudioFocusRequest audioFocusRequest)`
  int abandonAudioFocusRequest(
    jni.JObject audioFocusRequest,
  ) {
    return _abandonAudioFocusRequest(
            reference.pointer,
            _id_abandonAudioFocusRequest as jni.JMethodIDPtr,
            audioFocusRequest.reference.pointer)
        .integer;
  }

  static final _id_abandonAudioFocus = _class.instanceMethodId(
    r'abandonAudioFocus',
    r'(Landroid/media/AudioManager$OnAudioFocusChangeListener;)I',
  );

  static final _abandonAudioFocus = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener onAudioFocusChangeListener)`
  int abandonAudioFocus(
    AudioManager_OnAudioFocusChangeListener onAudioFocusChangeListener,
  ) {
    return _abandonAudioFocus(
            reference.pointer,
            _id_abandonAudioFocus as jni.JMethodIDPtr,
            onAudioFocusChangeListener.reference.pointer)
        .integer;
  }

  static final _id_registerMediaButtonEventReceiver = _class.instanceMethodId(
    r'registerMediaButtonEventReceiver',
    r'(Landroid/content/ComponentName;)V',
  );

  static final _registerMediaButtonEventReceiver =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void registerMediaButtonEventReceiver(android.content.ComponentName componentName)`
  void registerMediaButtonEventReceiver(
    jni.JObject componentName,
  ) {
    _registerMediaButtonEventReceiver(
            reference.pointer,
            _id_registerMediaButtonEventReceiver as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .check();
  }

  static final _id_registerMediaButtonEventReceiver1 = _class.instanceMethodId(
    r'registerMediaButtonEventReceiver',
    r'(Landroid/app/PendingIntent;)V',
  );

  static final _registerMediaButtonEventReceiver1 =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void registerMediaButtonEventReceiver(android.app.PendingIntent pendingIntent)`
  void registerMediaButtonEventReceiver1(
    jni.JObject pendingIntent,
  ) {
    _registerMediaButtonEventReceiver1(
            reference.pointer,
            _id_registerMediaButtonEventReceiver1 as jni.JMethodIDPtr,
            pendingIntent.reference.pointer)
        .check();
  }

  static final _id_unregisterMediaButtonEventReceiver = _class.instanceMethodId(
    r'unregisterMediaButtonEventReceiver',
    r'(Landroid/content/ComponentName;)V',
  );

  static final _unregisterMediaButtonEventReceiver =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void unregisterMediaButtonEventReceiver(android.content.ComponentName componentName)`
  void unregisterMediaButtonEventReceiver(
    jni.JObject componentName,
  ) {
    _unregisterMediaButtonEventReceiver(
            reference.pointer,
            _id_unregisterMediaButtonEventReceiver as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .check();
  }

  static final _id_unregisterMediaButtonEventReceiver1 =
      _class.instanceMethodId(
    r'unregisterMediaButtonEventReceiver',
    r'(Landroid/app/PendingIntent;)V',
  );

  static final _unregisterMediaButtonEventReceiver1 =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void unregisterMediaButtonEventReceiver(android.app.PendingIntent pendingIntent)`
  void unregisterMediaButtonEventReceiver1(
    jni.JObject pendingIntent,
  ) {
    _unregisterMediaButtonEventReceiver1(
            reference.pointer,
            _id_unregisterMediaButtonEventReceiver1 as jni.JMethodIDPtr,
            pendingIntent.reference.pointer)
        .check();
  }

  static final _id_registerRemoteControlClient = _class.instanceMethodId(
    r'registerRemoteControlClient',
    r'(Landroid/media/RemoteControlClient;)V',
  );

  static final _registerRemoteControlClient = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void registerRemoteControlClient(android.media.RemoteControlClient remoteControlClient)`
  void registerRemoteControlClient(
    jni.JObject remoteControlClient,
  ) {
    _registerRemoteControlClient(
            reference.pointer,
            _id_registerRemoteControlClient as jni.JMethodIDPtr,
            remoteControlClient.reference.pointer)
        .check();
  }

  static final _id_unregisterRemoteControlClient = _class.instanceMethodId(
    r'unregisterRemoteControlClient',
    r'(Landroid/media/RemoteControlClient;)V',
  );

  static final _unregisterRemoteControlClient = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void unregisterRemoteControlClient(android.media.RemoteControlClient remoteControlClient)`
  void unregisterRemoteControlClient(
    jni.JObject remoteControlClient,
  ) {
    _unregisterRemoteControlClient(
            reference.pointer,
            _id_unregisterRemoteControlClient as jni.JMethodIDPtr,
            remoteControlClient.reference.pointer)
        .check();
  }

  static final _id_registerRemoteController = _class.instanceMethodId(
    r'registerRemoteController',
    r'(Landroid/media/RemoteController;)Z',
  );

  static final _registerRemoteController = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean registerRemoteController(android.media.RemoteController remoteController)`
  bool registerRemoteController(
    jni.JObject remoteController,
  ) {
    return _registerRemoteController(
            reference.pointer,
            _id_registerRemoteController as jni.JMethodIDPtr,
            remoteController.reference.pointer)
        .boolean;
  }

  static final _id_unregisterRemoteController = _class.instanceMethodId(
    r'unregisterRemoteController',
    r'(Landroid/media/RemoteController;)V',
  );

  static final _unregisterRemoteController = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void unregisterRemoteController(android.media.RemoteController remoteController)`
  void unregisterRemoteController(
    jni.JObject remoteController,
  ) {
    _unregisterRemoteController(
            reference.pointer,
            _id_unregisterRemoteController as jni.JMethodIDPtr,
            remoteController.reference.pointer)
        .check();
  }

  static final _id_registerAudioPlaybackCallback = _class.instanceMethodId(
    r'registerAudioPlaybackCallback',
    r'(Landroid/media/AudioManager$AudioPlaybackCallback;Landroid/os/Handler;)V',
  );

  static final _registerAudioPlaybackCallback = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback audioPlaybackCallback, android.os.Handler handler)`
  void registerAudioPlaybackCallback(
    AudioManager_AudioPlaybackCallback audioPlaybackCallback,
    jni.JObject handler,
  ) {
    _registerAudioPlaybackCallback(
            reference.pointer,
            _id_registerAudioPlaybackCallback as jni.JMethodIDPtr,
            audioPlaybackCallback.reference.pointer,
            handler.reference.pointer)
        .check();
  }

  static final _id_unregisterAudioPlaybackCallback = _class.instanceMethodId(
    r'unregisterAudioPlaybackCallback',
    r'(Landroid/media/AudioManager$AudioPlaybackCallback;)V',
  );

  static final _unregisterAudioPlaybackCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void unregisterAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback audioPlaybackCallback)`
  void unregisterAudioPlaybackCallback(
    AudioManager_AudioPlaybackCallback audioPlaybackCallback,
  ) {
    _unregisterAudioPlaybackCallback(
            reference.pointer,
            _id_unregisterAudioPlaybackCallback as jni.JMethodIDPtr,
            audioPlaybackCallback.reference.pointer)
        .check();
  }

  static final _id_getActivePlaybackConfigurations = _class.instanceMethodId(
    r'getActivePlaybackConfigurations',
    r'()Ljava/util/List;',
  );

  static final _getActivePlaybackConfigurations = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getActivePlaybackConfigurations()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getActivePlaybackConfigurations() {
    return _getActivePlaybackConfigurations(reference.pointer,
            _id_getActivePlaybackConfigurations as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_registerAudioRecordingCallback = _class.instanceMethodId(
    r'registerAudioRecordingCallback',
    r'(Landroid/media/AudioManager$AudioRecordingCallback;Landroid/os/Handler;)V',
  );

  static final _registerAudioRecordingCallback = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback audioRecordingCallback, android.os.Handler handler)`
  void registerAudioRecordingCallback(
    AudioManager_AudioRecordingCallback audioRecordingCallback,
    jni.JObject handler,
  ) {
    _registerAudioRecordingCallback(
            reference.pointer,
            _id_registerAudioRecordingCallback as jni.JMethodIDPtr,
            audioRecordingCallback.reference.pointer,
            handler.reference.pointer)
        .check();
  }

  static final _id_unregisterAudioRecordingCallback = _class.instanceMethodId(
    r'unregisterAudioRecordingCallback',
    r'(Landroid/media/AudioManager$AudioRecordingCallback;)V',
  );

  static final _unregisterAudioRecordingCallback =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback audioRecordingCallback)`
  void unregisterAudioRecordingCallback(
    AudioManager_AudioRecordingCallback audioRecordingCallback,
  ) {
    _unregisterAudioRecordingCallback(
            reference.pointer,
            _id_unregisterAudioRecordingCallback as jni.JMethodIDPtr,
            audioRecordingCallback.reference.pointer)
        .check();
  }

  static final _id_getActiveRecordingConfigurations = _class.instanceMethodId(
    r'getActiveRecordingConfigurations',
    r'()Ljava/util/List;',
  );

  static final _getActiveRecordingConfigurations =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public java.util.List getActiveRecordingConfigurations()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getActiveRecordingConfigurations() {
    return _getActiveRecordingConfigurations(reference.pointer,
            _id_getActiveRecordingConfigurations as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getAudioDevicesForAttributes = _class.instanceMethodId(
    r'getAudioDevicesForAttributes',
    r'(Landroid/media/AudioAttributes;)Ljava/util/List;',
  );

  static final _getAudioDevicesForAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public java.util.List getAudioDevicesForAttributes(android.media.AudioAttributes audioAttributes)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getAudioDevicesForAttributes(
    jni.JObject audioAttributes,
  ) {
    return _getAudioDevicesForAttributes(
            reference.pointer,
            _id_getAudioDevicesForAttributes as jni.JMethodIDPtr,
            audioAttributes.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getProperty = _class.instanceMethodId(
    r'getProperty',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getProperty = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public java.lang.String getProperty(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getProperty(
    jni.JString string,
  ) {
    return _getProperty(reference.pointer, _id_getProperty as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getDevices = _class.instanceMethodId(
    r'getDevices',
    r'(I)[Landroid/media/AudioDeviceInfo;',
  );

  static final _getDevices = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public android.media.AudioDeviceInfo[] getDevices(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getDevices(
    int i,
  ) {
    return _getDevices(reference.pointer, _id_getDevices as jni.JMethodIDPtr, i)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_registerAudioDeviceCallback = _class.instanceMethodId(
    r'registerAudioDeviceCallback',
    r'(Landroid/media/AudioDeviceCallback;Landroid/os/Handler;)V',
  );

  static final _registerAudioDeviceCallback = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void registerAudioDeviceCallback(android.media.AudioDeviceCallback audioDeviceCallback, android.os.Handler handler)`
  void registerAudioDeviceCallback(
    jni.JObject audioDeviceCallback,
    jni.JObject handler,
  ) {
    _registerAudioDeviceCallback(
            reference.pointer,
            _id_registerAudioDeviceCallback as jni.JMethodIDPtr,
            audioDeviceCallback.reference.pointer,
            handler.reference.pointer)
        .check();
  }

  static final _id_unregisterAudioDeviceCallback = _class.instanceMethodId(
    r'unregisterAudioDeviceCallback',
    r'(Landroid/media/AudioDeviceCallback;)V',
  );

  static final _unregisterAudioDeviceCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void unregisterAudioDeviceCallback(android.media.AudioDeviceCallback audioDeviceCallback)`
  void unregisterAudioDeviceCallback(
    jni.JObject audioDeviceCallback,
  ) {
    _unregisterAudioDeviceCallback(
            reference.pointer,
            _id_unregisterAudioDeviceCallback as jni.JMethodIDPtr,
            audioDeviceCallback.reference.pointer)
        .check();
  }

  static final _id_getMicrophones = _class.instanceMethodId(
    r'getMicrophones',
    r'()Ljava/util/List;',
  );

  static final _getMicrophones = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getMicrophones()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getMicrophones() {
    return _getMicrophones(
            reference.pointer, _id_getMicrophones as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_setEncodedSurroundMode = _class.instanceMethodId(
    r'setEncodedSurroundMode',
    r'(I)Z',
  );

  static final _setEncodedSurroundMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public boolean setEncodedSurroundMode(int i)`
  bool setEncodedSurroundMode(
    int i,
  ) {
    return _setEncodedSurroundMode(reference.pointer,
            _id_setEncodedSurroundMode as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_getEncodedSurroundMode = _class.instanceMethodId(
    r'getEncodedSurroundMode',
    r'()I',
  );

  static final _getEncodedSurroundMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getEncodedSurroundMode()`
  int getEncodedSurroundMode() {
    return _getEncodedSurroundMode(
            reference.pointer, _id_getEncodedSurroundMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setSurroundFormatEnabled = _class.instanceMethodId(
    r'setSurroundFormatEnabled',
    r'(IZ)Z',
  );

  static final _setSurroundFormatEnabled = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<($Int32, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: `public boolean setSurroundFormatEnabled(int i, boolean z)`
  bool setSurroundFormatEnabled(
    int i,
    bool z,
  ) {
    return _setSurroundFormatEnabled(reference.pointer,
            _id_setSurroundFormatEnabled as jni.JMethodIDPtr, i, z ? 1 : 0)
        .boolean;
  }

  static final _id_isSurroundFormatEnabled = _class.instanceMethodId(
    r'isSurroundFormatEnabled',
    r'(I)Z',
  );

  static final _isSurroundFormatEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public boolean isSurroundFormatEnabled(int i)`
  bool isSurroundFormatEnabled(
    int i,
  ) {
    return _isSurroundFormatEnabled(reference.pointer,
            _id_isSurroundFormatEnabled as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_isHapticPlaybackSupported = _class.staticMethodId(
    r'isHapticPlaybackSupported',
    r'()Z',
  );

  static final _isHapticPlaybackSupported = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public boolean isHapticPlaybackSupported()`
  static bool isHapticPlaybackSupported() {
    return _isHapticPlaybackSupported(_class.reference.pointer,
            _id_isHapticPlaybackSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getAudioHwSyncForSession = _class.instanceMethodId(
    r'getAudioHwSyncForSession',
    r'(I)I',
  );

  static final _getAudioHwSyncForSession = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public int getAudioHwSyncForSession(int i)`
  int getAudioHwSyncForSession(
    int i,
  ) {
    return _getAudioHwSyncForSession(reference.pointer,
            _id_getAudioHwSyncForSession as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_setCommunicationDevice = _class.instanceMethodId(
    r'setCommunicationDevice',
    r'(Landroid/media/AudioDeviceInfo;)Z',
  );

  static final _setCommunicationDevice = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean setCommunicationDevice(android.media.AudioDeviceInfo audioDeviceInfo)`
  bool setCommunicationDevice(
    jni.JObject audioDeviceInfo,
  ) {
    return _setCommunicationDevice(
            reference.pointer,
            _id_setCommunicationDevice as jni.JMethodIDPtr,
            audioDeviceInfo.reference.pointer)
        .boolean;
  }

  static final _id_clearCommunicationDevice = _class.instanceMethodId(
    r'clearCommunicationDevice',
    r'()V',
  );

  static final _clearCommunicationDevice = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void clearCommunicationDevice()`
  void clearCommunicationDevice() {
    _clearCommunicationDevice(
            reference.pointer, _id_clearCommunicationDevice as jni.JMethodIDPtr)
        .check();
  }

  static final _id_getCommunicationDevice = _class.instanceMethodId(
    r'getCommunicationDevice',
    r'()Landroid/media/AudioDeviceInfo;',
  );

  static final _getCommunicationDevice = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.media.AudioDeviceInfo getCommunicationDevice()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCommunicationDevice() {
    return _getCommunicationDevice(
            reference.pointer, _id_getCommunicationDevice as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getAvailableCommunicationDevices = _class.instanceMethodId(
    r'getAvailableCommunicationDevices',
    r'()Ljava/util/List;',
  );

  static final _getAvailableCommunicationDevices =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public java.util.List getAvailableCommunicationDevices()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getAvailableCommunicationDevices() {
    return _getAvailableCommunicationDevices(reference.pointer,
            _id_getAvailableCommunicationDevices as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getDirectProfilesForAttributes = _class.instanceMethodId(
    r'getDirectProfilesForAttributes',
    r'(Landroid/media/AudioAttributes;)Ljava/util/List;',
  );

  static final _getDirectProfilesForAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public java.util.List getDirectProfilesForAttributes(android.media.AudioAttributes audioAttributes)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getDirectProfilesForAttributes(
    jni.JObject audioAttributes,
  ) {
    return _getDirectProfilesForAttributes(
            reference.pointer,
            _id_getDirectProfilesForAttributes as jni.JMethodIDPtr,
            audioAttributes.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_addOnCommunicationDeviceChangedListener =
      _class.instanceMethodId(
    r'addOnCommunicationDeviceChangedListener',
    r'(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$OnCommunicationDeviceChangedListener;)V',
  );

  static final _addOnCommunicationDeviceChangedListener =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnCommunicationDeviceChangedListener(java.util.concurrent.Executor executor, android.media.AudioManager$OnCommunicationDeviceChangedListener onCommunicationDeviceChangedListener)`
  void addOnCommunicationDeviceChangedListener(
    jni.JObject executor,
    AudioManager_OnCommunicationDeviceChangedListener
        onCommunicationDeviceChangedListener,
  ) {
    _addOnCommunicationDeviceChangedListener(
            reference.pointer,
            _id_addOnCommunicationDeviceChangedListener as jni.JMethodIDPtr,
            executor.reference.pointer,
            onCommunicationDeviceChangedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCommunicationDeviceChangedListener =
      _class.instanceMethodId(
    r'removeOnCommunicationDeviceChangedListener',
    r'(Landroid/media/AudioManager$OnCommunicationDeviceChangedListener;)V',
  );

  static final _removeOnCommunicationDeviceChangedListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnCommunicationDeviceChangedListener(android.media.AudioManager$OnCommunicationDeviceChangedListener onCommunicationDeviceChangedListener)`
  void removeOnCommunicationDeviceChangedListener(
    AudioManager_OnCommunicationDeviceChangedListener
        onCommunicationDeviceChangedListener,
  ) {
    _removeOnCommunicationDeviceChangedListener(
            reference.pointer,
            _id_removeOnCommunicationDeviceChangedListener as jni.JMethodIDPtr,
            onCommunicationDeviceChangedListener.reference.pointer)
        .check();
  }

  static final _id_getSupportedMixerAttributes = _class.instanceMethodId(
    r'getSupportedMixerAttributes',
    r'(Landroid/media/AudioDeviceInfo;)Ljava/util/List;',
  );

  static final _getSupportedMixerAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public java.util.List getSupportedMixerAttributes(android.media.AudioDeviceInfo audioDeviceInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getSupportedMixerAttributes(
    jni.JObject audioDeviceInfo,
  ) {
    return _getSupportedMixerAttributes(
            reference.pointer,
            _id_getSupportedMixerAttributes as jni.JMethodIDPtr,
            audioDeviceInfo.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_setPreferredMixerAttributes = _class.instanceMethodId(
    r'setPreferredMixerAttributes',
    r'(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;Landroid/media/AudioMixerAttributes;)Z',
  );

  static final _setPreferredMixerAttributes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean setPreferredMixerAttributes(android.media.AudioAttributes audioAttributes, android.media.AudioDeviceInfo audioDeviceInfo, android.media.AudioMixerAttributes audioMixerAttributes)`
  bool setPreferredMixerAttributes(
    jni.JObject audioAttributes,
    jni.JObject audioDeviceInfo,
    jni.JObject audioMixerAttributes,
  ) {
    return _setPreferredMixerAttributes(
            reference.pointer,
            _id_setPreferredMixerAttributes as jni.JMethodIDPtr,
            audioAttributes.reference.pointer,
            audioDeviceInfo.reference.pointer,
            audioMixerAttributes.reference.pointer)
        .boolean;
  }

  static final _id_getPreferredMixerAttributes = _class.instanceMethodId(
    r'getPreferredMixerAttributes',
    r'(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;)Landroid/media/AudioMixerAttributes;',
  );

  static final _getPreferredMixerAttributes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public android.media.AudioMixerAttributes getPreferredMixerAttributes(android.media.AudioAttributes audioAttributes, android.media.AudioDeviceInfo audioDeviceInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferredMixerAttributes(
    jni.JObject audioAttributes,
    jni.JObject audioDeviceInfo,
  ) {
    return _getPreferredMixerAttributes(
            reference.pointer,
            _id_getPreferredMixerAttributes as jni.JMethodIDPtr,
            audioAttributes.reference.pointer,
            audioDeviceInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_clearPreferredMixerAttributes = _class.instanceMethodId(
    r'clearPreferredMixerAttributes',
    r'(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;)Z',
  );

  static final _clearPreferredMixerAttributes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean clearPreferredMixerAttributes(android.media.AudioAttributes audioAttributes, android.media.AudioDeviceInfo audioDeviceInfo)`
  bool clearPreferredMixerAttributes(
    jni.JObject audioAttributes,
    jni.JObject audioDeviceInfo,
  ) {
    return _clearPreferredMixerAttributes(
            reference.pointer,
            _id_clearPreferredMixerAttributes as jni.JMethodIDPtr,
            audioAttributes.reference.pointer,
            audioDeviceInfo.reference.pointer)
        .boolean;
  }

  static final _id_addOnPreferredMixerAttributesChangedListener =
      _class.instanceMethodId(
    r'addOnPreferredMixerAttributesChangedListener',
    r'(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$OnPreferredMixerAttributesChangedListener;)V',
  );

  static final _addOnPreferredMixerAttributesChangedListener =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnPreferredMixerAttributesChangedListener(java.util.concurrent.Executor executor, android.media.AudioManager$OnPreferredMixerAttributesChangedListener onPreferredMixerAttributesChangedListener)`
  void addOnPreferredMixerAttributesChangedListener(
    jni.JObject executor,
    AudioManager_OnPreferredMixerAttributesChangedListener
        onPreferredMixerAttributesChangedListener,
  ) {
    _addOnPreferredMixerAttributesChangedListener(
            reference.pointer,
            _id_addOnPreferredMixerAttributesChangedListener
                as jni.JMethodIDPtr,
            executor.reference.pointer,
            onPreferredMixerAttributesChangedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnPreferredMixerAttributesChangedListener =
      _class.instanceMethodId(
    r'removeOnPreferredMixerAttributesChangedListener',
    r'(Landroid/media/AudioManager$OnPreferredMixerAttributesChangedListener;)V',
  );

  static final _removeOnPreferredMixerAttributesChangedListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnPreferredMixerAttributesChangedListener(android.media.AudioManager$OnPreferredMixerAttributesChangedListener onPreferredMixerAttributesChangedListener)`
  void removeOnPreferredMixerAttributesChangedListener(
    AudioManager_OnPreferredMixerAttributesChangedListener
        onPreferredMixerAttributesChangedListener,
  ) {
    _removeOnPreferredMixerAttributesChangedListener(
            reference.pointer,
            _id_removeOnPreferredMixerAttributesChangedListener
                as jni.JMethodIDPtr,
            onPreferredMixerAttributesChangedListener.reference.pointer)
        .check();
  }
}

final class $AudioManagerType extends jni.JObjType<AudioManager> {
  const $AudioManagerType();

  @override
  String get signature => r'Landroid/media/AudioManager;';

  @override
  AudioManager fromReference(jni.JReference reference) =>
      AudioManager.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AudioManagerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioManagerType) &&
        other is $AudioManagerType;
  }
}
