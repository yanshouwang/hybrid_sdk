// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'Intent.dart' as intent_;

/// from: `android.content.IntentFilter$AuthorityEntry`
class IntentFilter_AuthorityEntry extends jni.JObject {
  @override
  late final jni.JObjType<IntentFilter_AuthorityEntry> $type = type;

  IntentFilter_AuthorityEntry.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/IntentFilter$AuthorityEntry');

  /// The type which includes information such as the signature of this class.
  static const type = $IntentFilter_AuthorityEntryType();
  static final _id_new0 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter_AuthorityEntry(
    jni.JString string,
    jni.JString string1,
  ) {
    return IntentFilter_AuthorityEntry.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_getHost = _class.instanceMethodId(
    r'getHost',
    r'()Ljava/lang/String;',
  );

  static final _getHost = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getHost()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHost() {
    return _getHost(reference.pointer, _id_getHost as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r'getPort',
    r'()I',
  );

  static final _getPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getPort()`
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as jni.JMethodIDPtr).integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_match = _class.instanceMethodId(
    r'match',
    r'(Landroid/net/Uri;)I',
  );

  static final _match = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public int match(android.net.Uri uri)`
  int match(
    jni.JObject uri,
  ) {
    return _match(reference.pointer, _id_match as jni.JMethodIDPtr,
            uri.reference.pointer)
        .integer;
  }
}

final class $IntentFilter_AuthorityEntryType
    extends jni.JObjType<IntentFilter_AuthorityEntry> {
  const $IntentFilter_AuthorityEntryType();

  @override
  String get signature => r'Landroid/content/IntentFilter$AuthorityEntry;';

  @override
  IntentFilter_AuthorityEntry fromReference(jni.JReference reference) =>
      IntentFilter_AuthorityEntry.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentFilter_AuthorityEntryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentFilter_AuthorityEntryType) &&
        other is $IntentFilter_AuthorityEntryType;
  }
}

/// from: `android.content.IntentFilter$MalformedMimeTypeException`
class IntentFilter_MalformedMimeTypeException extends jni.JObject {
  @override
  late final jni.JObjType<IntentFilter_MalformedMimeTypeException> $type = type;

  IntentFilter_MalformedMimeTypeException.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/IntentFilter$MalformedMimeTypeException');

  /// The type which includes information such as the signature of this class.
  static const type = $IntentFilter_MalformedMimeTypeExceptionType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter_MalformedMimeTypeException() {
    return IntentFilter_MalformedMimeTypeException.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter_MalformedMimeTypeException.new1(
    jni.JString string,
  ) {
    return IntentFilter_MalformedMimeTypeException.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .reference);
  }
}

final class $IntentFilter_MalformedMimeTypeExceptionType
    extends jni.JObjType<IntentFilter_MalformedMimeTypeException> {
  const $IntentFilter_MalformedMimeTypeExceptionType();

  @override
  String get signature =>
      r'Landroid/content/IntentFilter$MalformedMimeTypeException;';

  @override
  IntentFilter_MalformedMimeTypeException fromReference(
          jni.JReference reference) =>
      IntentFilter_MalformedMimeTypeException.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentFilter_MalformedMimeTypeExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($IntentFilter_MalformedMimeTypeExceptionType) &&
        other is $IntentFilter_MalformedMimeTypeExceptionType;
  }
}

/// from: `android.content.IntentFilter`
class IntentFilter extends jni.JObject {
  @override
  late final jni.JObjType<IntentFilter> $type = type;

  IntentFilter.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/content/IntentFilter');

  /// The type which includes information such as the signature of this class.
  static const type = $IntentFilterType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  /// from: `static public final int MATCH_ADJUSTMENT_MASK`
  static const MATCH_ADJUSTMENT_MASK = 65535;

  /// from: `static public final int MATCH_ADJUSTMENT_NORMAL`
  static const MATCH_ADJUSTMENT_NORMAL = 32768;

  /// from: `static public final int MATCH_CATEGORY_EMPTY`
  static const MATCH_CATEGORY_EMPTY = 1048576;

  /// from: `static public final int MATCH_CATEGORY_HOST`
  static const MATCH_CATEGORY_HOST = 3145728;

  /// from: `static public final int MATCH_CATEGORY_MASK`
  static const MATCH_CATEGORY_MASK = 268369920;

  /// from: `static public final int MATCH_CATEGORY_PATH`
  static const MATCH_CATEGORY_PATH = 5242880;

  /// from: `static public final int MATCH_CATEGORY_PORT`
  static const MATCH_CATEGORY_PORT = 4194304;

  /// from: `static public final int MATCH_CATEGORY_SCHEME`
  static const MATCH_CATEGORY_SCHEME = 2097152;

  /// from: `static public final int MATCH_CATEGORY_SCHEME_SPECIFIC_PART`
  static const MATCH_CATEGORY_SCHEME_SPECIFIC_PART = 5767168;

  /// from: `static public final int MATCH_CATEGORY_TYPE`
  static const MATCH_CATEGORY_TYPE = 6291456;

  /// from: `static public final int NO_MATCH_ACTION`
  static const NO_MATCH_ACTION = -3;

  /// from: `static public final int NO_MATCH_CATEGORY`
  static const NO_MATCH_CATEGORY = -4;

  /// from: `static public final int NO_MATCH_DATA`
  static const NO_MATCH_DATA = -2;

  /// from: `static public final int NO_MATCH_TYPE`
  static const NO_MATCH_TYPE = -1;

  /// from: `static public final int SYSTEM_HIGH_PRIORITY`
  static const SYSTEM_HIGH_PRIORITY = 1000;

  /// from: `static public final int SYSTEM_LOW_PRIORITY`
  static const SYSTEM_LOW_PRIORITY = -1000;
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter() {
    return IntentFilter.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new1(
    jni.JString string,
  ) {
    return IntentFilter.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new2(
    jni.JString string,
    jni.JString string1,
  ) {
    return IntentFilter.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r'(Landroid/content/IntentFilter;)V',
  );

  static final _new3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.IntentFilter intentFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new3(
    IntentFilter intentFilter,
  ) {
    return IntentFilter.fromReference(_new3(_class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr, intentFilter.reference.pointer)
        .reference);
  }

  static final _id_create = _class.staticMethodId(
    r'create',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/IntentFilter;',
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public android.content.IntentFilter create(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  static IntentFilter create(
    jni.JString string,
    jni.JString string1,
  ) {
    return _create(_class.reference.pointer, _id_create as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $IntentFilterType());
  }

  static final _id_setPriority = _class.instanceMethodId(
    r'setPriority',
    r'(I)V',
  );

  static final _setPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final void setPriority(int i)`
  void setPriority(
    int i,
  ) {
    _setPriority(reference.pointer, _id_setPriority as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getPriority = _class.instanceMethodId(
    r'getPriority',
    r'()I',
  );

  static final _getPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int getPriority()`
  int getPriority() {
    return _getPriority(reference.pointer, _id_getPriority as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_addAction = _class.instanceMethodId(
    r'addAction',
    r'(Ljava/lang/String;)V',
  );

  static final _addAction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void addAction(java.lang.String string)`
  void addAction(
    jni.JString string,
  ) {
    _addAction(reference.pointer, _id_addAction as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_countActions = _class.instanceMethodId(
    r'countActions',
    r'()I',
  );

  static final _countActions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int countActions()`
  int countActions() {
    return _countActions(
            reference.pointer, _id_countActions as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getAction = _class.instanceMethodId(
    r'getAction',
    r'(I)Ljava/lang/String;',
  );

  static final _getAction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getAction(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAction(
    int i,
  ) {
    return _getAction(reference.pointer, _id_getAction as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_hasAction = _class.instanceMethodId(
    r'hasAction',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasAction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean hasAction(java.lang.String string)`
  bool hasAction(
    jni.JString string,
  ) {
    return _hasAction(reference.pointer, _id_hasAction as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_matchAction = _class.instanceMethodId(
    r'matchAction',
    r'(Ljava/lang/String;)Z',
  );

  static final _matchAction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean matchAction(java.lang.String string)`
  bool matchAction(
    jni.JString string,
  ) {
    return _matchAction(reference.pointer, _id_matchAction as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_actionsIterator = _class.instanceMethodId(
    r'actionsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _actionsIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator actionsIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JString> actionsIterator() {
    return _actionsIterator(
            reference.pointer, _id_actionsIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JStringType()));
  }

  static final _id_addDataType = _class.instanceMethodId(
    r'addDataType',
    r'(Ljava/lang/String;)V',
  );

  static final _addDataType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void addDataType(java.lang.String string)`
  void addDataType(
    jni.JString string,
  ) {
    _addDataType(reference.pointer, _id_addDataType as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_hasDataType = _class.instanceMethodId(
    r'hasDataType',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean hasDataType(java.lang.String string)`
  bool hasDataType(
    jni.JString string,
  ) {
    return _hasDataType(reference.pointer, _id_hasDataType as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_countDataTypes = _class.instanceMethodId(
    r'countDataTypes',
    r'()I',
  );

  static final _countDataTypes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int countDataTypes()`
  int countDataTypes() {
    return _countDataTypes(
            reference.pointer, _id_countDataTypes as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataType = _class.instanceMethodId(
    r'getDataType',
    r'(I)Ljava/lang/String;',
  );

  static final _getDataType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getDataType(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDataType(
    int i,
  ) {
    return _getDataType(
            reference.pointer, _id_getDataType as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_typesIterator = _class.instanceMethodId(
    r'typesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _typesIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator typesIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JString> typesIterator() {
    return _typesIterator(
            reference.pointer, _id_typesIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JStringType()));
  }

  static final _id_addDataScheme = _class.instanceMethodId(
    r'addDataScheme',
    r'(Ljava/lang/String;)V',
  );

  static final _addDataScheme = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void addDataScheme(java.lang.String string)`
  void addDataScheme(
    jni.JString string,
  ) {
    _addDataScheme(reference.pointer, _id_addDataScheme as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_countDataSchemes = _class.instanceMethodId(
    r'countDataSchemes',
    r'()I',
  );

  static final _countDataSchemes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int countDataSchemes()`
  int countDataSchemes() {
    return _countDataSchemes(
            reference.pointer, _id_countDataSchemes as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataScheme = _class.instanceMethodId(
    r'getDataScheme',
    r'(I)Ljava/lang/String;',
  );

  static final _getDataScheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getDataScheme(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDataScheme(
    int i,
  ) {
    return _getDataScheme(
            reference.pointer, _id_getDataScheme as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_hasDataScheme = _class.instanceMethodId(
    r'hasDataScheme',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataScheme = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean hasDataScheme(java.lang.String string)`
  bool hasDataScheme(
    jni.JString string,
  ) {
    return _hasDataScheme(reference.pointer,
            _id_hasDataScheme as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_schemesIterator = _class.instanceMethodId(
    r'schemesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _schemesIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator schemesIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JString> schemesIterator() {
    return _schemesIterator(
            reference.pointer, _id_schemesIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JStringType()));
  }

  static final _id_addDataSchemeSpecificPart = _class.instanceMethodId(
    r'addDataSchemeSpecificPart',
    r'(Ljava/lang/String;I)V',
  );

  static final _addDataSchemeSpecificPart = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public final void addDataSchemeSpecificPart(java.lang.String string, int i)`
  void addDataSchemeSpecificPart(
    jni.JString string,
    int i,
  ) {
    _addDataSchemeSpecificPart(
            reference.pointer,
            _id_addDataSchemeSpecificPart as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .check();
  }

  static final _id_countDataSchemeSpecificParts = _class.instanceMethodId(
    r'countDataSchemeSpecificParts',
    r'()I',
  );

  static final _countDataSchemeSpecificParts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int countDataSchemeSpecificParts()`
  int countDataSchemeSpecificParts() {
    return _countDataSchemeSpecificParts(reference.pointer,
            _id_countDataSchemeSpecificParts as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataSchemeSpecificPart = _class.instanceMethodId(
    r'getDataSchemeSpecificPart',
    r'(I)Landroid/os/PatternMatcher;',
  );

  static final _getDataSchemeSpecificPart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final android.os.PatternMatcher getDataSchemeSpecificPart(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataSchemeSpecificPart(
    int i,
  ) {
    return _getDataSchemeSpecificPart(reference.pointer,
            _id_getDataSchemeSpecificPart as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_hasDataSchemeSpecificPart = _class.instanceMethodId(
    r'hasDataSchemeSpecificPart',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataSchemeSpecificPart = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean hasDataSchemeSpecificPart(java.lang.String string)`
  bool hasDataSchemeSpecificPart(
    jni.JString string,
  ) {
    return _hasDataSchemeSpecificPart(
            reference.pointer,
            _id_hasDataSchemeSpecificPart as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_schemeSpecificPartsIterator = _class.instanceMethodId(
    r'schemeSpecificPartsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _schemeSpecificPartsIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator schemeSpecificPartsIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JObject> schemeSpecificPartsIterator() {
    return _schemeSpecificPartsIterator(reference.pointer,
            _id_schemeSpecificPartsIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JObjectType()));
  }

  static final _id_addDataAuthority = _class.instanceMethodId(
    r'addDataAuthority',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _addDataAuthority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public final void addDataAuthority(java.lang.String string, java.lang.String string1)`
  void addDataAuthority(
    jni.JString string,
    jni.JString string1,
  ) {
    _addDataAuthority(
            reference.pointer,
            _id_addDataAuthority as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_countDataAuthorities = _class.instanceMethodId(
    r'countDataAuthorities',
    r'()I',
  );

  static final _countDataAuthorities = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int countDataAuthorities()`
  int countDataAuthorities() {
    return _countDataAuthorities(
            reference.pointer, _id_countDataAuthorities as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataAuthority = _class.instanceMethodId(
    r'getDataAuthority',
    r'(I)Landroid/content/IntentFilter$AuthorityEntry;',
  );

  static final _getDataAuthority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final android.content.IntentFilter$AuthorityEntry getDataAuthority(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  IntentFilter_AuthorityEntry getDataAuthority(
    int i,
  ) {
    return _getDataAuthority(
            reference.pointer, _id_getDataAuthority as jni.JMethodIDPtr, i)
        .object(const $IntentFilter_AuthorityEntryType());
  }

  static final _id_hasDataAuthority = _class.instanceMethodId(
    r'hasDataAuthority',
    r'(Landroid/net/Uri;)Z',
  );

  static final _hasDataAuthority = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean hasDataAuthority(android.net.Uri uri)`
  bool hasDataAuthority(
    jni.JObject uri,
  ) {
    return _hasDataAuthority(reference.pointer,
            _id_hasDataAuthority as jni.JMethodIDPtr, uri.reference.pointer)
        .boolean;
  }

  static final _id_authoritiesIterator = _class.instanceMethodId(
    r'authoritiesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _authoritiesIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator authoritiesIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<IntentFilter_AuthorityEntry> authoritiesIterator() {
    return _authoritiesIterator(
            reference.pointer, _id_authoritiesIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType($IntentFilter_AuthorityEntryType()));
  }

  static final _id_addDataPath = _class.instanceMethodId(
    r'addDataPath',
    r'(Ljava/lang/String;I)V',
  );

  static final _addDataPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public final void addDataPath(java.lang.String string, int i)`
  void addDataPath(
    jni.JString string,
    int i,
  ) {
    _addDataPath(reference.pointer, _id_addDataPath as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .check();
  }

  static final _id_countDataPaths = _class.instanceMethodId(
    r'countDataPaths',
    r'()I',
  );

  static final _countDataPaths = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int countDataPaths()`
  int countDataPaths() {
    return _countDataPaths(
            reference.pointer, _id_countDataPaths as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataPath = _class.instanceMethodId(
    r'getDataPath',
    r'(I)Landroid/os/PatternMatcher;',
  );

  static final _getDataPath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final android.os.PatternMatcher getDataPath(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataPath(
    int i,
  ) {
    return _getDataPath(
            reference.pointer, _id_getDataPath as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_hasDataPath = _class.instanceMethodId(
    r'hasDataPath',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean hasDataPath(java.lang.String string)`
  bool hasDataPath(
    jni.JString string,
  ) {
    return _hasDataPath(reference.pointer, _id_hasDataPath as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_pathsIterator = _class.instanceMethodId(
    r'pathsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _pathsIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator pathsIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JObject> pathsIterator() {
    return _pathsIterator(
            reference.pointer, _id_pathsIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JObjectType()));
  }

  static final _id_matchDataAuthority = _class.instanceMethodId(
    r'matchDataAuthority',
    r'(Landroid/net/Uri;)I',
  );

  static final _matchDataAuthority = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final int matchDataAuthority(android.net.Uri uri)`
  int matchDataAuthority(
    jni.JObject uri,
  ) {
    return _matchDataAuthority(reference.pointer,
            _id_matchDataAuthority as jni.JMethodIDPtr, uri.reference.pointer)
        .integer;
  }

  static final _id_matchData = _class.instanceMethodId(
    r'matchData',
    r'(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)I',
  );

  static final _matchData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final int matchData(java.lang.String string, java.lang.String string1, android.net.Uri uri)`
  int matchData(
    jni.JString string,
    jni.JString string1,
    jni.JObject uri,
  ) {
    return _matchData(
            reference.pointer,
            _id_matchData as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            uri.reference.pointer)
        .integer;
  }

  static final _id_addCategory = _class.instanceMethodId(
    r'addCategory',
    r'(Ljava/lang/String;)V',
  );

  static final _addCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void addCategory(java.lang.String string)`
  void addCategory(
    jni.JString string,
  ) {
    _addCategory(reference.pointer, _id_addCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_countCategories = _class.instanceMethodId(
    r'countCategories',
    r'()I',
  );

  static final _countCategories = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int countCategories()`
  int countCategories() {
    return _countCategories(
            reference.pointer, _id_countCategories as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCategory = _class.instanceMethodId(
    r'getCategory',
    r'(I)Ljava/lang/String;',
  );

  static final _getCategory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getCategory(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCategory(
    int i,
  ) {
    return _getCategory(
            reference.pointer, _id_getCategory as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_hasCategory = _class.instanceMethodId(
    r'hasCategory',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean hasCategory(java.lang.String string)`
  bool hasCategory(
    jni.JString string,
  ) {
    return _hasCategory(reference.pointer, _id_hasCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_categoriesIterator = _class.instanceMethodId(
    r'categoriesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _categoriesIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator categoriesIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JString> categoriesIterator() {
    return _categoriesIterator(
            reference.pointer, _id_categoriesIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JStringType()));
  }

  static final _id_matchCategories = _class.instanceMethodId(
    r'matchCategories',
    r'(Ljava/util/Set;)Ljava/lang/String;',
  );

  static final _matchCategories = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final java.lang.String matchCategories(java.util.Set set)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString matchCategories(
    jni.JSet<jni.JString> set0,
  ) {
    return _matchCategories(reference.pointer,
            _id_matchCategories as jni.JMethodIDPtr, set0.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_asPredicate = _class.instanceMethodId(
    r'asPredicate',
    r'()Ljava/util/function/Predicate;',
  );

  static final _asPredicate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.function.Predicate asPredicate()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject asPredicate() {
    return _asPredicate(reference.pointer, _id_asPredicate as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_asPredicateWithTypeResolution = _class.instanceMethodId(
    r'asPredicateWithTypeResolution',
    r'(Landroid/content/ContentResolver;)Ljava/util/function/Predicate;',
  );

  static final _asPredicateWithTypeResolution = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public java.util.function.Predicate asPredicateWithTypeResolution(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject asPredicateWithTypeResolution(
    jni.JObject contentResolver,
  ) {
    return _asPredicateWithTypeResolution(
            reference.pointer,
            _id_asPredicateWithTypeResolution as jni.JMethodIDPtr,
            contentResolver.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_match = _class.instanceMethodId(
    r'match',
    r'(Landroid/content/ContentResolver;Landroid/content/Intent;ZLjava/lang/String;)I',
  );

  static final _match = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final int match(android.content.ContentResolver contentResolver, android.content.Intent intent, boolean z, java.lang.String string)`
  int match(
    jni.JObject contentResolver,
    intent_.Intent intent,
    bool z,
    jni.JString string,
  ) {
    return _match(
            reference.pointer,
            _id_match as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            intent.reference.pointer,
            z ? 1 : 0,
            string.reference.pointer)
        .integer;
  }

  static final _id_match1 = _class.instanceMethodId(
    r'match',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/util/Set;Ljava/lang/String;)I',
  );

  static final _match1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final int match(java.lang.String string, java.lang.String string1, java.lang.String string2, android.net.Uri uri, java.util.Set set, java.lang.String string3)`
  int match1(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JObject uri,
    jni.JSet<jni.JString> set0,
    jni.JString string3,
  ) {
    return _match1(
            reference.pointer,
            _id_match1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            uri.reference.pointer,
            set0.reference.pointer,
            string3.reference.pointer)
        .integer;
  }

  static final _id_writeToXml = _class.instanceMethodId(
    r'writeToXml',
    r'(Lorg/xmlpull/v1/XmlSerializer;)V',
  );

  static final _writeToXml = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void writeToXml(org.xmlpull.v1.XmlSerializer xmlSerializer)`
  void writeToXml(
    jni.JObject xmlSerializer,
  ) {
    _writeToXml(reference.pointer, _id_writeToXml as jni.JMethodIDPtr,
            xmlSerializer.reference.pointer)
        .check();
  }

  static final _id_readFromXml = _class.instanceMethodId(
    r'readFromXml',
    r'(Lorg/xmlpull/v1/XmlPullParser;)V',
  );

  static final _readFromXml = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void readFromXml(org.xmlpull.v1.XmlPullParser xmlPullParser)`
  void readFromXml(
    jni.JObject xmlPullParser,
  ) {
    _readFromXml(reference.pointer, _id_readFromXml as jni.JMethodIDPtr,
            xmlPullParser.reference.pointer)
        .check();
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Landroid/util/Printer;Ljava/lang/String;)V',
  );

  static final _dump = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void dump(android.util.Printer printer, java.lang.String string)`
  void dump(
    jni.JObject printer,
    jni.JString string,
  ) {
    _dump(reference.pointer, _id_dump as jni.JMethodIDPtr,
            printer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public final void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $IntentFilterType extends jni.JObjType<IntentFilter> {
  const $IntentFilterType();

  @override
  String get signature => r'Landroid/content/IntentFilter;';

  @override
  IntentFilter fromReference(jni.JReference reference) =>
      IntentFilter.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentFilterType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentFilterType) &&
        other is $IntentFilterType;
  }
}
