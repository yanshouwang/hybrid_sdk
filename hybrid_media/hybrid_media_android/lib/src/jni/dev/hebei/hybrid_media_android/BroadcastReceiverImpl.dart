// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../android/content/Context.dart' as context_;

import '../../../android/content/Intent.dart' as intent_;

/// from: `dev.hebei.hybrid_media_android.BroadcastReceiverImpl$BroadcastCallback`
class BroadcastReceiverImpl_BroadcastCallback extends jni.JObject {
  @override
  late final jni.JObjType<BroadcastReceiverImpl_BroadcastCallback> $type = type;

  BroadcastReceiverImpl_BroadcastCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'dev/hebei/hybrid_media_android/BroadcastReceiverImpl$BroadcastCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $BroadcastReceiverImpl_BroadcastCallbackType();
  static final _id_onReceive = _class.instanceMethodId(
    r'onReceive',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _onReceive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onReceive(android.content.Context context, android.content.Intent intent)`
  void onReceive(
    context_.Context context,
    intent_.Intent intent,
  ) {
    _onReceive(reference.pointer, _id_onReceive as jni.JMethodIDPtr,
            context.reference.pointer, intent.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $BroadcastReceiverImpl_BroadcastCallbackImpl> _$impls =
      {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onReceive(Landroid/content/Context;Landroid/content/Intent;)V') {
        _$impls[$p]!.onReceive(
          $a[0].castTo(const context_.$ContextType(), releaseOriginal: true),
          $a[1].castTo(const intent_.$IntentType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory BroadcastReceiverImpl_BroadcastCallback.implement(
    $BroadcastReceiverImpl_BroadcastCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = BroadcastReceiverImpl_BroadcastCallback.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'dev.hebei.hybrid_media_android.BroadcastReceiverImpl$BroadcastCallback',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $BroadcastReceiverImpl_BroadcastCallbackImpl {
  factory $BroadcastReceiverImpl_BroadcastCallbackImpl({
    required void Function(context_.Context context, intent_.Intent intent)
        onReceive,
  }) = _$BroadcastReceiverImpl_BroadcastCallbackImpl;

  void onReceive(context_.Context context, intent_.Intent intent);
}

class _$BroadcastReceiverImpl_BroadcastCallbackImpl
    implements $BroadcastReceiverImpl_BroadcastCallbackImpl {
  _$BroadcastReceiverImpl_BroadcastCallbackImpl({
    required void Function(context_.Context context, intent_.Intent intent)
        onReceive,
  }) : _onReceive = onReceive;

  final void Function(context_.Context context, intent_.Intent intent)
      _onReceive;

  void onReceive(context_.Context context, intent_.Intent intent) {
    return _onReceive(context, intent);
  }
}

final class $BroadcastReceiverImpl_BroadcastCallbackType
    extends jni.JObjType<BroadcastReceiverImpl_BroadcastCallback> {
  const $BroadcastReceiverImpl_BroadcastCallbackType();

  @override
  String get signature =>
      r'Ldev/hebei/hybrid_media_android/BroadcastReceiverImpl$BroadcastCallback;';

  @override
  BroadcastReceiverImpl_BroadcastCallback fromReference(
          jni.JReference reference) =>
      BroadcastReceiverImpl_BroadcastCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BroadcastReceiverImpl_BroadcastCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BroadcastReceiverImpl_BroadcastCallbackType) &&
        other is $BroadcastReceiverImpl_BroadcastCallbackType;
  }
}

/// from: `dev.hebei.hybrid_media_android.BroadcastReceiverImpl`
class BroadcastReceiverImpl extends jni.JObject {
  @override
  late final jni.JObjType<BroadcastReceiverImpl> $type = type;

  BroadcastReceiverImpl.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'dev/hebei/hybrid_media_android/BroadcastReceiverImpl');

  /// The type which includes information such as the signature of this class.
  static const type = $BroadcastReceiverImplType();
  static final _id_new0 = _class.constructorId(
    r'(Ldev/hebei/hybrid_media_android/BroadcastReceiverImpl$BroadcastCallback;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(dev.hebei.hybrid_media_android.BroadcastReceiverImpl$BroadcastCallback broadcastCallback)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BroadcastReceiverImpl(
    BroadcastReceiverImpl_BroadcastCallback broadcastCallback,
  ) {
    return BroadcastReceiverImpl.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, broadcastCallback.reference.pointer)
        .reference);
  }

  static final _id_onReceive = _class.instanceMethodId(
    r'onReceive',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _onReceive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void onReceive(android.content.Context context, android.content.Intent intent)`
  void onReceive(
    context_.Context context,
    intent_.Intent intent,
  ) {
    _onReceive(reference.pointer, _id_onReceive as jni.JMethodIDPtr,
            context.reference.pointer, intent.reference.pointer)
        .check();
  }
}

final class $BroadcastReceiverImplType
    extends jni.JObjType<BroadcastReceiverImpl> {
  const $BroadcastReceiverImplType();

  @override
  String get signature =>
      r'Ldev/hebei/hybrid_media_android/BroadcastReceiverImpl;';

  @override
  BroadcastReceiverImpl fromReference(jni.JReference reference) =>
      BroadcastReceiverImpl.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BroadcastReceiverImplType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiverImplType) &&
        other is $BroadcastReceiverImplType;
  }
}
