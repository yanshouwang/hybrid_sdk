// ignore_for_file: use_super_parameters
// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../_init.dart";

/// from: android.net.Uri$Builder
class Uri_Builder extends jni.JObject {
  @override
  late final jni.JObjType<Uri_Builder> $type = type;

  Uri_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Uri_BuilderType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "Uri_Builder__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Uri_Builder() {
    return Uri_Builder.fromRef(_new0().object);
  }

  static final _scheme = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__scheme")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder scheme(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder scheme(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_scheme(reference, string.reference).object);
  }

  static final _opaquePart = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__opaquePart")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder opaquePart(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder opaquePart(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_opaquePart(reference, string.reference).object);
  }

  static final _encodedOpaquePart = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__encodedOpaquePart")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedOpaquePart(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedOpaquePart(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_encodedOpaquePart(reference, string.reference).object);
  }

  static final _authority = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__authority")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder authority(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder authority(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_authority(reference, string.reference).object);
  }

  static final _encodedAuthority = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__encodedAuthority")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedAuthority(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedAuthority(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_encodedAuthority(reference, string.reference).object);
  }

  static final _path = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__path")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder path(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder path(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_path(reference, string.reference).object);
  }

  static final _encodedPath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__encodedPath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedPath(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_encodedPath(reference, string.reference).object);
  }

  static final _appendPath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__appendPath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder appendPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendPath(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_appendPath(reference, string.reference).object);
  }

  static final _appendEncodedPath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__appendEncodedPath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder appendEncodedPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendEncodedPath(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_appendEncodedPath(reference, string.reference).object);
  }

  static final _query = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__query")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder query(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder query(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_query(reference, string.reference).object);
  }

  static final _encodedQuery = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__encodedQuery")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedQuery(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedQuery(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_encodedQuery(reference, string.reference).object);
  }

  static final _fragment = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__fragment")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder fragment(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder fragment(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_fragment(reference, string.reference).object);
  }

  static final _encodedFragment = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__encodedFragment")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedFragment(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedFragment(
    jni.JString string,
  ) {
    return const $Uri_BuilderType()
        .fromRef(_encodedFragment(reference, string.reference).object);
  }

  static final _appendQueryParameter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri_Builder__appendQueryParameter")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder appendQueryParameter(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendQueryParameter(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $Uri_BuilderType().fromRef(
        _appendQueryParameter(reference, string.reference, string1.reference)
            .object);
  }

  static final _clearQuery = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri_Builder__clearQuery")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder clearQuery()
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder clearQuery() {
    return const $Uri_BuilderType().fromRef(_clearQuery(reference).object);
  }

  static final _build = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri build()
  /// The returned object must be released after use, by calling the [release] method.
  Uri build() {
    return const $UriType().fromRef(_build(reference).object);
  }

  static final _toString1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri_Builder__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(_toString1(reference).object);
  }
}

final class $Uri_BuilderType extends jni.JObjType<Uri_Builder> {
  const $Uri_BuilderType();

  @override
  String get signature => r"Landroid/net/Uri$Builder;";

  @override
  Uri_Builder fromRef(jni.JObjectPtr ref) => Uri_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Uri_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri_BuilderType) && other is $Uri_BuilderType;
  }
}

/// from: android.net.Uri
class Uri extends jni.JObject {
  @override
  late final jni.JObjType<Uri> $type = type;

  Uri.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UriType();
  static final _get_CREATOR =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Uri__CREATOR")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      const jni.JObjectType().fromRef(_get_CREATOR().object);

  static final _get_EMPTY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("get_Uri__EMPTY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.net.Uri EMPTY
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EMPTY => const $UriType().fromRef(_get_EMPTY().object);

  static final _isHierarchical = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__isHierarchical")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isHierarchical()
  bool isHierarchical() {
    return _isHierarchical(reference).boolean;
  }

  static final _isOpaque = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__isOpaque")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isOpaque()
  bool isOpaque() {
    return _isOpaque(reference).boolean;
  }

  static final _isRelative = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__isRelative")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isRelative()
  bool isRelative() {
    return _isRelative(reference).boolean;
  }

  static final _isAbsolute = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__isAbsolute")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAbsolute()
  bool isAbsolute() {
    return _isAbsolute(reference).boolean;
  }

  static final _getScheme = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__getScheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getScheme() {
    return const jni.JStringType().fromRef(_getScheme(reference).object);
  }

  static final _getSchemeSpecificPart = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getSchemeSpecificPart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getSchemeSpecificPart()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSchemeSpecificPart() {
    return const jni.JStringType()
        .fromRef(_getSchemeSpecificPart(reference).object);
  }

  static final _getEncodedSchemeSpecificPart = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getEncodedSchemeSpecificPart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getEncodedSchemeSpecificPart()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedSchemeSpecificPart() {
    return const jni.JStringType()
        .fromRef(_getEncodedSchemeSpecificPart(reference).object);
  }

  static final _getAuthority = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getAuthority")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getAuthority()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAuthority() {
    return const jni.JStringType().fromRef(_getAuthority(reference).object);
  }

  static final _getEncodedAuthority = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getEncodedAuthority")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getEncodedAuthority()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedAuthority() {
    return const jni.JStringType()
        .fromRef(_getEncodedAuthority(reference).object);
  }

  static final _getUserInfo = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getUserInfo")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUserInfo() {
    return const jni.JStringType().fromRef(_getUserInfo(reference).object);
  }

  static final _getEncodedUserInfo = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getEncodedUserInfo")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getEncodedUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedUserInfo() {
    return const jni.JStringType()
        .fromRef(_getEncodedUserInfo(reference).object);
  }

  static final _getHost = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__getHost")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getHost()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHost() {
    return const jni.JStringType().fromRef(_getHost(reference).object);
  }

  static final _getPort = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__getPort")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getPort()
  int getPort() {
    return _getPort(reference).integer;
  }

  static final _getPath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__getPath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPath() {
    return const jni.JStringType().fromRef(_getPath(reference).object);
  }

  static final _getEncodedPath = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getEncodedPath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getEncodedPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedPath() {
    return const jni.JStringType().fromRef(_getEncodedPath(reference).object);
  }

  static final _getQuery = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__getQuery")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getQuery()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getQuery() {
    return const jni.JStringType().fromRef(_getQuery(reference).object);
  }

  static final _getEncodedQuery = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getEncodedQuery")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getEncodedQuery()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedQuery() {
    return const jni.JStringType().fromRef(_getEncodedQuery(reference).object);
  }

  static final _getFragment = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getFragment")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFragment() {
    return const jni.JStringType().fromRef(_getFragment(reference).object);
  }

  static final _getEncodedFragment = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getEncodedFragment")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getEncodedFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedFragment() {
    return const jni.JStringType()
        .fromRef(_getEncodedFragment(reference).object);
  }

  static final _getPathSegments = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getPathSegments")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.List getPathSegments()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getPathSegments() {
    return const jni.JListType(jni.JStringType())
        .fromRef(_getPathSegments(reference).object);
  }

  static final _getLastPathSegment = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getLastPathSegment")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getLastPathSegment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLastPathSegment() {
    return const jni.JStringType()
        .fromRef(_getLastPathSegment(reference).object);
  }

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(
    jni.JObject object,
  ) {
    return _equals1(reference, object.reference).boolean;
  }

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference).integer;
  }

  static final _compareTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__compareTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(android.net.Uri uri)
  int compareTo(
    Uri uri,
  ) {
    return _compareTo(reference, uri.reference).integer;
  }

  static final _toString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(_toString1(reference).object);
  }

  static final _buildUpon = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__buildUpon")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.net.Uri$Builder buildUpon()
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder buildUpon() {
    return const $Uri_BuilderType().fromRef(_buildUpon(reference).object);
  }

  static final _parse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__parse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri parse(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri parse(
    jni.JString string,
  ) {
    return const $UriType().fromRef(_parse(string.reference).object);
  }

  static final _fromFile = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__fromFile")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri fromFile(java.io.File file)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri fromFile(
    jni.JObject file,
  ) {
    return const $UriType().fromRef(_fromFile(file.reference).object);
  }

  static final _fromParts = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__fromParts")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri fromParts(java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri fromParts(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return const $UriType().fromRef(
        _fromParts(string.reference, string1.reference, string2.reference)
            .object);
  }

  static final _getQueryParameterNames = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__getQueryParameterNames")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set getQueryParameterNames()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getQueryParameterNames() {
    return const jni.JSetType(jni.JStringType())
        .fromRef(_getQueryParameterNames(reference).object);
  }

  static final _getQueryParameters = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__getQueryParameters")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getQueryParameters(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getQueryParameters(
    jni.JString string,
  ) {
    return const jni.JListType(jni.JStringType())
        .fromRef(_getQueryParameters(reference, string.reference).object);
  }

  static final _getQueryParameter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__getQueryParameter")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getQueryParameter(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getQueryParameter(
    jni.JString string,
  ) {
    return const jni.JStringType()
        .fromRef(_getQueryParameter(reference, string.reference).object);
  }

  static final _getBooleanQueryParameter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Uri__getBooleanQueryParameter")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getBooleanQueryParameter(java.lang.String string, boolean z)
  bool getBooleanQueryParameter(
    jni.JString string,
    bool z,
  ) {
    return _getBooleanQueryParameter(reference, string.reference, z ? 1 : 0)
        .boolean;
  }

  static final _normalizeScheme = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Uri__normalizeScheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri normalizeScheme()
  /// The returned object must be released after use, by calling the [release] method.
  Uri normalizeScheme() {
    return const $UriType().fromRef(_normalizeScheme(reference).object);
  }

  static final _writeToParcel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__writeToParcel")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void writeToParcel(android.os.Parcel parcel, android.net.Uri uri)
  static void writeToParcel(
    jni.JObject parcel,
    Uri uri,
  ) {
    return _writeToParcel(parcel.reference, uri.reference).check();
  }

  static final _encode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__encode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String encode(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString encode(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(_encode(string.reference).object);
  }

  static final _encode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__encode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String encode(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString encode1(
    jni.JString string,
    jni.JString string1,
  ) {
    return const jni.JStringType()
        .fromRef(_encode1(string.reference, string1.reference).object);
  }

  static final _decode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Uri__decode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String decode(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString decode(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(_decode(string.reference).object);
  }

  static final _withAppendedPath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__withAppendedPath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri withAppendedPath(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri withAppendedPath(
    Uri uri,
    jni.JString string,
  ) {
    return const $UriType()
        .fromRef(_withAppendedPath(uri.reference, string.reference).object);
  }

  static final _compareTo1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Uri__compareTo1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(
    jni.JObject object,
  ) {
    return _compareTo1(reference, object.reference).integer;
  }
}

final class $UriType extends jni.JObjType<Uri> {
  const $UriType();

  @override
  String get signature => r"Landroid/net/Uri;";

  @override
  Uri fromRef(jni.JObjectPtr ref) => Uri.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UriType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UriType) && other is $UriType;
  }
}
