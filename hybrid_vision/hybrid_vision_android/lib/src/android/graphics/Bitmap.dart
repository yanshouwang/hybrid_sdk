// ignore_for_file: use_super_parameters
// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../_init.dart";

/// from: android.graphics.Bitmap$CompressFormat
class Bitmap_CompressFormat extends jni.JObject {
  @override
  late final jni.JObjType<Bitmap_CompressFormat> $type = type;

  Bitmap_CompressFormat.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Bitmap_CompressFormatType();
  static final _get_JPEG =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_CompressFormat__JPEG")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$CompressFormat JPEG
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_CompressFormat get JPEG =>
      const $Bitmap_CompressFormatType().fromRef(_get_JPEG().object);

  static final _get_PNG =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_CompressFormat__PNG")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$CompressFormat PNG
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_CompressFormat get PNG =>
      const $Bitmap_CompressFormatType().fromRef(_get_PNG().object);

  static final _get_WEBP =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_CompressFormat__WEBP")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$CompressFormat WEBP
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_CompressFormat get WEBP =>
      const $Bitmap_CompressFormatType().fromRef(_get_WEBP().object);

  static final _get_WEBP_LOSSY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_CompressFormat__WEBP_LOSSY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$CompressFormat WEBP_LOSSY
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_CompressFormat get WEBP_LOSSY =>
      const $Bitmap_CompressFormatType().fromRef(_get_WEBP_LOSSY().object);

  static final _get_WEBP_LOSSLESS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_CompressFormat__WEBP_LOSSLESS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$CompressFormat WEBP_LOSSLESS
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_CompressFormat get WEBP_LOSSLESS =>
      const $Bitmap_CompressFormatType().fromRef(_get_WEBP_LOSSLESS().object);

  static final _values =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Bitmap_CompressFormat__values")
          .asFunction<jni.JniResult Function()>();

  /// from: static public android.graphics.Bitmap$CompressFormat[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<Bitmap_CompressFormat> values() {
    return const jni.JArrayType($Bitmap_CompressFormatType())
        .fromRef(_values().object);
  }

  static final _valueOf = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap_CompressFormat__valueOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap$CompressFormat valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_CompressFormat valueOf(
    jni.JString string,
  ) {
    return const $Bitmap_CompressFormatType()
        .fromRef(_valueOf(string.reference).object);
  }
}

final class $Bitmap_CompressFormatType
    extends jni.JObjType<Bitmap_CompressFormat> {
  const $Bitmap_CompressFormatType();

  @override
  String get signature => r"Landroid/graphics/Bitmap$CompressFormat;";

  @override
  Bitmap_CompressFormat fromRef(jni.JObjectPtr ref) =>
      Bitmap_CompressFormat.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Bitmap_CompressFormatType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Bitmap_CompressFormatType) &&
        other is $Bitmap_CompressFormatType;
  }
}

/// from: android.graphics.Bitmap$Config
class Bitmap_Config extends jni.JObject {
  @override
  late final jni.JObjType<Bitmap_Config> $type = type;

  Bitmap_Config.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Bitmap_ConfigType();
  static final _get_ALPHA_8 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_Config__ALPHA_8")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$Config ALPHA_8
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_Config get ALPHA_8 =>
      const $Bitmap_ConfigType().fromRef(_get_ALPHA_8().object);

  static final _get_RGB_565 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_Config__RGB_565")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$Config RGB_565
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_Config get RGB_565 =>
      const $Bitmap_ConfigType().fromRef(_get_RGB_565().object);

  static final _get_ARGB_4444 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_Config__ARGB_4444")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$Config ARGB_4444
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_Config get ARGB_4444 =>
      const $Bitmap_ConfigType().fromRef(_get_ARGB_4444().object);

  static final _get_ARGB_8888 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_Config__ARGB_8888")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$Config ARGB_8888
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_Config get ARGB_8888 =>
      const $Bitmap_ConfigType().fromRef(_get_ARGB_8888().object);

  static final _get_RGBA_F16 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_Config__RGBA_F16")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$Config RGBA_F16
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_Config get RGBA_F16 =>
      const $Bitmap_ConfigType().fromRef(_get_RGBA_F16().object);

  static final _get_HARDWARE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_Config__HARDWARE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$Config HARDWARE
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_Config get HARDWARE =>
      const $Bitmap_ConfigType().fromRef(_get_HARDWARE().object);

  static final _get_RGBA_1010102 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap_Config__RGBA_1010102")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.graphics.Bitmap$Config RGBA_1010102
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_Config get RGBA_1010102 =>
      const $Bitmap_ConfigType().fromRef(_get_RGBA_1010102().object);

  static final _values =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Bitmap_Config__values")
          .asFunction<jni.JniResult Function()>();

  /// from: static public android.graphics.Bitmap$Config[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<Bitmap_Config> values() {
    return const jni.JArrayType($Bitmap_ConfigType()).fromRef(_values().object);
  }

  static final _valueOf = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap_Config__valueOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap$Config valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap_Config valueOf(
    jni.JString string,
  ) {
    return const $Bitmap_ConfigType()
        .fromRef(_valueOf(string.reference).object);
  }
}

final class $Bitmap_ConfigType extends jni.JObjType<Bitmap_Config> {
  const $Bitmap_ConfigType();

  @override
  String get signature => r"Landroid/graphics/Bitmap$Config;";

  @override
  Bitmap_Config fromRef(jni.JObjectPtr ref) => Bitmap_Config.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Bitmap_ConfigType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Bitmap_ConfigType) &&
        other is $Bitmap_ConfigType;
  }
}

/// from: android.graphics.Bitmap
class Bitmap extends jni.JObject {
  @override
  late final jni.JObjType<Bitmap> $type = type;

  Bitmap.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $BitmapType();
  static final _get_CREATOR =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Bitmap__CREATOR")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      const jni.JObjectType().fromRef(_get_CREATOR().object);

  /// from: static public final int DENSITY_NONE
  static const DENSITY_NONE = 0;

  static final _getDensity = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getDensity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getDensity()
  int getDensity() {
    return _getDensity(reference).integer;
  }

  static final _setDensity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Bitmap__setDensity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setDensity(int i)
  void setDensity(
    int i,
  ) {
    return _setDensity(reference, i).check();
  }

  static final _reconfigure = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>("Bitmap__reconfigure")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void reconfigure(int i, int i1, android.graphics.Bitmap$Config config)
  void reconfigure(
    int i,
    int i1,
    Bitmap_Config config,
  ) {
    return _reconfigure(reference, i, i1, config.reference).check();
  }

  static final _setWidth = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Bitmap__setWidth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setWidth(int i)
  void setWidth(
    int i,
  ) {
    return _setWidth(reference, i).check();
  }

  static final _setHeight = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Bitmap__setHeight")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setHeight(int i)
  void setHeight(
    int i,
  ) {
    return _setHeight(reference, i).check();
  }

  static final _setConfig = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__setConfig")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setConfig(android.graphics.Bitmap$Config config)
  void setConfig(
    Bitmap_Config config,
  ) {
    return _setConfig(reference, config.reference).check();
  }

  static final _recycle = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Bitmap__recycle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void recycle()
  void recycle() {
    return _recycle(reference).check();
  }

  static final _isRecycled = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__isRecycled")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isRecycled()
  bool isRecycled() {
    return _isRecycled(reference).boolean;
  }

  static final _getGenerationId = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getGenerationId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getGenerationId()
  int getGenerationId() {
    return _getGenerationId(reference).integer;
  }

  static final _copyPixelsToBuffer = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__copyPixelsToBuffer")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void copyPixelsToBuffer(java.nio.Buffer buffer)
  void copyPixelsToBuffer(
    jni.JBuffer buffer,
  ) {
    return _copyPixelsToBuffer(reference, buffer.reference).check();
  }

  static final _copyPixelsFromBuffer = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__copyPixelsFromBuffer")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void copyPixelsFromBuffer(java.nio.Buffer buffer)
  void copyPixelsFromBuffer(
    jni.JBuffer buffer,
  ) {
    return _copyPixelsFromBuffer(reference, buffer.reference).check();
  }

  static final _copy = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Bitmap__copy")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.graphics.Bitmap copy(android.graphics.Bitmap$Config config, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  Bitmap copy(
    Bitmap_Config config,
    bool z,
  ) {
    return const $BitmapType()
        .fromRef(_copy(reference, config.reference, z ? 1 : 0).object);
  }

  static final _asShared = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__asShared")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Bitmap asShared()
  /// The returned object must be released after use, by calling the [release] method.
  Bitmap asShared() {
    return const $BitmapType().fromRef(_asShared(reference).object);
  }

  static final _wrapHardwareBuffer = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__wrapHardwareBuffer")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer hardwareBuffer, android.graphics.ColorSpace colorSpace)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap wrapHardwareBuffer(
    jni.JObject hardwareBuffer,
    jni.JObject colorSpace,
  ) {
    return const $BitmapType().fromRef(
        _wrapHardwareBuffer(hardwareBuffer.reference, colorSpace.reference)
            .object);
  }

  static final _createScaledBitmap = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Uint8)>>("Bitmap__createScaledBitmap")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: static public android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap bitmap, int i, int i1, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createScaledBitmap(
    Bitmap bitmap,
    int i,
    int i1,
    bool z,
  ) {
    return const $BitmapType().fromRef(
        _createScaledBitmap(bitmap.reference, i, i1, z ? 1 : 0).object);
  }

  static final _createBitmap = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__createBitmap")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.graphics.Bitmap bitmap)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap(
    Bitmap bitmap,
  ) {
    return const $BitmapType().fromRef(_createBitmap(bitmap.reference).object);
  }

  static final _createBitmap1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Int32, ffi.Int32)>>("Bitmap__createBitmap1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int, int)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.graphics.Bitmap bitmap, int i, int i1, int i2, int i3)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap1(
    Bitmap bitmap,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return const $BitmapType()
        .fromRef(_createBitmap1(bitmap.reference, i, i1, i2, i3).object);
  }

  static final _createBitmap2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Bitmap__createBitmap2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int, int,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.graphics.Bitmap bitmap, int i, int i1, int i2, int i3, android.graphics.Matrix matrix, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap2(
    Bitmap bitmap,
    int i,
    int i1,
    int i2,
    int i3,
    jni.JObject matrix,
    bool z,
  ) {
    return const $BitmapType().fromRef(_createBitmap2(
            bitmap.reference, i, i1, i2, i3, matrix.reference, z ? 1 : 0)
        .object);
  }

  static final _createBitmap3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap3")
      .asFunction<jni.JniResult Function(int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(int i, int i1, android.graphics.Bitmap$Config config)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap3(
    int i,
    int i1,
    Bitmap_Config config,
  ) {
    return const $BitmapType()
        .fromRef(_createBitmap3(i, i1, config.reference).object);
  }

  static final _createBitmap4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.util.DisplayMetrics displayMetrics, int i, int i1, android.graphics.Bitmap$Config config)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap4(
    jni.JObject displayMetrics,
    int i,
    int i1,
    Bitmap_Config config,
  ) {
    return const $BitmapType().fromRef(
        _createBitmap4(displayMetrics.reference, i, i1, config.reference)
            .object);
  }

  static final _createBitmap5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32, ffi.Int32,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Bitmap__createBitmap5")
      .asFunction<
          jni.JniResult Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.graphics.Bitmap createBitmap(int i, int i1, android.graphics.Bitmap$Config config, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap5(
    int i,
    int i1,
    Bitmap_Config config,
    bool z,
  ) {
    return const $BitmapType()
        .fromRef(_createBitmap5(i, i1, config.reference, z ? 1 : 0).object);
  }

  static final _createBitmap6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap6")
      .asFunction<
          jni.JniResult Function(
              int, int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(int i, int i1, android.graphics.Bitmap$Config config, boolean z, android.graphics.ColorSpace colorSpace)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap6(
    int i,
    int i1,
    Bitmap_Config config,
    bool z,
    jni.JObject colorSpace,
  ) {
    return const $BitmapType().fromRef(
        _createBitmap6(i, i1, config.reference, z ? 1 : 0, colorSpace.reference)
            .object);
  }

  static final _createBitmap7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Bitmap__createBitmap7")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.util.DisplayMetrics displayMetrics, int i, int i1, android.graphics.Bitmap$Config config, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap7(
    jni.JObject displayMetrics,
    int i,
    int i1,
    Bitmap_Config config,
    bool z,
  ) {
    return const $BitmapType().fromRef(_createBitmap7(
            displayMetrics.reference, i, i1, config.reference, z ? 1 : 0)
        .object);
  }

  static final _createBitmap8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap8")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.util.DisplayMetrics displayMetrics, int i, int i1, android.graphics.Bitmap$Config config, boolean z, android.graphics.ColorSpace colorSpace)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap8(
    jni.JObject displayMetrics,
    int i,
    int i1,
    Bitmap_Config config,
    bool z,
    jni.JObject colorSpace,
  ) {
    return const $BitmapType().fromRef(_createBitmap8(displayMetrics.reference,
            i, i1, config.reference, z ? 1 : 0, colorSpace.reference)
        .object);
  }

  static final _createBitmap9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap9")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(int[] is, int i, int i1, int i2, int i3, android.graphics.Bitmap$Config config)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap9(
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
    int i2,
    int i3,
    Bitmap_Config config,
  ) {
    return const $BitmapType().fromRef(
        _createBitmap9(is0.reference, i, i1, i2, i3, config.reference).object);
  }

  static final _createBitmap10 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap10")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.util.DisplayMetrics displayMetrics, int[] is, int i, int i1, int i2, int i3, android.graphics.Bitmap$Config config)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap10(
    jni.JObject displayMetrics,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
    int i2,
    int i3,
    Bitmap_Config config,
  ) {
    return const $BitmapType().fromRef(_createBitmap10(displayMetrics.reference,
            is0.reference, i, i1, i2, i3, config.reference)
        .object);
  }

  static final _createBitmap11 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap11")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(int[] is, int i, int i1, android.graphics.Bitmap$Config config)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap11(
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
    Bitmap_Config config,
  ) {
    return const $BitmapType().fromRef(
        _createBitmap11(is0.reference, i, i1, config.reference).object);
  }

  static final _createBitmap12 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap12")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.util.DisplayMetrics displayMetrics, int[] is, int i, int i1, android.graphics.Bitmap$Config config)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap12(
    jni.JObject displayMetrics,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
    Bitmap_Config config,
  ) {
    return const $BitmapType().fromRef(_createBitmap12(
            displayMetrics.reference, is0.reference, i, i1, config.reference)
        .object);
  }

  static final _createBitmap13 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__createBitmap13")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.graphics.Picture picture)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap13(
    jni.JObject picture,
  ) {
    return const $BitmapType()
        .fromRef(_createBitmap13(picture.reference).object);
  }

  static final _createBitmap14 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>("Bitmap__createBitmap14")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap createBitmap(android.graphics.Picture picture, int i, int i1, android.graphics.Bitmap$Config config)
  /// The returned object must be released after use, by calling the [release] method.
  static Bitmap createBitmap14(
    jni.JObject picture,
    int i,
    int i1,
    Bitmap_Config config,
  ) {
    return const $BitmapType().fromRef(
        _createBitmap14(picture.reference, i, i1, config.reference).object);
  }

  static final _getNinePatchChunk = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getNinePatchChunk")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getNinePatchChunk()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getNinePatchChunk() {
    return const jni.JArrayType(jni.jbyteType())
        .fromRef(_getNinePatchChunk(reference).object);
  }

  static final _compress = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__compress")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean compress(android.graphics.Bitmap$CompressFormat compressFormat, int i, java.io.OutputStream outputStream)
  bool compress(
    Bitmap_CompressFormat compressFormat,
    int i,
    jni.JObject outputStream,
  ) {
    return _compress(
            reference, compressFormat.reference, i, outputStream.reference)
        .boolean;
  }

  static final _isMutable = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__isMutable")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isMutable()
  bool isMutable() {
    return _isMutable(reference).boolean;
  }

  static final _isPremultiplied = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__isPremultiplied")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPremultiplied()
  bool isPremultiplied() {
    return _isPremultiplied(reference).boolean;
  }

  static final _setPremultiplied = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Bitmap__setPremultiplied")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPremultiplied(boolean z)
  void setPremultiplied(
    bool z,
  ) {
    return _setPremultiplied(reference, z ? 1 : 0).check();
  }

  static final _getWidth = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getWidth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getWidth()
  int getWidth() {
    return _getWidth(reference).integer;
  }

  static final _getHeight = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getHeight")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getHeight()
  int getHeight() {
    return _getHeight(reference).integer;
  }

  static final _getScaledWidth = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__getScaledWidth")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getScaledWidth(android.graphics.Canvas canvas)
  int getScaledWidth(
    jni.JObject canvas,
  ) {
    return _getScaledWidth(reference, canvas.reference).integer;
  }

  static final _getScaledHeight = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__getScaledHeight")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getScaledHeight(android.graphics.Canvas canvas)
  int getScaledHeight(
    jni.JObject canvas,
  ) {
    return _getScaledHeight(reference, canvas.reference).integer;
  }

  static final _getScaledWidth1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__getScaledWidth1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getScaledWidth(android.util.DisplayMetrics displayMetrics)
  int getScaledWidth1(
    jni.JObject displayMetrics,
  ) {
    return _getScaledWidth1(reference, displayMetrics.reference).integer;
  }

  static final _getScaledHeight1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__getScaledHeight1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getScaledHeight(android.util.DisplayMetrics displayMetrics)
  int getScaledHeight1(
    jni.JObject displayMetrics,
  ) {
    return _getScaledHeight1(reference, displayMetrics.reference).integer;
  }

  static final _getScaledWidth2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Bitmap__getScaledWidth2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getScaledWidth(int i)
  int getScaledWidth2(
    int i,
  ) {
    return _getScaledWidth2(reference, i).integer;
  }

  static final _getScaledHeight2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Bitmap__getScaledHeight2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getScaledHeight(int i)
  int getScaledHeight2(
    int i,
  ) {
    return _getScaledHeight2(reference, i).integer;
  }

  static final _getRowBytes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getRowBytes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getRowBytes()
  int getRowBytes() {
    return _getRowBytes(reference).integer;
  }

  static final _getByteCount = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getByteCount")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getByteCount()
  int getByteCount() {
    return _getByteCount(reference).integer;
  }

  static final _getAllocationByteCount = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getAllocationByteCount")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getAllocationByteCount()
  int getAllocationByteCount() {
    return _getAllocationByteCount(reference).integer;
  }

  static final _getConfig = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getConfig")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Bitmap$Config getConfig()
  /// The returned object must be released after use, by calling the [release] method.
  Bitmap_Config getConfig() {
    return const $Bitmap_ConfigType().fromRef(_getConfig(reference).object);
  }

  static final _hasAlpha = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__hasAlpha")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasAlpha()
  bool hasAlpha() {
    return _hasAlpha(reference).boolean;
  }

  static final _setHasAlpha = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Bitmap__setHasAlpha")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setHasAlpha(boolean z)
  void setHasAlpha(
    bool z,
  ) {
    return _setHasAlpha(reference, z ? 1 : 0).check();
  }

  static final _hasMipMap = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__hasMipMap")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasMipMap()
  bool hasMipMap() {
    return _hasMipMap(reference).boolean;
  }

  static final _setHasMipMap = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Bitmap__setHasMipMap")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setHasMipMap(boolean z)
  void setHasMipMap(
    bool z,
  ) {
    return _setHasMipMap(reference, z ? 1 : 0).check();
  }

  static final _getColorSpace = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getColorSpace")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.ColorSpace getColorSpace()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorSpace() {
    return const jni.JObjectType().fromRef(_getColorSpace(reference).object);
  }

  static final _setColorSpace = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__setColorSpace")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setColorSpace(android.graphics.ColorSpace colorSpace)
  void setColorSpace(
    jni.JObject colorSpace,
  ) {
    return _setColorSpace(reference, colorSpace.reference).check();
  }

  static final _hasGainmap = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__hasGainmap")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasGainmap()
  bool hasGainmap() {
    return _hasGainmap(reference).boolean;
  }

  static final _getGainmap = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getGainmap")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Gainmap getGainmap()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getGainmap() {
    return const jni.JObjectType().fromRef(_getGainmap(reference).object);
  }

  static final _setGainmap = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__setGainmap")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setGainmap(android.graphics.Gainmap gainmap)
  void setGainmap(
    jni.JObject gainmap,
  ) {
    return _setGainmap(reference, gainmap.reference).check();
  }

  static final _eraseColor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Bitmap__eraseColor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void eraseColor(int i)
  void eraseColor(
    int i,
  ) {
    return _eraseColor(reference, i).check();
  }

  static final _eraseColor1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Bitmap__eraseColor1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void eraseColor(long j)
  void eraseColor1(
    int j,
  ) {
    return _eraseColor1(reference, j).check();
  }

  static final _getPixel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("Bitmap__getPixel")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int getPixel(int i, int i1)
  int getPixel(
    int i,
    int i1,
  ) {
    return _getPixel(reference, i, i1).integer;
  }

  static final _getColor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("Bitmap__getColor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public android.graphics.Color getColor(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColor(
    int i,
    int i1,
  ) {
    return const jni.JObjectType().fromRef(_getColor(reference, i, i1).object);
  }

  static final _getPixels = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Bitmap__getPixels")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, int, int, int, int, int)>();

  /// from: public void getPixels(int[] is, int i, int i1, int i2, int i3, int i4, int i5)
  void getPixels(
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
    int i2,
    int i3,
    int i4,
    int i5,
  ) {
    return _getPixels(reference, is0.reference, i, i1, i2, i3, i4, i5).check();
  }

  static final _setPixel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Int32)>>("Bitmap__setPixel")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void setPixel(int i, int i1, int i2)
  void setPixel(
    int i,
    int i1,
    int i2,
  ) {
    return _setPixel(reference, i, i1, i2).check();
  }

  static final _setPixels = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Bitmap__setPixels")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, int, int, int, int, int)>();

  /// from: public void setPixels(int[] is, int i, int i1, int i2, int i3, int i4, int i5)
  void setPixels(
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
    int i2,
    int i3,
    int i4,
    int i5,
  ) {
    return _setPixels(reference, is0.reference, i, i1, i2, i3, i4, i5).check();
  }

  static final _describeContents = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__describeContents")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(reference).integer;
  }

  static final _writeToParcel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Bitmap__writeToParcel")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    return _writeToParcel(reference, parcel.reference, i).check();
  }

  static final _extractAlpha = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__extractAlpha")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Bitmap extractAlpha()
  /// The returned object must be released after use, by calling the [release] method.
  Bitmap extractAlpha() {
    return const $BitmapType().fromRef(_extractAlpha(reference).object);
  }

  static final _extractAlpha1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__extractAlpha1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Bitmap extractAlpha(android.graphics.Paint paint, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  Bitmap extractAlpha1(
    jni.JObject paint,
    jni.JArray<jni.jint> is0,
  ) {
    return const $BitmapType().fromRef(
        _extractAlpha1(reference, paint.reference, is0.reference).object);
  }

  static final _sameAs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Bitmap__sameAs")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean sameAs(android.graphics.Bitmap bitmap)
  bool sameAs(
    Bitmap bitmap,
  ) {
    return _sameAs(reference, bitmap.reference).boolean;
  }

  static final _prepareToDraw = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__prepareToDraw")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void prepareToDraw()
  void prepareToDraw() {
    return _prepareToDraw(reference).check();
  }

  static final _getHardwareBuffer = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Bitmap__getHardwareBuffer")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.hardware.HardwareBuffer getHardwareBuffer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getHardwareBuffer() {
    return const jni.JObjectType()
        .fromRef(_getHardwareBuffer(reference).object);
  }
}

final class $BitmapType extends jni.JObjType<Bitmap> {
  const $BitmapType();

  @override
  String get signature => r"Landroid/graphics/Bitmap;";

  @override
  Bitmap fromRef(jni.JObjectPtr ref) => Bitmap.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BitmapType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BitmapType) && other is $BitmapType;
  }
}
