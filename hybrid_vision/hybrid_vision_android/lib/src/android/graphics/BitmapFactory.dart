// ignore_for_file: use_super_parameters
// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Bitmap.dart" as bitmap_;

import "Rect.dart" as rect_;
import "../../_init.dart";

/// from: android.graphics.BitmapFactory$Options
class BitmapFactory_Options extends jni.JObject {
  @override
  late final jni.JObjType<BitmapFactory_Options> $type = type;

  BitmapFactory_Options.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $BitmapFactory_OptionsType();
  static final _get_inBitmap = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inBitmap")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inBitmap = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_BitmapFactory_Options__inBitmap")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Bitmap inBitmap
  /// The returned object must be released after use, by calling the [release] method.
  bitmap_.Bitmap get inBitmap =>
      const bitmap_.$BitmapType().fromRef(_get_inBitmap(reference).object);

  /// from: public android.graphics.Bitmap inBitmap
  /// The returned object must be released after use, by calling the [release] method.
  set inBitmap(bitmap_.Bitmap value) =>
      _set_inBitmap(reference, value.reference).check();

  static final _get_inDensity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inDensity")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inDensity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Int32)>>("set_BitmapFactory_Options__inDensity")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int inDensity
  int get inDensity => _get_inDensity(reference).integer;

  /// from: public int inDensity
  set inDensity(int value) => _set_inDensity(reference, value).check();

  static final _get_inDither = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inDither")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inDither = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Uint8)>>("set_BitmapFactory_Options__inDither")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean inDither
  bool get inDither => _get_inDither(reference).boolean;

  /// from: public boolean inDither
  set inDither(bool value) => _set_inDither(reference, value ? 1 : 0).check();

  static final _get_inInputShareable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inInputShareable")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inInputShareable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Uint8)>>("set_BitmapFactory_Options__inInputShareable")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean inInputShareable
  bool get inInputShareable => _get_inInputShareable(reference).boolean;

  /// from: public boolean inInputShareable
  set inInputShareable(bool value) =>
      _set_inInputShareable(reference, value ? 1 : 0).check();

  static final _get_inJustDecodeBounds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inJustDecodeBounds")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inJustDecodeBounds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Uint8)>>("set_BitmapFactory_Options__inJustDecodeBounds")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean inJustDecodeBounds
  bool get inJustDecodeBounds => _get_inJustDecodeBounds(reference).boolean;

  /// from: public boolean inJustDecodeBounds
  set inJustDecodeBounds(bool value) =>
      _set_inJustDecodeBounds(reference, value ? 1 : 0).check();

  static final _get_inMutable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inMutable")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inMutable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Uint8)>>("set_BitmapFactory_Options__inMutable")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean inMutable
  bool get inMutable => _get_inMutable(reference).boolean;

  /// from: public boolean inMutable
  set inMutable(bool value) => _set_inMutable(reference, value ? 1 : 0).check();

  static final _get_inPreferQualityOverSpeed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inPreferQualityOverSpeed")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inPreferQualityOverSpeed = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(jni.JObjectPtr, ffi.Uint8)>>(
          "set_BitmapFactory_Options__inPreferQualityOverSpeed")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean inPreferQualityOverSpeed
  bool get inPreferQualityOverSpeed =>
      _get_inPreferQualityOverSpeed(reference).boolean;

  /// from: public boolean inPreferQualityOverSpeed
  set inPreferQualityOverSpeed(bool value) =>
      _set_inPreferQualityOverSpeed(reference, value ? 1 : 0).check();

  static final _get_inPreferredColorSpace = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inPreferredColorSpace")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inPreferredColorSpace = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_BitmapFactory_Options__inPreferredColorSpace")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.ColorSpace inPreferredColorSpace
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get inPreferredColorSpace => const jni.JObjectType()
      .fromRef(_get_inPreferredColorSpace(reference).object);

  /// from: public android.graphics.ColorSpace inPreferredColorSpace
  /// The returned object must be released after use, by calling the [release] method.
  set inPreferredColorSpace(jni.JObject value) =>
      _set_inPreferredColorSpace(reference, value.reference).check();

  static final _get_inPreferredConfig = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inPreferredConfig")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inPreferredConfig = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_BitmapFactory_Options__inPreferredConfig")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Bitmap$Config inPreferredConfig
  /// The returned object must be released after use, by calling the [release] method.
  bitmap_.Bitmap_Config get inPreferredConfig =>
      const bitmap_.$Bitmap_ConfigType()
          .fromRef(_get_inPreferredConfig(reference).object);

  /// from: public android.graphics.Bitmap$Config inPreferredConfig
  /// The returned object must be released after use, by calling the [release] method.
  set inPreferredConfig(bitmap_.Bitmap_Config value) =>
      _set_inPreferredConfig(reference, value.reference).check();

  static final _get_inPremultiplied = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inPremultiplied")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inPremultiplied = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Uint8)>>("set_BitmapFactory_Options__inPremultiplied")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean inPremultiplied
  bool get inPremultiplied => _get_inPremultiplied(reference).boolean;

  /// from: public boolean inPremultiplied
  set inPremultiplied(bool value) =>
      _set_inPremultiplied(reference, value ? 1 : 0).check();

  static final _get_inPurgeable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inPurgeable")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inPurgeable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Uint8)>>("set_BitmapFactory_Options__inPurgeable")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean inPurgeable
  bool get inPurgeable => _get_inPurgeable(reference).boolean;

  /// from: public boolean inPurgeable
  set inPurgeable(bool value) =>
      _set_inPurgeable(reference, value ? 1 : 0).check();

  static final _get_inSampleSize = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inSampleSize")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inSampleSize = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Int32)>>("set_BitmapFactory_Options__inSampleSize")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int inSampleSize
  int get inSampleSize => _get_inSampleSize(reference).integer;

  /// from: public int inSampleSize
  set inSampleSize(int value) => _set_inSampleSize(reference, value).check();

  static final _get_inScaled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inScaled")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inScaled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Uint8)>>("set_BitmapFactory_Options__inScaled")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean inScaled
  bool get inScaled => _get_inScaled(reference).boolean;

  /// from: public boolean inScaled
  set inScaled(bool value) => _set_inScaled(reference, value ? 1 : 0).check();

  static final _get_inScreenDensity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inScreenDensity")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inScreenDensity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Int32)>>("set_BitmapFactory_Options__inScreenDensity")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int inScreenDensity
  int get inScreenDensity => _get_inScreenDensity(reference).integer;

  /// from: public int inScreenDensity
  set inScreenDensity(int value) =>
      _set_inScreenDensity(reference, value).check();

  static final _get_inTargetDensity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inTargetDensity")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inTargetDensity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Int32)>>("set_BitmapFactory_Options__inTargetDensity")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int inTargetDensity
  int get inTargetDensity => _get_inTargetDensity(reference).integer;

  /// from: public int inTargetDensity
  set inTargetDensity(int value) =>
      _set_inTargetDensity(reference, value).check();

  static final _get_inTempStorage = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__inTempStorage")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_inTempStorage = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_BitmapFactory_Options__inTempStorage")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] inTempStorage
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> get inTempStorage =>
      const jni.JArrayType(jni.jbyteType())
          .fromRef(_get_inTempStorage(reference).object);

  /// from: public byte[] inTempStorage
  /// The returned object must be released after use, by calling the [release] method.
  set inTempStorage(jni.JArray<jni.jbyte> value) =>
      _set_inTempStorage(reference, value.reference).check();

  static final _get_mCancel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__mCancel")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_mCancel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Uint8)>>("set_BitmapFactory_Options__mCancel")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public boolean mCancel
  bool get mCancel => _get_mCancel(reference).boolean;

  /// from: public boolean mCancel
  set mCancel(bool value) => _set_mCancel(reference, value ? 1 : 0).check();

  static final _get_outColorSpace = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__outColorSpace")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_outColorSpace = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_BitmapFactory_Options__outColorSpace")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.ColorSpace outColorSpace
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get outColorSpace =>
      const jni.JObjectType().fromRef(_get_outColorSpace(reference).object);

  /// from: public android.graphics.ColorSpace outColorSpace
  /// The returned object must be released after use, by calling the [release] method.
  set outColorSpace(jni.JObject value) =>
      _set_outColorSpace(reference, value.reference).check();

  static final _get_outConfig = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__outConfig")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_outConfig = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_BitmapFactory_Options__outConfig")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Bitmap$Config outConfig
  /// The returned object must be released after use, by calling the [release] method.
  bitmap_.Bitmap_Config get outConfig => const bitmap_.$Bitmap_ConfigType()
      .fromRef(_get_outConfig(reference).object);

  /// from: public android.graphics.Bitmap$Config outConfig
  /// The returned object must be released after use, by calling the [release] method.
  set outConfig(bitmap_.Bitmap_Config value) =>
      _set_outConfig(reference, value.reference).check();

  static final _get_outHeight = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__outHeight")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_outHeight = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Int32)>>("set_BitmapFactory_Options__outHeight")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int outHeight
  int get outHeight => _get_outHeight(reference).integer;

  /// from: public int outHeight
  set outHeight(int value) => _set_outHeight(reference, value).check();

  static final _get_outMimeType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__outMimeType")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_outMimeType = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_BitmapFactory_Options__outMimeType")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String outMimeType
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get outMimeType =>
      const jni.JStringType().fromRef(_get_outMimeType(reference).object);

  /// from: public java.lang.String outMimeType
  /// The returned object must be released after use, by calling the [release] method.
  set outMimeType(jni.JString value) =>
      _set_outMimeType(reference, value.reference).check();

  static final _get_outWidth = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_BitmapFactory_Options__outWidth")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_outWidth = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Int32)>>("set_BitmapFactory_Options__outWidth")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int outWidth
  int get outWidth => _get_outWidth(reference).integer;

  /// from: public int outWidth
  set outWidth(int value) => _set_outWidth(reference, value).check();

  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "BitmapFactory_Options__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory BitmapFactory_Options() {
    return BitmapFactory_Options.fromRef(_new0().object);
  }

  static final _requestCancelDecode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BitmapFactory_Options__requestCancelDecode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void requestCancelDecode()
  void requestCancelDecode() {
    return _requestCancelDecode(reference).check();
  }
}

final class $BitmapFactory_OptionsType
    extends jni.JObjType<BitmapFactory_Options> {
  const $BitmapFactory_OptionsType();

  @override
  String get signature => r"Landroid/graphics/BitmapFactory$Options;";

  @override
  BitmapFactory_Options fromRef(jni.JObjectPtr ref) =>
      BitmapFactory_Options.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BitmapFactory_OptionsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BitmapFactory_OptionsType) &&
        other is $BitmapFactory_OptionsType;
  }
}

/// from: android.graphics.BitmapFactory
class BitmapFactory extends jni.JObject {
  @override
  late final jni.JObjType<BitmapFactory> $type = type;

  BitmapFactory.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $BitmapFactoryType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "BitmapFactory__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory BitmapFactory() {
    return BitmapFactory.fromRef(_new0().object);
  }

  static final _decodeFile = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("BitmapFactory__decodeFile")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeFile(java.lang.String string, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeFile(
    jni.JString string,
    BitmapFactory_Options options,
  ) {
    return const bitmap_.$BitmapType()
        .fromRef(_decodeFile(string.reference, options.reference).object);
  }

  static final _decodeFile1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BitmapFactory__decodeFile1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeFile(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeFile1(
    jni.JString string,
  ) {
    return const bitmap_.$BitmapType()
        .fromRef(_decodeFile1(string.reference).object);
  }

  static final _decodeResourceStream = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "BitmapFactory__decodeResourceStream")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeResourceStream(android.content.res.Resources resources, android.util.TypedValue typedValue, java.io.InputStream inputStream, android.graphics.Rect rect, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeResourceStream(
    jni.JObject resources,
    jni.JObject typedValue,
    jni.JObject inputStream,
    rect_.Rect rect,
    BitmapFactory_Options options,
  ) {
    return const bitmap_.$BitmapType().fromRef(_decodeResourceStream(
            resources.reference,
            typedValue.reference,
            inputStream.reference,
            rect.reference,
            options.reference)
        .object);
  }

  static final _decodeResource = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("BitmapFactory__decodeResource")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeResource(android.content.res.Resources resources, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeResource(
    jni.JObject resources,
    int i,
    BitmapFactory_Options options,
  ) {
    return const bitmap_.$BitmapType().fromRef(
        _decodeResource(resources.reference, i, options.reference).object);
  }

  static final _decodeResource1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("BitmapFactory__decodeResource1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.graphics.Bitmap decodeResource(android.content.res.Resources resources, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeResource1(
    jni.JObject resources,
    int i,
  ) {
    return const bitmap_.$BitmapType()
        .fromRef(_decodeResource1(resources.reference, i).object);
  }

  static final _decodeByteArray = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("BitmapFactory__decodeByteArray")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeByteArray(byte[] bs, int i, int i1, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeByteArray(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
    BitmapFactory_Options options,
  ) {
    return const bitmap_.$BitmapType().fromRef(
        _decodeByteArray(bs.reference, i, i1, options.reference).object);
  }

  static final _decodeByteArray1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("BitmapFactory__decodeByteArray1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public android.graphics.Bitmap decodeByteArray(byte[] bs, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeByteArray1(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return const bitmap_.$BitmapType()
        .fromRef(_decodeByteArray1(bs.reference, i, i1).object);
  }

  static final _decodeStream = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("BitmapFactory__decodeStream")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeStream(java.io.InputStream inputStream, android.graphics.Rect rect, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeStream(
    jni.JObject inputStream,
    rect_.Rect rect,
    BitmapFactory_Options options,
  ) {
    return const bitmap_.$BitmapType().fromRef(
        _decodeStream(inputStream.reference, rect.reference, options.reference)
            .object);
  }

  static final _decodeStream1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BitmapFactory__decodeStream1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeStream(java.io.InputStream inputStream)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeStream1(
    jni.JObject inputStream,
  ) {
    return const bitmap_.$BitmapType()
        .fromRef(_decodeStream1(inputStream.reference).object);
  }

  static final _decodeFileDescriptor = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "BitmapFactory__decodeFileDescriptor")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor fileDescriptor, android.graphics.Rect rect, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeFileDescriptor(
    jni.JObject fileDescriptor,
    rect_.Rect rect,
    BitmapFactory_Options options,
  ) {
    return const bitmap_.$BitmapType().fromRef(_decodeFileDescriptor(
            fileDescriptor.reference, rect.reference, options.reference)
        .object);
  }

  static final _decodeFileDescriptor1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BitmapFactory__decodeFileDescriptor1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor fileDescriptor)
  /// The returned object must be released after use, by calling the [release] method.
  static bitmap_.Bitmap decodeFileDescriptor1(
    jni.JObject fileDescriptor,
  ) {
    return const bitmap_.$BitmapType()
        .fromRef(_decodeFileDescriptor1(fileDescriptor.reference).object);
  }
}

final class $BitmapFactoryType extends jni.JObjType<BitmapFactory> {
  const $BitmapFactoryType();

  @override
  String get signature => r"Landroid/graphics/BitmapFactory;";

  @override
  BitmapFactory fromRef(jni.JObjectPtr ref) => BitmapFactory.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BitmapFactoryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BitmapFactoryType) &&
        other is $BitmapFactoryType;
  }
}
