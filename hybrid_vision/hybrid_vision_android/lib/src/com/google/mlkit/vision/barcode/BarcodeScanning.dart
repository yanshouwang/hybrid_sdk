// ignore_for_file: use_super_parameters
// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "BarcodeScanner.dart" as barcodescanner_;

import "BarcodeScannerOptions.dart" as barcodescanneroptions_;
import "../../../../../_init.dart";

/// from: com.google.mlkit.vision.barcode.BarcodeScanning
class BarcodeScanning extends jni.JObject {
  @override
  late final jni.JObjType<BarcodeScanning> $type = type;

  BarcodeScanning.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $BarcodeScanningType();
  static final _getClient =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "BarcodeScanning__getClient")
          .asFunction<jni.JniResult Function()>();

  /// from: static public com.google.mlkit.vision.barcode.BarcodeScanner getClient()
  /// The returned object must be released after use, by calling the [release] method.
  static barcodescanner_.BarcodeScanner getClient() {
    return const barcodescanner_.$BarcodeScannerType()
        .fromRef(_getClient().object);
  }

  static final _getClient1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BarcodeScanning__getClient1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.mlkit.vision.barcode.BarcodeScanner getClient(com.google.mlkit.vision.barcode.BarcodeScannerOptions barcodeScannerOptions)
  /// The returned object must be released after use, by calling the [release] method.
  static barcodescanner_.BarcodeScanner getClient1(
    barcodescanneroptions_.BarcodeScannerOptions barcodeScannerOptions,
  ) {
    return const barcodescanner_.$BarcodeScannerType()
        .fromRef(_getClient1(barcodeScannerOptions.reference).object);
  }
}

final class $BarcodeScanningType extends jni.JObjType<BarcodeScanning> {
  const $BarcodeScanningType();

  @override
  String get signature => r"Lcom/google/mlkit/vision/barcode/BarcodeScanning;";

  @override
  BarcodeScanning fromRef(jni.JObjectPtr ref) => BarcodeScanning.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BarcodeScanningType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BarcodeScanningType) &&
        other is $BarcodeScanningType;
  }
}
