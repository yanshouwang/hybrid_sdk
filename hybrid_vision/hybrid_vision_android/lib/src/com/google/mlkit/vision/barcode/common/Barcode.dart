// ignore_for_file: use_super_parameters
// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../../android/graphics/Rect.dart" as rect_;

import "../../../../../../android/graphics/Point.dart" as point_;
import "../../../../../../_init.dart";

/// from: com.google.mlkit.vision.barcode.common.Barcode$Address$AddressType
class Barcode_Address_AddressType extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_Address_AddressType> $type = type;

  Barcode_Address_AddressType.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_Address_AddressTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Barcode_Address_AddressTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Barcode_Address_AddressType.implement(
    $Barcode_Address_AddressTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Barcode_Address_AddressType.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.mlkit.vision.barcode.common.Barcode$Address$AddressType",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Barcode_Address_AddressTypeImpl {
  factory $Barcode_Address_AddressTypeImpl() =
      _$Barcode_Address_AddressTypeImpl;
}

class _$Barcode_Address_AddressTypeImpl
    implements $Barcode_Address_AddressTypeImpl {
  _$Barcode_Address_AddressTypeImpl();
}

final class $Barcode_Address_AddressTypeType
    extends jni.JObjType<Barcode_Address_AddressType> {
  const $Barcode_Address_AddressTypeType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$Address$AddressType;";

  @override
  Barcode_Address_AddressType fromRef(jni.JObjectPtr ref) =>
      Barcode_Address_AddressType.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_Address_AddressTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_Address_AddressTypeType) &&
        other is $Barcode_Address_AddressTypeType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$Address
class Barcode_Address extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_Address> $type = type;

  Barcode_Address.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_AddressType();

  /// from: static public final int TYPE_UNKNOWN
  static const TYPE_UNKNOWN = 0;

  /// from: static public final int TYPE_WORK
  static const TYPE_WORK = 1;

  /// from: static public final int TYPE_HOME
  static const TYPE_HOME = 2;

  static final _getType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Address__getType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getType()
  int getType() {
    return _getType(reference).integer;
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>("Barcode_Address__new0")
      .asFunction<jni.JniResult Function(int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(int i, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_Address(
    int i,
    jni.JArray<jni.JString> strings,
  ) {
    return Barcode_Address.fromRef(_new0(i, strings.reference).object);
  }

  static final _getAddressLines = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Address__getAddressLines")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getAddressLines()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getAddressLines() {
    return const jni.JArrayType(jni.JStringType())
        .fromRef(_getAddressLines(reference).object);
  }
}

final class $Barcode_AddressType extends jni.JObjType<Barcode_Address> {
  const $Barcode_AddressType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$Address;";

  @override
  Barcode_Address fromRef(jni.JObjectPtr ref) => Barcode_Address.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_AddressType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_AddressType) &&
        other is $Barcode_AddressType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$BarcodeFormat
class Barcode_BarcodeFormat extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_BarcodeFormat> $type = type;

  Barcode_BarcodeFormat.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_BarcodeFormatType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Barcode_BarcodeFormatImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Barcode_BarcodeFormat.implement(
    $Barcode_BarcodeFormatImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Barcode_BarcodeFormat.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.mlkit.vision.barcode.common.Barcode$BarcodeFormat",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Barcode_BarcodeFormatImpl {
  factory $Barcode_BarcodeFormatImpl() = _$Barcode_BarcodeFormatImpl;
}

class _$Barcode_BarcodeFormatImpl implements $Barcode_BarcodeFormatImpl {
  _$Barcode_BarcodeFormatImpl();
}

final class $Barcode_BarcodeFormatType
    extends jni.JObjType<Barcode_BarcodeFormat> {
  const $Barcode_BarcodeFormatType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$BarcodeFormat;";

  @override
  Barcode_BarcodeFormat fromRef(jni.JObjectPtr ref) =>
      Barcode_BarcodeFormat.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_BarcodeFormatType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_BarcodeFormatType) &&
        other is $Barcode_BarcodeFormatType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$BarcodeValueType
class Barcode_BarcodeValueType extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_BarcodeValueType> $type = type;

  Barcode_BarcodeValueType.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_BarcodeValueTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Barcode_BarcodeValueTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Barcode_BarcodeValueType.implement(
    $Barcode_BarcodeValueTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Barcode_BarcodeValueType.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.mlkit.vision.barcode.common.Barcode$BarcodeValueType",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Barcode_BarcodeValueTypeImpl {
  factory $Barcode_BarcodeValueTypeImpl() = _$Barcode_BarcodeValueTypeImpl;
}

class _$Barcode_BarcodeValueTypeImpl implements $Barcode_BarcodeValueTypeImpl {
  _$Barcode_BarcodeValueTypeImpl();
}

final class $Barcode_BarcodeValueTypeType
    extends jni.JObjType<Barcode_BarcodeValueType> {
  const $Barcode_BarcodeValueTypeType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$BarcodeValueType;";

  @override
  Barcode_BarcodeValueType fromRef(jni.JObjectPtr ref) =>
      Barcode_BarcodeValueType.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_BarcodeValueTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_BarcodeValueTypeType) &&
        other is $Barcode_BarcodeValueTypeType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$CalendarDateTime
class Barcode_CalendarDateTime extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_CalendarDateTime> $type = type;

  Barcode_CalendarDateTime.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_CalendarDateTimeType();
  static final _getDay = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarDateTime__getDay")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getDay()
  int getDay() {
    return _getDay(reference).integer;
  }

  static final _getHours = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarDateTime__getHours")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getHours()
  int getHours() {
    return _getHours(reference).integer;
  }

  static final _getMinutes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarDateTime__getMinutes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMinutes()
  int getMinutes() {
    return _getMinutes(reference).integer;
  }

  static final _getMonth = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarDateTime__getMonth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMonth()
  int getMonth() {
    return _getMonth(reference).integer;
  }

  static final _getSeconds = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarDateTime__getSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getSeconds()
  int getSeconds() {
    return _getSeconds(reference).integer;
  }

  static final _getYear = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarDateTime__getYear")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getYear()
  int getYear() {
    return _getYear(reference).integer;
  }

  static final _getRawValue = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarDateTime__getRawValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getRawValue()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRawValue() {
    return const jni.JStringType().fromRef(_getRawValue(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Uint8,
                  ffi.Pointer<ffi.Void>)>>("Barcode_CalendarDateTime__new0")
      .asFunction<
          jni.JniResult Function(
              int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(int i, int i1, int i2, int i3, int i4, int i5, boolean z, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_CalendarDateTime(
    int i,
    int i1,
    int i2,
    int i3,
    int i4,
    int i5,
    bool z,
    jni.JString string,
  ) {
    return Barcode_CalendarDateTime.fromRef(
        _new0(i, i1, i2, i3, i4, i5, z ? 1 : 0, string.reference).object);
  }

  static final _isUtc = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarDateTime__isUtc")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUtc()
  bool isUtc() {
    return _isUtc(reference).boolean;
  }
}

final class $Barcode_CalendarDateTimeType
    extends jni.JObjType<Barcode_CalendarDateTime> {
  const $Barcode_CalendarDateTimeType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$CalendarDateTime;";

  @override
  Barcode_CalendarDateTime fromRef(jni.JObjectPtr ref) =>
      Barcode_CalendarDateTime.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_CalendarDateTimeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_CalendarDateTimeType) &&
        other is $Barcode_CalendarDateTimeType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$CalendarEvent
class Barcode_CalendarEvent extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_CalendarEvent> $type = type;

  Barcode_CalendarEvent.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_CalendarEventType();
  static final _getEnd = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarEvent__getEnd")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$CalendarDateTime getEnd()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_CalendarDateTime getEnd() {
    return const $Barcode_CalendarDateTimeType()
        .fromRef(_getEnd(reference).object);
  }

  static final _getStart = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarEvent__getStart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$CalendarDateTime getStart()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_CalendarDateTime getStart() {
    return const $Barcode_CalendarDateTimeType()
        .fromRef(_getStart(reference).object);
  }

  static final _getDescription = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarEvent__getDescription")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getDescription()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDescription() {
    return const jni.JStringType().fromRef(_getDescription(reference).object);
  }

  static final _getLocation = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarEvent__getLocation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getLocation()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocation() {
    return const jni.JStringType().fromRef(_getLocation(reference).object);
  }

  static final _getOrganizer = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarEvent__getOrganizer")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getOrganizer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOrganizer() {
    return const jni.JStringType().fromRef(_getOrganizer(reference).object);
  }

  static final _getStatus = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarEvent__getStatus")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getStatus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getStatus() {
    return const jni.JStringType().fromRef(_getStatus(reference).object);
  }

  static final _getSummary = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_CalendarEvent__getSummary")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getSummary()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSummary() {
    return const jni.JStringType().fromRef(_getSummary(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode_CalendarEvent__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3, java.lang.String string4, com.google.mlkit.vision.barcode.common.Barcode$CalendarDateTime calendarDateTime, com.google.mlkit.vision.barcode.common.Barcode$CalendarDateTime calendarDateTime1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_CalendarEvent(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JString string3,
    jni.JString string4,
    Barcode_CalendarDateTime calendarDateTime,
    Barcode_CalendarDateTime calendarDateTime1,
  ) {
    return Barcode_CalendarEvent.fromRef(_new0(
            string.reference,
            string1.reference,
            string2.reference,
            string3.reference,
            string4.reference,
            calendarDateTime.reference,
            calendarDateTime1.reference)
        .object);
  }
}

final class $Barcode_CalendarEventType
    extends jni.JObjType<Barcode_CalendarEvent> {
  const $Barcode_CalendarEventType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$CalendarEvent;";

  @override
  Barcode_CalendarEvent fromRef(jni.JObjectPtr ref) =>
      Barcode_CalendarEvent.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_CalendarEventType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_CalendarEventType) &&
        other is $Barcode_CalendarEventType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$ContactInfo
class Barcode_ContactInfo extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_ContactInfo> $type = type;

  Barcode_ContactInfo.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_ContactInfoType();
  static final _getName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_ContactInfo__getName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$PersonName getName()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_PersonName getName() {
    return const $Barcode_PersonNameType().fromRef(_getName(reference).object);
  }

  static final _getOrganization = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_ContactInfo__getOrganization")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getOrganization()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOrganization() {
    return const jni.JStringType().fromRef(_getOrganization(reference).object);
  }

  static final _getTitle = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_ContactInfo__getTitle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getTitle() {
    return const jni.JStringType().fromRef(_getTitle(reference).object);
  }

  static final _getAddresses = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_ContactInfo__getAddresses")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getAddresses()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<Barcode_Address> getAddresses() {
    return const jni.JListType($Barcode_AddressType())
        .fromRef(_getAddresses(reference).object);
  }

  static final _getEmails = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_ContactInfo__getEmails")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getEmails()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<Barcode_Email> getEmails() {
    return const jni.JListType($Barcode_EmailType())
        .fromRef(_getEmails(reference).object);
  }

  static final _getPhones = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_ContactInfo__getPhones")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getPhones()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<Barcode_Phone> getPhones() {
    return const jni.JListType($Barcode_PhoneType())
        .fromRef(_getPhones(reference).object);
  }

  static final _getUrls = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_ContactInfo__getUrls")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getUrls()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getUrls() {
    return const jni.JListType(jni.JStringType())
        .fromRef(_getUrls(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode_ContactInfo__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.google.mlkit.vision.barcode.common.Barcode$PersonName personName, java.lang.String string, java.lang.String string1, java.util.List list, java.util.List list1, java.util.List list2, java.util.List list3)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_ContactInfo(
    Barcode_PersonName personName,
    jni.JString string,
    jni.JString string1,
    jni.JList<Barcode_Phone> list,
    jni.JList<Barcode_Email> list1,
    jni.JList<jni.JString> list2,
    jni.JList<Barcode_Address> list3,
  ) {
    return Barcode_ContactInfo.fromRef(_new0(
            personName.reference,
            string.reference,
            string1.reference,
            list.reference,
            list1.reference,
            list2.reference,
            list3.reference)
        .object);
  }
}

final class $Barcode_ContactInfoType extends jni.JObjType<Barcode_ContactInfo> {
  const $Barcode_ContactInfoType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$ContactInfo;";

  @override
  Barcode_ContactInfo fromRef(jni.JObjectPtr ref) =>
      Barcode_ContactInfo.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_ContactInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_ContactInfoType) &&
        other is $Barcode_ContactInfoType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$DriverLicense
class Barcode_DriverLicense extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_DriverLicense> $type = type;

  Barcode_DriverLicense.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_DriverLicenseType();
  static final _getAddressCity = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getAddressCity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAddressCity()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAddressCity() {
    return const jni.JStringType().fromRef(_getAddressCity(reference).object);
  }

  static final _getAddressState = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getAddressState")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAddressState()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAddressState() {
    return const jni.JStringType().fromRef(_getAddressState(reference).object);
  }

  static final _getAddressStreet = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getAddressStreet")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAddressStreet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAddressStreet() {
    return const jni.JStringType().fromRef(_getAddressStreet(reference).object);
  }

  static final _getAddressZip = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getAddressZip")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAddressZip()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAddressZip() {
    return const jni.JStringType().fromRef(_getAddressZip(reference).object);
  }

  static final _getBirthDate = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getBirthDate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getBirthDate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getBirthDate() {
    return const jni.JStringType().fromRef(_getBirthDate(reference).object);
  }

  static final _getDocumentType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getDocumentType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getDocumentType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDocumentType() {
    return const jni.JStringType().fromRef(_getDocumentType(reference).object);
  }

  static final _getExpiryDate = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getExpiryDate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getExpiryDate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getExpiryDate() {
    return const jni.JStringType().fromRef(_getExpiryDate(reference).object);
  }

  static final _getFirstName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getFirstName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getFirstName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFirstName() {
    return const jni.JStringType().fromRef(_getFirstName(reference).object);
  }

  static final _getGender = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getGender")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getGender()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGender() {
    return const jni.JStringType().fromRef(_getGender(reference).object);
  }

  static final _getIssueDate = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getIssueDate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getIssueDate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getIssueDate() {
    return const jni.JStringType().fromRef(_getIssueDate(reference).object);
  }

  static final _getIssuingCountry = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getIssuingCountry")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getIssuingCountry()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getIssuingCountry() {
    return const jni.JStringType()
        .fromRef(_getIssuingCountry(reference).object);
  }

  static final _getLastName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getLastName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getLastName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLastName() {
    return const jni.JStringType().fromRef(_getLastName(reference).object);
  }

  static final _getLicenseNumber = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getLicenseNumber")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getLicenseNumber()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLicenseNumber() {
    return const jni.JStringType().fromRef(_getLicenseNumber(reference).object);
  }

  static final _getMiddleName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_DriverLicense__getMiddleName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMiddleName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getMiddleName() {
    return const jni.JStringType().fromRef(_getMiddleName(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode_DriverLicense__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3, java.lang.String string4, java.lang.String string5, java.lang.String string6, java.lang.String string7, java.lang.String string8, java.lang.String string9, java.lang.String string10, java.lang.String string11, java.lang.String string12, java.lang.String string13)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_DriverLicense(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JString string3,
    jni.JString string4,
    jni.JString string5,
    jni.JString string6,
    jni.JString string7,
    jni.JString string8,
    jni.JString string9,
    jni.JString string10,
    jni.JString string11,
    jni.JString string12,
    jni.JString string13,
  ) {
    return Barcode_DriverLicense.fromRef(_new0(
            string.reference,
            string1.reference,
            string2.reference,
            string3.reference,
            string4.reference,
            string5.reference,
            string6.reference,
            string7.reference,
            string8.reference,
            string9.reference,
            string10.reference,
            string11.reference,
            string12.reference,
            string13.reference)
        .object);
  }
}

final class $Barcode_DriverLicenseType
    extends jni.JObjType<Barcode_DriverLicense> {
  const $Barcode_DriverLicenseType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$DriverLicense;";

  @override
  Barcode_DriverLicense fromRef(jni.JObjectPtr ref) =>
      Barcode_DriverLicense.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_DriverLicenseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_DriverLicenseType) &&
        other is $Barcode_DriverLicenseType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$Email$FormatType
class Barcode_Email_FormatType extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_Email_FormatType> $type = type;

  Barcode_Email_FormatType.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_Email_FormatTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Barcode_Email_FormatTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Barcode_Email_FormatType.implement(
    $Barcode_Email_FormatTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Barcode_Email_FormatType.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.mlkit.vision.barcode.common.Barcode$Email$FormatType",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Barcode_Email_FormatTypeImpl {
  factory $Barcode_Email_FormatTypeImpl() = _$Barcode_Email_FormatTypeImpl;
}

class _$Barcode_Email_FormatTypeImpl implements $Barcode_Email_FormatTypeImpl {
  _$Barcode_Email_FormatTypeImpl();
}

final class $Barcode_Email_FormatTypeType
    extends jni.JObjType<Barcode_Email_FormatType> {
  const $Barcode_Email_FormatTypeType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$Email$FormatType;";

  @override
  Barcode_Email_FormatType fromRef(jni.JObjectPtr ref) =>
      Barcode_Email_FormatType.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_Email_FormatTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_Email_FormatTypeType) &&
        other is $Barcode_Email_FormatTypeType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$Email
class Barcode_Email extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_Email> $type = type;

  Barcode_Email.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_EmailType();

  /// from: static public final int TYPE_UNKNOWN
  static const TYPE_UNKNOWN = 0;

  /// from: static public final int TYPE_WORK
  static const TYPE_WORK = 1;

  /// from: static public final int TYPE_HOME
  static const TYPE_HOME = 2;

  static final _getType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Email__getType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getType()
  int getType() {
    return _getType(reference).integer;
  }

  static final _getAddress = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Email__getAddress")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAddress()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAddress() {
    return const jni.JStringType().fromRef(_getAddress(reference).object);
  }

  static final _getBody = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Email__getBody")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getBody()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getBody() {
    return const jni.JStringType().fromRef(_getBody(reference).object);
  }

  static final _getSubject = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Email__getSubject")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getSubject()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSubject() {
    return const jni.JStringType().fromRef(_getSubject(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode_Email__new0")
      .asFunction<
          jni.JniResult Function(int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(int i, java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_Email(
    int i,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return Barcode_Email.fromRef(
        _new0(i, string.reference, string1.reference, string2.reference)
            .object);
  }
}

final class $Barcode_EmailType extends jni.JObjType<Barcode_Email> {
  const $Barcode_EmailType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$Email;";

  @override
  Barcode_Email fromRef(jni.JObjectPtr ref) => Barcode_Email.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_EmailType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_EmailType) &&
        other is $Barcode_EmailType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$GeoPoint
class Barcode_GeoPoint extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_GeoPoint> $type = type;

  Barcode_GeoPoint.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_GeoPointType();
  static final _getLat = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_GeoPoint__getLat")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public double getLat()
  double getLat() {
    return _getLat(reference).doubleFloat;
  }

  static final _getLng = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_GeoPoint__getLng")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public double getLng()
  double getLng() {
    return _getLng(reference).doubleFloat;
  }

  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Double, ffi.Double)>>(
          "Barcode_GeoPoint__new0")
      .asFunction<jni.JniResult Function(double, double)>();

  /// from: public void <init>(double d, double d1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_GeoPoint(
    double d,
    double d1,
  ) {
    return Barcode_GeoPoint.fromRef(_new0(d, d1).object);
  }
}

final class $Barcode_GeoPointType extends jni.JObjType<Barcode_GeoPoint> {
  const $Barcode_GeoPointType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$GeoPoint;";

  @override
  Barcode_GeoPoint fromRef(jni.JObjectPtr ref) => Barcode_GeoPoint.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_GeoPointType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_GeoPointType) &&
        other is $Barcode_GeoPointType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$PersonName
class Barcode_PersonName extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_PersonName> $type = type;

  Barcode_PersonName.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_PersonNameType();
  static final _getFirst = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_PersonName__getFirst")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getFirst()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFirst() {
    return const jni.JStringType().fromRef(_getFirst(reference).object);
  }

  static final _getFormattedName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_PersonName__getFormattedName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getFormattedName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFormattedName() {
    return const jni.JStringType().fromRef(_getFormattedName(reference).object);
  }

  static final _getLast = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_PersonName__getLast")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getLast()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLast() {
    return const jni.JStringType().fromRef(_getLast(reference).object);
  }

  static final _getMiddle = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_PersonName__getMiddle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMiddle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getMiddle() {
    return const jni.JStringType().fromRef(_getMiddle(reference).object);
  }

  static final _getPrefix = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_PersonName__getPrefix")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPrefix()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPrefix() {
    return const jni.JStringType().fromRef(_getPrefix(reference).object);
  }

  static final _getPronunciation = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_PersonName__getPronunciation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPronunciation()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPronunciation() {
    return const jni.JStringType().fromRef(_getPronunciation(reference).object);
  }

  static final _getSuffix = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_PersonName__getSuffix")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getSuffix()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSuffix() {
    return const jni.JStringType().fromRef(_getSuffix(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode_PersonName__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3, java.lang.String string4, java.lang.String string5, java.lang.String string6)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_PersonName(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JString string3,
    jni.JString string4,
    jni.JString string5,
    jni.JString string6,
  ) {
    return Barcode_PersonName.fromRef(_new0(
            string.reference,
            string1.reference,
            string2.reference,
            string3.reference,
            string4.reference,
            string5.reference,
            string6.reference)
        .object);
  }
}

final class $Barcode_PersonNameType extends jni.JObjType<Barcode_PersonName> {
  const $Barcode_PersonNameType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$PersonName;";

  @override
  Barcode_PersonName fromRef(jni.JObjectPtr ref) =>
      Barcode_PersonName.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_PersonNameType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_PersonNameType) &&
        other is $Barcode_PersonNameType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$Phone$FormatType
class Barcode_Phone_FormatType extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_Phone_FormatType> $type = type;

  Barcode_Phone_FormatType.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_Phone_FormatTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Barcode_Phone_FormatTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Barcode_Phone_FormatType.implement(
    $Barcode_Phone_FormatTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Barcode_Phone_FormatType.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.mlkit.vision.barcode.common.Barcode$Phone$FormatType",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Barcode_Phone_FormatTypeImpl {
  factory $Barcode_Phone_FormatTypeImpl() = _$Barcode_Phone_FormatTypeImpl;
}

class _$Barcode_Phone_FormatTypeImpl implements $Barcode_Phone_FormatTypeImpl {
  _$Barcode_Phone_FormatTypeImpl();
}

final class $Barcode_Phone_FormatTypeType
    extends jni.JObjType<Barcode_Phone_FormatType> {
  const $Barcode_Phone_FormatTypeType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$Phone$FormatType;";

  @override
  Barcode_Phone_FormatType fromRef(jni.JObjectPtr ref) =>
      Barcode_Phone_FormatType.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_Phone_FormatTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_Phone_FormatTypeType) &&
        other is $Barcode_Phone_FormatTypeType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$Phone
class Barcode_Phone extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_Phone> $type = type;

  Barcode_Phone.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_PhoneType();

  /// from: static public final int TYPE_UNKNOWN
  static const TYPE_UNKNOWN = 0;

  /// from: static public final int TYPE_WORK
  static const TYPE_WORK = 1;

  /// from: static public final int TYPE_HOME
  static const TYPE_HOME = 2;

  /// from: static public final int TYPE_FAX
  static const TYPE_FAX = 3;

  /// from: static public final int TYPE_MOBILE
  static const TYPE_MOBILE = 4;

  static final _getType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Phone__getType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getType()
  int getType() {
    return _getType(reference).integer;
  }

  static final _getNumber = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Phone__getNumber")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getNumber()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getNumber() {
    return const jni.JStringType().fromRef(_getNumber(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Barcode_Phone__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_Phone(
    jni.JString string,
    int i,
  ) {
    return Barcode_Phone.fromRef(_new0(string.reference, i).object);
  }
}

final class $Barcode_PhoneType extends jni.JObjType<Barcode_Phone> {
  const $Barcode_PhoneType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$Phone;";

  @override
  Barcode_Phone fromRef(jni.JObjectPtr ref) => Barcode_Phone.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_PhoneType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_PhoneType) &&
        other is $Barcode_PhoneType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$Sms
class Barcode_Sms extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_Sms> $type = type;

  Barcode_Sms.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_SmsType();
  static final _getMessage = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Sms__getMessage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMessage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getMessage() {
    return const jni.JStringType().fromRef(_getMessage(reference).object);
  }

  static final _getPhoneNumber = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_Sms__getPhoneNumber")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPhoneNumber()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPhoneNumber() {
    return const jni.JStringType().fromRef(_getPhoneNumber(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode_Sms__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_Sms(
    jni.JString string,
    jni.JString string1,
  ) {
    return Barcode_Sms.fromRef(
        _new0(string.reference, string1.reference).object);
  }
}

final class $Barcode_SmsType extends jni.JObjType<Barcode_Sms> {
  const $Barcode_SmsType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$Sms;";

  @override
  Barcode_Sms fromRef(jni.JObjectPtr ref) => Barcode_Sms.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_SmsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_SmsType) && other is $Barcode_SmsType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$UrlBookmark
class Barcode_UrlBookmark extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_UrlBookmark> $type = type;

  Barcode_UrlBookmark.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_UrlBookmarkType();
  static final _getTitle = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_UrlBookmark__getTitle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getTitle() {
    return const jni.JStringType().fromRef(_getTitle(reference).object);
  }

  static final _getUrl = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_UrlBookmark__getUrl")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getUrl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUrl() {
    return const jni.JStringType().fromRef(_getUrl(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode_UrlBookmark__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_UrlBookmark(
    jni.JString string,
    jni.JString string1,
  ) {
    return Barcode_UrlBookmark.fromRef(
        _new0(string.reference, string1.reference).object);
  }
}

final class $Barcode_UrlBookmarkType extends jni.JObjType<Barcode_UrlBookmark> {
  const $Barcode_UrlBookmarkType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$UrlBookmark;";

  @override
  Barcode_UrlBookmark fromRef(jni.JObjectPtr ref) =>
      Barcode_UrlBookmark.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_UrlBookmarkType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_UrlBookmarkType) &&
        other is $Barcode_UrlBookmarkType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$WiFi$EncryptionType
class Barcode_WiFi_EncryptionType extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_WiFi_EncryptionType> $type = type;

  Barcode_WiFi_EncryptionType.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_WiFi_EncryptionTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Barcode_WiFi_EncryptionTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Barcode_WiFi_EncryptionType.implement(
    $Barcode_WiFi_EncryptionTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Barcode_WiFi_EncryptionType.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.mlkit.vision.barcode.common.Barcode$WiFi$EncryptionType",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Barcode_WiFi_EncryptionTypeImpl {
  factory $Barcode_WiFi_EncryptionTypeImpl() =
      _$Barcode_WiFi_EncryptionTypeImpl;
}

class _$Barcode_WiFi_EncryptionTypeImpl
    implements $Barcode_WiFi_EncryptionTypeImpl {
  _$Barcode_WiFi_EncryptionTypeImpl();
}

final class $Barcode_WiFi_EncryptionTypeType
    extends jni.JObjType<Barcode_WiFi_EncryptionType> {
  const $Barcode_WiFi_EncryptionTypeType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$WiFi$EncryptionType;";

  @override
  Barcode_WiFi_EncryptionType fromRef(jni.JObjectPtr ref) =>
      Barcode_WiFi_EncryptionType.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_WiFi_EncryptionTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_WiFi_EncryptionTypeType) &&
        other is $Barcode_WiFi_EncryptionTypeType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode$WiFi
class Barcode_WiFi extends jni.JObject {
  @override
  late final jni.JObjType<Barcode_WiFi> $type = type;

  Barcode_WiFi.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Barcode_WiFiType();

  /// from: static public final int TYPE_OPEN
  static const TYPE_OPEN = 1;

  /// from: static public final int TYPE_WPA
  static const TYPE_WPA = 2;

  /// from: static public final int TYPE_WEP
  static const TYPE_WEP = 3;

  static final _getEncryptionType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_WiFi__getEncryptionType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getEncryptionType()
  int getEncryptionType() {
    return _getEncryptionType(reference).integer;
  }

  static final _getPassword = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_WiFi__getPassword")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPassword()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPassword() {
    return const jni.JStringType().fromRef(_getPassword(reference).object);
  }

  static final _getSsid = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode_WiFi__getSsid")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getSsid()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsid() {
    return const jni.JStringType().fromRef(_getSsid(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Barcode_WiFi__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode_WiFi(
    jni.JString string,
    jni.JString string1,
    int i,
  ) {
    return Barcode_WiFi.fromRef(
        _new0(string.reference, string1.reference, i).object);
  }
}

final class $Barcode_WiFiType extends jni.JObjType<Barcode_WiFi> {
  const $Barcode_WiFiType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/Barcode$WiFi;";

  @override
  Barcode_WiFi fromRef(jni.JObjectPtr ref) => Barcode_WiFi.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Barcode_WiFiType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Barcode_WiFiType) &&
        other is $Barcode_WiFiType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode
class Barcode extends jni.JObject {
  @override
  late final jni.JObjType<Barcode> $type = type;

  Barcode.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $BarcodeType();

  /// from: static public final int FORMAT_UNKNOWN
  static const FORMAT_UNKNOWN = -1;

  /// from: static public final int FORMAT_ALL_FORMATS
  static const FORMAT_ALL_FORMATS = 0;

  /// from: static public final int FORMAT_CODE_128
  static const FORMAT_CODE_128 = 1;

  /// from: static public final int FORMAT_CODE_39
  static const FORMAT_CODE_39 = 2;

  /// from: static public final int FORMAT_CODE_93
  static const FORMAT_CODE_93 = 4;

  /// from: static public final int FORMAT_CODABAR
  static const FORMAT_CODABAR = 8;

  /// from: static public final int FORMAT_DATA_MATRIX
  static const FORMAT_DATA_MATRIX = 16;

  /// from: static public final int FORMAT_EAN_13
  static const FORMAT_EAN_13 = 32;

  /// from: static public final int FORMAT_EAN_8
  static const FORMAT_EAN_8 = 64;

  /// from: static public final int FORMAT_ITF
  static const FORMAT_ITF = 128;

  /// from: static public final int FORMAT_QR_CODE
  static const FORMAT_QR_CODE = 256;

  /// from: static public final int FORMAT_UPC_A
  static const FORMAT_UPC_A = 512;

  /// from: static public final int FORMAT_UPC_E
  static const FORMAT_UPC_E = 1024;

  /// from: static public final int FORMAT_PDF417
  static const FORMAT_PDF417 = 2048;

  /// from: static public final int FORMAT_AZTEC
  static const FORMAT_AZTEC = 4096;

  /// from: static public final int TYPE_UNKNOWN
  static const TYPE_UNKNOWN = 0;

  /// from: static public final int TYPE_CONTACT_INFO
  static const TYPE_CONTACT_INFO = 1;

  /// from: static public final int TYPE_EMAIL
  static const TYPE_EMAIL = 2;

  /// from: static public final int TYPE_ISBN
  static const TYPE_ISBN = 3;

  /// from: static public final int TYPE_PHONE
  static const TYPE_PHONE = 4;

  /// from: static public final int TYPE_PRODUCT
  static const TYPE_PRODUCT = 5;

  /// from: static public final int TYPE_SMS
  static const TYPE_SMS = 6;

  /// from: static public final int TYPE_TEXT
  static const TYPE_TEXT = 7;

  /// from: static public final int TYPE_URL
  static const TYPE_URL = 8;

  /// from: static public final int TYPE_WIFI
  static const TYPE_WIFI = 9;

  /// from: static public final int TYPE_GEO
  static const TYPE_GEO = 10;

  /// from: static public final int TYPE_CALENDAR_EVENT
  static const TYPE_CALENDAR_EVENT = 11;

  /// from: static public final int TYPE_DRIVER_LICENSE
  static const TYPE_DRIVER_LICENSE = 12;

  static final _getFormat = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getFormat")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFormat()
  int getFormat() {
    return _getFormat(reference).integer;
  }

  static final _getValueType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getValueType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getValueType()
  int getValueType() {
    return _getValueType(reference).integer;
  }

  static final _getBoundingBox = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getBoundingBox")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Rect getBoundingBox()
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getBoundingBox() {
    return const rect_.$RectType().fromRef(_getBoundingBox(reference).object);
  }

  static final _getCalendarEvent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getCalendarEvent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$CalendarEvent getCalendarEvent()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_CalendarEvent getCalendarEvent() {
    return const $Barcode_CalendarEventType()
        .fromRef(_getCalendarEvent(reference).object);
  }

  static final _getContactInfo = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getContactInfo")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$ContactInfo getContactInfo()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_ContactInfo getContactInfo() {
    return const $Barcode_ContactInfoType()
        .fromRef(_getContactInfo(reference).object);
  }

  static final _getDriverLicense = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getDriverLicense")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$DriverLicense getDriverLicense()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_DriverLicense getDriverLicense() {
    return const $Barcode_DriverLicenseType()
        .fromRef(_getDriverLicense(reference).object);
  }

  static final _getEmail = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getEmail")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$Email getEmail()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_Email getEmail() {
    return const $Barcode_EmailType().fromRef(_getEmail(reference).object);
  }

  static final _getGeoPoint = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getGeoPoint")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$GeoPoint getGeoPoint()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_GeoPoint getGeoPoint() {
    return const $Barcode_GeoPointType()
        .fromRef(_getGeoPoint(reference).object);
  }

  static final _getPhone = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getPhone")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$Phone getPhone()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_Phone getPhone() {
    return const $Barcode_PhoneType().fromRef(_getPhone(reference).object);
  }

  static final _getSms = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Barcode__getSms")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$Sms getSms()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_Sms getSms() {
    return const $Barcode_SmsType().fromRef(_getSms(reference).object);
  }

  static final _getUrl = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Barcode__getUrl")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$UrlBookmark getUrl()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_UrlBookmark getUrl() {
    return const $Barcode_UrlBookmarkType().fromRef(_getUrl(reference).object);
  }

  static final _getWifi = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getWifi")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$WiFi getWifi()
  /// The returned object must be released after use, by calling the [release] method.
  Barcode_WiFi getWifi() {
    return const $Barcode_WiFiType().fromRef(_getWifi(reference).object);
  }

  static final _getDisplayValue = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getDisplayValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getDisplayValue()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDisplayValue() {
    return const jni.JStringType().fromRef(_getDisplayValue(reference).object);
  }

  static final _getRawValue = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getRawValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getRawValue()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRawValue() {
    return const jni.JStringType().fromRef(_getRawValue(reference).object);
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Barcode__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.google.mlkit.vision.barcode.common.internal.BarcodeSource barcodeSource)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode(
    jni.JObject barcodeSource,
  ) {
    return Barcode.fromRef(_new0(barcodeSource.reference).object);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode__new1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.google.mlkit.vision.barcode.common.internal.BarcodeSource barcodeSource, android.graphics.Matrix matrix)
  /// The returned object must be released after use, by calling the [release] method.
  factory Barcode.new1(
    jni.JObject barcodeSource,
    jni.JObject matrix,
  ) {
    return Barcode.fromRef(
        _new1(barcodeSource.reference, matrix.reference).object);
  }

  static final _getRawBytes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getRawBytes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getRawBytes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getRawBytes() {
    return const jni.JArrayType(jni.jbyteType())
        .fromRef(_getRawBytes(reference).object);
  }

  static final _getCornerPoints = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Barcode__getCornerPoints")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Point[] getCornerPoints()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<point_.Point> getCornerPoints() {
    return const jni.JArrayType(point_.$PointType())
        .fromRef(_getCornerPoints(reference).object);
  }
}

final class $BarcodeType extends jni.JObjType<Barcode> {
  const $BarcodeType();

  @override
  String get signature => r"Lcom/google/mlkit/vision/barcode/common/Barcode;";

  @override
  Barcode fromRef(jni.JObjectPtr ref) => Barcode.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BarcodeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BarcodeType) && other is $BarcodeType;
  }
}
