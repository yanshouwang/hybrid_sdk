// ignore_for_file: use_super_parameters
// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../_init.dart";

/// from: com.google.mlkit.vision.barcode.ZoomSuggestionOptions$Builder
class ZoomSuggestionOptions_Builder extends jni.JObject {
  @override
  late final jni.JObjType<ZoomSuggestionOptions_Builder> $type = type;

  ZoomSuggestionOptions_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ZoomSuggestionOptions_BuilderType();
  static final _setMaxSupportedZoomRatio = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Float)>>(
          "ZoomSuggestionOptions_Builder__setMaxSupportedZoomRatio")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public com.google.mlkit.vision.barcode.ZoomSuggestionOptions$Builder setMaxSupportedZoomRatio(float f)
  /// The returned object must be released after use, by calling the [release] method.
  ZoomSuggestionOptions_Builder setMaxSupportedZoomRatio(
    double f,
  ) {
    return const $ZoomSuggestionOptions_BuilderType()
        .fromRef(_setMaxSupportedZoomRatio(reference, f).object);
  }

  static final _build = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ZoomSuggestionOptions_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.ZoomSuggestionOptions build()
  /// The returned object must be released after use, by calling the [release] method.
  ZoomSuggestionOptions build() {
    return const $ZoomSuggestionOptionsType().fromRef(_build(reference).object);
  }

  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ZoomSuggestionOptions_Builder__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.google.mlkit.vision.barcode.ZoomSuggestionOptions$ZoomCallback zoomCallback)
  /// The returned object must be released after use, by calling the [release] method.
  factory ZoomSuggestionOptions_Builder(
    ZoomSuggestionOptions_ZoomCallback zoomCallback,
  ) {
    return ZoomSuggestionOptions_Builder.fromRef(
        _new0(zoomCallback.reference).object);
  }
}

final class $ZoomSuggestionOptions_BuilderType
    extends jni.JObjType<ZoomSuggestionOptions_Builder> {
  const $ZoomSuggestionOptions_BuilderType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/ZoomSuggestionOptions$Builder;";

  @override
  ZoomSuggestionOptions_Builder fromRef(jni.JObjectPtr ref) =>
      ZoomSuggestionOptions_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ZoomSuggestionOptions_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ZoomSuggestionOptions_BuilderType) &&
        other is $ZoomSuggestionOptions_BuilderType;
  }
}

/// from: com.google.mlkit.vision.barcode.ZoomSuggestionOptions$ZoomCallback
class ZoomSuggestionOptions_ZoomCallback extends jni.JObject {
  @override
  late final jni.JObjType<ZoomSuggestionOptions_ZoomCallback> $type = type;

  ZoomSuggestionOptions_ZoomCallback.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ZoomSuggestionOptions_ZoomCallbackType();
  static final _setZoom = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("ZoomSuggestionOptions_ZoomCallback__setZoom")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public abstract boolean setZoom(float f)
  bool setZoom(
    double f,
  ) {
    return _setZoom(reference, f).boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ZoomSuggestionOptions_ZoomCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"setZoom(F)Z") {
        final $r = _$impls[$p]!.setZoom(
          $a[0]
              .castTo(const jni.JFloatType(), releaseOriginal: true)
              .floatValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory ZoomSuggestionOptions_ZoomCallback.implement(
    $ZoomSuggestionOptions_ZoomCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ZoomSuggestionOptions_ZoomCallback.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.google.mlkit.vision.barcode.ZoomSuggestionOptions$ZoomCallback",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $ZoomSuggestionOptions_ZoomCallbackImpl {
  factory $ZoomSuggestionOptions_ZoomCallbackImpl({
    required bool Function(double f) setZoom,
  }) = _$ZoomSuggestionOptions_ZoomCallbackImpl;

  bool setZoom(double f);
}

class _$ZoomSuggestionOptions_ZoomCallbackImpl
    implements $ZoomSuggestionOptions_ZoomCallbackImpl {
  _$ZoomSuggestionOptions_ZoomCallbackImpl({
    required bool Function(double f) setZoom,
  }) : _setZoom = setZoom;

  final bool Function(double f) _setZoom;

  bool setZoom(double f) {
    return _setZoom(f);
  }
}

final class $ZoomSuggestionOptions_ZoomCallbackType
    extends jni.JObjType<ZoomSuggestionOptions_ZoomCallback> {
  const $ZoomSuggestionOptions_ZoomCallbackType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/ZoomSuggestionOptions$ZoomCallback;";

  @override
  ZoomSuggestionOptions_ZoomCallback fromRef(jni.JObjectPtr ref) =>
      ZoomSuggestionOptions_ZoomCallback.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ZoomSuggestionOptions_ZoomCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ZoomSuggestionOptions_ZoomCallbackType) &&
        other is $ZoomSuggestionOptions_ZoomCallbackType;
  }
}

/// from: com.google.mlkit.vision.barcode.ZoomSuggestionOptions
class ZoomSuggestionOptions extends jni.JObject {
  @override
  late final jni.JObjType<ZoomSuggestionOptions> $type = type;

  ZoomSuggestionOptions.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ZoomSuggestionOptionsType();
  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ZoomSuggestionOptions__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference).integer;
  }

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ZoomSuggestionOptions__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(
    jni.JObject object,
  ) {
    return _equals1(reference, object.reference).boolean;
  }

  static final _zza = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ZoomSuggestionOptions__zza")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final float zza()
  double zza() {
    return _zza(reference).float;
  }

  static final _zzb = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ZoomSuggestionOptions__zzb")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final com.google.mlkit.vision.barcode.ZoomSuggestionOptions$ZoomCallback zzb()
  /// The returned object must be released after use, by calling the [release] method.
  ZoomSuggestionOptions_ZoomCallback zzb() {
    return const $ZoomSuggestionOptions_ZoomCallbackType()
        .fromRef(_zzb(reference).object);
  }
}

final class $ZoomSuggestionOptionsType
    extends jni.JObjType<ZoomSuggestionOptions> {
  const $ZoomSuggestionOptionsType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/ZoomSuggestionOptions;";

  @override
  ZoomSuggestionOptions fromRef(jni.JObjectPtr ref) =>
      ZoomSuggestionOptions.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ZoomSuggestionOptionsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ZoomSuggestionOptionsType) &&
        other is $ZoomSuggestionOptionsType;
  }
}
