// ignore_for_file: use_super_parameters
// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Task.dart" as task_;

import "../../../../../java/util/concurrent/Executor.dart" as executor_;
import "../../../../../_init.dart";

/// from: com.google.android.gms.tasks.Tasks
class Tasks extends jni.JObject {
  @override
  late final jni.JObjType<Tasks> $type = type;

  Tasks.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $TasksType();
  static final _call = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Tasks__call")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task call(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<$TResult> call<$TResult extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$TResult> TResult,
  }) {
    return task_.$TaskType(TResult).fromRef(_call(callable.reference).object);
  }

  static final _call1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Tasks__call1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task call(java.util.concurrent.Executor executor, java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<$TResult> call1<$TResult extends jni.JObject>(
    executor_.Executor executor,
    jni.JObject callable, {
    required jni.JObjType<$TResult> TResult,
  }) {
    return task_
        .$TaskType(TResult)
        .fromRef(_call1(executor.reference, callable.reference).object);
  }

  static final _forCanceled =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Tasks__forCanceled")
          .asFunction<jni.JniResult Function()>();

  /// from: static public com.google.android.gms.tasks.Task forCanceled()
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<$TResult> forCanceled<$TResult extends jni.JObject>({
    required jni.JObjType<$TResult> TResult,
  }) {
    return task_.$TaskType(TResult).fromRef(_forCanceled().object);
  }

  static final _forException = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Tasks__forException")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task forException(java.lang.Exception exception)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<$TResult> forException<$TResult extends jni.JObject>(
    jni.JObject exception, {
    required jni.JObjType<$TResult> TResult,
  }) {
    return task_
        .$TaskType(TResult)
        .fromRef(_forException(exception.reference).object);
  }

  static final _forResult = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Tasks__forResult")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task forResult(TResult object)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<$TResult> forResult<$TResult extends jni.JObject>(
    $TResult object, {
    jni.JObjType<$TResult>? TResult,
  }) {
    TResult ??= jni.lowestCommonSuperType([
      object.$type,
    ]) as jni.JObjType<$TResult>;
    return task_
        .$TaskType(TResult)
        .fromRef(_forResult(object.reference).object);
  }

  static final _whenAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Tasks__whenAll")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task whenAll(java.util.Collection collection)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<jni.JObject> whenAll(
    jni.JObject collection,
  ) {
    return const task_.$TaskType(jni.JObjectType())
        .fromRef(_whenAll(collection.reference).object);
  }

  static final _whenAll1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Tasks__whenAll1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task whenAll(java.lang.Object[] tasks)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<jni.JObject> whenAll1(
    jni.JArray<task_.Task<jni.JObject>> tasks,
  ) {
    return const task_.$TaskType(jni.JObjectType())
        .fromRef(_whenAll1(tasks.reference).object);
  }

  static final _whenAllComplete = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Tasks__whenAllComplete")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task whenAllComplete(java.util.Collection collection)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<jni.JList<task_.Task<jni.JObject>>> whenAllComplete(
    jni.JObject collection,
  ) {
    return const task_.$TaskType(
            jni.JListType(task_.$TaskType(jni.JObjectType())))
        .fromRef(_whenAllComplete(collection.reference).object);
  }

  static final _whenAllComplete1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Tasks__whenAllComplete1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task whenAllComplete(java.lang.Object[] tasks)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<jni.JList<task_.Task<jni.JObject>>> whenAllComplete1(
    jni.JArray<task_.Task<jni.JObject>> tasks,
  ) {
    return const task_.$TaskType(
            jni.JListType(task_.$TaskType(jni.JObjectType())))
        .fromRef(_whenAllComplete1(tasks.reference).object);
  }

  static final _whenAllSuccess = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Tasks__whenAllSuccess")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task whenAllSuccess(java.util.Collection collection)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<jni.JList<$TResult>>
      whenAllSuccess<$TResult extends jni.JObject>(
    jni.JObject collection, {
    required jni.JObjType<$TResult> TResult,
  }) {
    return task_
        .$TaskType(jni.JListType(TResult))
        .fromRef(_whenAllSuccess(collection.reference).object);
  }

  static final _whenAllSuccess1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Tasks__whenAllSuccess1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task whenAllSuccess(java.lang.Object[] tasks)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<jni.JList<$TResult>>
      whenAllSuccess1<$TResult extends jni.JObject>(
    jni.JArray<task_.Task<jni.JObject>> tasks, {
    required jni.JObjType<$TResult> TResult,
  }) {
    return task_
        .$TaskType(jni.JListType(TResult))
        .fromRef(_whenAllSuccess1(tasks.reference).object);
  }

  static final _withTimeout = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Tasks__withTimeout")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.android.gms.tasks.Task withTimeout(com.google.android.gms.tasks.Task task, long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  static task_.Task<$T> withTimeout<$T extends jni.JObject>(
    task_.Task<$T> task,
    int j,
    jni.JObject timeUnit, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      (task.$type as task_.$TaskType).TResult,
    ]) as jni.JObjType<$T>;
    return task_
        .$TaskType(T)
        .fromRef(_withTimeout(task.reference, j, timeUnit.reference).object);
  }

  static final _await0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Tasks__await0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public TResult await(com.google.android.gms.tasks.Task task)
  /// The returned object must be released after use, by calling the [release] method.
  static $TResult await0<$TResult extends jni.JObject>(
    task_.Task<$TResult> task, {
    jni.JObjType<$TResult>? TResult,
  }) {
    TResult ??= jni.lowestCommonSuperType([
      (task.$type as task_.$TaskType).TResult,
    ]) as jni.JObjType<$TResult>;
    return TResult.fromRef(_await0(task.reference).object);
  }

  static final _await1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Tasks__await1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public TResult await(com.google.android.gms.tasks.Task task, long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  static $TResult await1<$TResult extends jni.JObject>(
    task_.Task<$TResult> task,
    int j,
    jni.JObject timeUnit, {
    jni.JObjType<$TResult>? TResult,
  }) {
    TResult ??= jni.lowestCommonSuperType([
      (task.$type as task_.$TaskType).TResult,
    ]) as jni.JObjType<$TResult>;
    return TResult.fromRef(
        _await1(task.reference, j, timeUnit.reference).object);
  }
}

final class $TasksType extends jni.JObjType<Tasks> {
  const $TasksType();

  @override
  String get signature => r"Lcom/google/android/gms/tasks/Tasks;";

  @override
  Tasks fromRef(jni.JObjectPtr ref) => Tasks.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TasksType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TasksType) && other is $TasksType;
  }
}
