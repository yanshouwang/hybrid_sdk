// ignore_for_file: use_super_parameters
// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../lang/Runnable.dart" as runnable_;
import "../../../_init.dart";

/// from: java.util.concurrent.Executors
class Executors extends jni.JObject {
  @override
  late final jni.JObjType<Executors> $type = type;

  Executors.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ExecutorsType();
  static final _newFixedThreadPool =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int32)>>(
              "Executors__newFixedThreadPool")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newFixedThreadPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(_newFixedThreadPool(i).object);
  }

  static final _newWorkStealingPool =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int32)>>(
              "Executors__newWorkStealingPool")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newWorkStealingPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(_newWorkStealingPool(i).object);
  }

  static final _newWorkStealingPool1 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__newWorkStealingPool1")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newWorkStealingPool1() {
    return const jni.JObjectType().fromRef(_newWorkStealingPool1().object);
  }

  static final _newFixedThreadPool1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Executors__newFixedThreadPool1")
      .asFunction<jni.JniResult Function(int, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newFixedThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType()
        .fromRef(_newFixedThreadPool1(i, threadFactory.reference).object);
  }

  static final _newSingleThreadExecutor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__newSingleThreadExecutor")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadExecutor() {
    return const jni.JObjectType().fromRef(_newSingleThreadExecutor().object);
  }

  static final _newSingleThreadExecutor1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__newSingleThreadExecutor1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadExecutor1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType()
        .fromRef(_newSingleThreadExecutor1(threadFactory.reference).object);
  }

  static final _newCachedThreadPool =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__newCachedThreadPool")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newCachedThreadPool() {
    return const jni.JObjectType().fromRef(_newCachedThreadPool().object);
  }

  static final _newCachedThreadPool1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__newCachedThreadPool1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newCachedThreadPool1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType()
        .fromRef(_newCachedThreadPool1(threadFactory.reference).object);
  }

  static final _newSingleThreadScheduledExecutor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__newSingleThreadScheduledExecutor")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadScheduledExecutor() {
    return const jni.JObjectType()
        .fromRef(_newSingleThreadScheduledExecutor().object);
  }

  static final _newSingleThreadScheduledExecutor1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__newSingleThreadScheduledExecutor1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadScheduledExecutor1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType().fromRef(
        _newSingleThreadScheduledExecutor1(threadFactory.reference).object);
  }

  static final _newScheduledThreadPool =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int32)>>(
              "Executors__newScheduledThreadPool")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newScheduledThreadPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(_newScheduledThreadPool(i).object);
  }

  static final _newScheduledThreadPool1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Executors__newScheduledThreadPool1")
      .asFunction<jni.JniResult Function(int, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newScheduledThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType()
        .fromRef(_newScheduledThreadPool1(i, threadFactory.reference).object);
  }

  static final _unconfigurableExecutorService = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__unconfigurableExecutorService")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService executorService)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject unconfigurableExecutorService(
    jni.JObject executorService,
  ) {
    return const jni.JObjectType().fromRef(
        _unconfigurableExecutorService(executorService.reference).object);
  }

  static final _unconfigurableScheduledExecutorService = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__unconfigurableScheduledExecutorService")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService scheduledExecutorService)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject unconfigurableScheduledExecutorService(
    jni.JObject scheduledExecutorService,
  ) {
    return const jni.JObjectType().fromRef(
        _unconfigurableScheduledExecutorService(
                scheduledExecutorService.reference)
            .object);
  }

  static final _defaultThreadFactory =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__defaultThreadFactory")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ThreadFactory defaultThreadFactory()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject defaultThreadFactory() {
    return const jni.JObjectType().fromRef(_defaultThreadFactory().object);
  }

  static final _privilegedThreadFactory =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__privilegedThreadFactory")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ThreadFactory privilegedThreadFactory()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject privilegedThreadFactory() {
    return const jni.JObjectType().fromRef(_privilegedThreadFactory().object);
  }

  static final _callable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Executors__callable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable, T object)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable<$T extends jni.JObject>(
    runnable_.Runnable runnable,
    $T object, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      object.$type,
    ]) as jni.JObjType<$T>;
    return const jni.JObjectType()
        .fromRef(_callable(runnable.reference, object.reference).object);
  }

  static final _callable1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__callable1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable1(
    runnable_.Runnable runnable,
  ) {
    return const jni.JObjectType()
        .fromRef(_callable1(runnable.reference).object);
  }

  static final _callable2 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__callable2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedAction privilegedAction)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable2(
    jni.JObject privilegedAction,
  ) {
    return const jni.JObjectType()
        .fromRef(_callable2(privilegedAction.reference).object);
  }

  static final _callable3 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__callable3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction privilegedExceptionAction)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable3(
    jni.JObject privilegedExceptionAction,
  ) {
    return const jni.JObjectType()
        .fromRef(_callable3(privilegedExceptionAction.reference).object);
  }

  static final _privilegedCallable = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__privilegedCallable")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject privilegedCallable<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType()
        .fromRef(_privilegedCallable(callable.reference).object);
  }

  static final _privilegedCallableUsingCurrentClassLoader = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__privilegedCallableUsingCurrentClassLoader")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject
      privilegedCallableUsingCurrentClassLoader<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(
        _privilegedCallableUsingCurrentClassLoader(callable.reference).object);
  }
}

final class $ExecutorsType extends jni.JObjType<Executors> {
  const $ExecutorsType();

  @override
  String get signature => r"Ljava/util/concurrent/Executors;";

  @override
  Executors fromRef(jni.JObjectPtr ref) => Executors.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExecutorsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExecutorsType) && other is $ExecutorsType;
  }
}
