// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Windows Library for Hybrid OS.
class HybridOSWindowsLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HybridOSWindowsLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HybridOSWindowsLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int VerSetConditionMask(
    int ConditionMask,
    int TypeMask,
    int Condition,
  ) {
    return _VerSetConditionMask(
      ConditionMask,
      TypeMask,
      Condition,
    );
  }

  late final _VerSetConditionMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.UnsignedLong,
              ffi.UnsignedChar)>>('VerSetConditionMask');
  late final _VerSetConditionMask =
      _VerSetConditionMaskPtr.asFunction<int Function(int, int, int)>();

  int GetVersionExW(
    ffi.Pointer<OSVERSIONINFOW> lpVersionInformation,
  ) {
    return _GetVersionExW(
      lpVersionInformation,
    );
  }

  late final _GetVersionExWPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSVERSIONINFOW>)>>(
      'GetVersionExW');
  late final _GetVersionExW =
      _GetVersionExWPtr.asFunction<int Function(ffi.Pointer<OSVERSIONINFOW>)>();

  int VerifyVersionInfoW(
    ffi.Pointer<OSVERSIONINFOEXW> lpVersionInformation,
    int dwTypeMask,
    int dwlConditionMask,
  ) {
    return _VerifyVersionInfoW(
      lpVersionInformation,
      dwTypeMask,
      dwlConditionMask,
    );
  }

  late final _VerifyVersionInfoWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSVERSIONINFOEXW>, ffi.UnsignedLong,
              ffi.UnsignedLongLong)>>('VerifyVersionInfoW');
  late final _VerifyVersionInfoW = _VerifyVersionInfoWPtr.asFunction<
      int Function(ffi.Pointer<OSVERSIONINFOEXW>, int, int)>();
}

final class OSVERSIONINFOW extends ffi.Struct {
  @ffi.UnsignedLong()
  external int dwOSVersionInfoSize;

  @ffi.UnsignedLong()
  external int dwMajorVersion;

  @ffi.UnsignedLong()
  external int dwMinorVersion;

  @ffi.UnsignedLong()
  external int dwBuildNumber;

  @ffi.UnsignedLong()
  external int dwPlatformId;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.WChar> szCSDVersion;
}

final class OSVERSIONINFOEXW extends ffi.Struct {
  @ffi.UnsignedLong()
  external int dwOSVersionInfoSize;

  @ffi.UnsignedLong()
  external int dwMajorVersion;

  @ffi.UnsignedLong()
  external int dwMinorVersion;

  @ffi.UnsignedLong()
  external int dwBuildNumber;

  @ffi.UnsignedLong()
  external int dwPlatformId;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.WChar> szCSDVersion;

  @ffi.UnsignedShort()
  external int wServicePackMajor;

  @ffi.UnsignedShort()
  external int wServicePackMinor;

  @ffi.UnsignedShort()
  external int wSuiteMask;

  @ffi.UnsignedChar()
  external int wProductType;

  @ffi.UnsignedChar()
  external int wReserved;
}

const int WIN32_WINNT_NT4 = 1024;

const int WIN32_WINNT_WIN2K = 1280;

const int WIN32_WINNT_WINXP = 1281;

const int WIN32_WINNT_WS03 = 1282;

const int WIN32_WINNT_WIN6 = 1536;

const int WIN32_WINNT_VISTA = 1536;

const int WIN32_WINNT_WS08 = 1536;

const int WIN32_WINNT_LONGHORN = 1536;

const int WIN32_WINNT_WIN7 = 1537;

const int WIN32_WINNT_WIN8 = 1538;

const int WIN32_WINNT_WINBLUE = 1539;

const int WIN32_WINNT_WINTHRESHOLD = 2560;

const int WIN32_WINNT_WIN10 = 2560;

const int FALSE = 0;

const int TRUE = 1;

const int VER_SERVER_NT = 2147483648;

const int VER_WORKSTATION_NT = 1073741824;

const int VER_SUITE_SMALLBUSINESS = 1;

const int VER_SUITE_ENTERPRISE = 2;

const int VER_SUITE_BACKOFFICE = 4;

const int VER_SUITE_COMMUNICATIONS = 8;

const int VER_SUITE_TERMINAL = 16;

const int VER_SUITE_SMALLBUSINESS_RESTRICTED = 32;

const int VER_SUITE_EMBEDDEDNT = 64;

const int VER_SUITE_DATACENTER = 128;

const int VER_SUITE_SINGLEUSERTS = 256;

const int VER_SUITE_PERSONAL = 512;

const int VER_SUITE_BLADE = 1024;

const int VER_SUITE_EMBEDDED_RESTRICTED = 2048;

const int VER_SUITE_SECURITY_APPLIANCE = 4096;

const int VER_SUITE_STORAGE_SERVER = 8192;

const int VER_SUITE_COMPUTE_SERVER = 16384;

const int VER_SUITE_WH_SERVER = 32768;

const int VER_SUITE_MULTIUSERTS = 131072;

const int VER_EQUAL = 1;

const int VER_GREATER = 2;

const int VER_GREATER_EQUAL = 3;

const int VER_LESS = 4;

const int VER_LESS_EQUAL = 5;

const int VER_AND = 6;

const int VER_OR = 7;

const int VER_CONDITION_MASK = 7;

const int VER_NUM_BITS_PER_CONDITION_MASK = 3;

const int VER_MINORVERSION = 1;

const int VER_MAJORVERSION = 2;

const int VER_BUILDNUMBER = 4;

const int VER_PLATFORMID = 8;

const int VER_SERVICEPACKMINOR = 16;

const int VER_SERVICEPACKMAJOR = 32;

const int VER_SUITENAME = 64;

const int VER_PRODUCT_TYPE = 128;

const int VER_NT_WORKSTATION = 1;

const int VER_NT_DOMAIN_CONTROLLER = 2;

const int VER_NT_SERVER = 3;

const int VER_PLATFORM_WIN32s = 0;

const int VER_PLATFORM_WIN32_WINDOWS = 1;

const int VER_PLATFORM_WIN32_NT = 2;
