// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `libyuv`.
///
class LibYUV {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibYUV(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibYUV.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Compute a hash for specified memory. Seed of 5381 recommended.
  int HashDjb2(
    ffi.Pointer<ffi.Uint8> src,
    int count,
    int seed,
  ) {
    return _HashDjb2(
      src,
      count,
      seed,
    );
  }

  late final _HashDjb2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint64, ffi.Uint32)>>('HashDjb2');
  late final _HashDjb2 =
      _HashDjb2Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  /// Hamming Distance
  int ComputeHammingDistance(
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> src_b,
    int count,
  ) {
    return _ComputeHammingDistance(
      src_a,
      src_b,
      count,
    );
  }

  late final _ComputeHammingDistancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ComputeHammingDistance');
  late final _ComputeHammingDistance = _ComputeHammingDistancePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  /// Scan an opaque argb image and return fourcc based on alpha offset.
  /// Returns FOURCC_ARGB, FOURCC_BGRA, or 0 if unknown.
  int ARGBDetect(
    ffi.Pointer<ffi.Uint8> argb,
    int stride_argb,
    int width,
    int height,
  ) {
    return _ARGBDetect(
      argb,
      stride_argb,
      width,
      height,
    );
  }

  late final _ARGBDetectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int,
              ffi.Int)>>('ARGBDetect');
  late final _ARGBDetect = _ARGBDetectPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Sum Square Error - used to compute Mean Square Error or PSNR.
  int ComputeSumSquareError(
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> src_b,
    int count,
  ) {
    return _ComputeSumSquareError(
      src_a,
      src_b,
      count,
    );
  }

  late final _ComputeSumSquareErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ComputeSumSquareError');
  late final _ComputeSumSquareError = _ComputeSumSquareErrorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  int ComputeSumSquareErrorPlane(
    ffi.Pointer<ffi.Uint8> src_a,
    int stride_a,
    ffi.Pointer<ffi.Uint8> src_b,
    int stride_b,
    int width,
    int height,
  ) {
    return _ComputeSumSquareErrorPlane(
      src_a,
      stride_a,
      src_b,
      stride_b,
      width,
      height,
    );
  }

  late final _ComputeSumSquareErrorPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ComputeSumSquareErrorPlane');
  late final _ComputeSumSquareErrorPlane =
      _ComputeSumSquareErrorPlanePtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              int, int)>();

  late final ffi.Pointer<ffi.Int> _kMaxPsnr = _lookup<ffi.Int>('kMaxPsnr');

  int get kMaxPsnr => _kMaxPsnr.value;

  double SumSquareErrorToPsnr(
    int sse,
    int count,
  ) {
    return _SumSquareErrorToPsnr(
      sse,
      count,
    );
  }

  late final _SumSquareErrorToPsnrPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint64, ffi.Uint64)>>(
          'SumSquareErrorToPsnr');
  late final _SumSquareErrorToPsnr =
      _SumSquareErrorToPsnrPtr.asFunction<double Function(int, int)>();

  double CalcFramePsnr(
    ffi.Pointer<ffi.Uint8> src_a,
    int stride_a,
    ffi.Pointer<ffi.Uint8> src_b,
    int stride_b,
    int width,
    int height,
  ) {
    return _CalcFramePsnr(
      src_a,
      stride_a,
      src_b,
      stride_b,
      width,
      height,
    );
  }

  late final _CalcFramePsnrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('CalcFramePsnr');
  late final _CalcFramePsnr = _CalcFramePsnrPtr.asFunction<
      double Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  double I420Psnr(
    ffi.Pointer<ffi.Uint8> src_y_a,
    int stride_y_a,
    ffi.Pointer<ffi.Uint8> src_u_a,
    int stride_u_a,
    ffi.Pointer<ffi.Uint8> src_v_a,
    int stride_v_a,
    ffi.Pointer<ffi.Uint8> src_y_b,
    int stride_y_b,
    ffi.Pointer<ffi.Uint8> src_u_b,
    int stride_u_b,
    ffi.Pointer<ffi.Uint8> src_v_b,
    int stride_v_b,
    int width,
    int height,
  ) {
    return _I420Psnr(
      src_y_a,
      stride_y_a,
      src_u_a,
      stride_u_a,
      src_v_a,
      stride_v_a,
      src_y_b,
      stride_y_b,
      src_u_b,
      stride_u_b,
      src_v_b,
      stride_v_b,
      width,
      height,
    );
  }

  late final _I420PsnrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420Psnr');
  late final _I420Psnr = _I420PsnrPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  double CalcFrameSsim(
    ffi.Pointer<ffi.Uint8> src_a,
    int stride_a,
    ffi.Pointer<ffi.Uint8> src_b,
    int stride_b,
    int width,
    int height,
  ) {
    return _CalcFrameSsim(
      src_a,
      stride_a,
      src_b,
      stride_b,
      width,
      height,
    );
  }

  late final _CalcFrameSsimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('CalcFrameSsim');
  late final _CalcFrameSsim = _CalcFrameSsimPtr.asFunction<
      double Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  double I420Ssim(
    ffi.Pointer<ffi.Uint8> src_y_a,
    int stride_y_a,
    ffi.Pointer<ffi.Uint8> src_u_a,
    int stride_u_a,
    ffi.Pointer<ffi.Uint8> src_v_a,
    int stride_v_a,
    ffi.Pointer<ffi.Uint8> src_y_b,
    int stride_y_b,
    ffi.Pointer<ffi.Uint8> src_u_b,
    int stride_u_b,
    ffi.Pointer<ffi.Uint8> src_v_b,
    int stride_v_b,
    int width,
    int height,
  ) {
    return _I420Ssim(
      src_y_a,
      stride_y_a,
      src_u_a,
      stride_u_a,
      src_v_a,
      stride_v_a,
      src_y_b,
      stride_y_b,
      src_u_b,
      stride_u_b,
      src_v_b,
      stride_v_b,
      width,
      height,
    );
  }

  late final _I420SsimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420Ssim');
  late final _I420Ssim = _I420SsimPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I444 to I420.
  int I444ToI420(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I444ToI420(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I444ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444ToI420');
  late final _I444ToI420 = _I444ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I444 to NV12.
  int I444ToNV12(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _I444ToNV12(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _I444ToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444ToNV12');
  late final _I444ToNV12 = _I444ToNV12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I444 to NV21.
  int I444ToNV21(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _I444ToNV21(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _I444ToNV21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444ToNV21');
  late final _I444ToNV21 = _I444ToNV21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I422 to I420.
  int I422ToI420(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I422ToI420(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I422ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToI420');
  late final _I422ToI420 = _I422ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I422 to I444.
  int I422ToI444(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I422ToI444(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I422ToI444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToI444');
  late final _I422ToI444 = _I422ToI444Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I422 to NV21.
  int I422ToNV21(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _I422ToNV21(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _I422ToNV21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToNV21');
  late final _I422ToNV21 = _I422ToNV21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420Copy(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I420Copy(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I420CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420Copy');
  late final _I420Copy = _I420CopyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I420 to I444.
  int I420ToI444(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I420ToI444(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I420ToI444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToI444');
  late final _I420ToI444 = _I420ToI444Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I010Copy(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I010Copy(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I010CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010Copy');
  late final _I010Copy = _I010CopyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  int I010ToI420(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I010ToI420(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I010ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010ToI420');
  late final _I010ToI420 = _I010ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I210ToI422(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I210ToI422(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I210ToI422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210ToI422');
  late final _I210ToI422 = _I210ToI422Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I410ToI444(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I410ToI444(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I410ToI444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I410ToI444');
  late final _I410ToI444 = _I410ToI444Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I012ToI420(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I012ToI420(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I012ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I012ToI420');
  late final _I012ToI420 = _I012ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I212ToI422(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I212ToI422(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I212ToI422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I212ToI422');
  late final _I212ToI422 = _I212ToI422Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I412ToI444(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I412ToI444(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I412ToI444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I412ToI444');
  late final _I412ToI444 = _I412ToI444Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I410ToI010(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I410ToI010(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I410ToI010Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I410ToI010');
  late final _I410ToI010 = _I410ToI010Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  int I210ToI010(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I210ToI010(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I210ToI010Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210ToI010');
  late final _I210ToI010 = _I210ToI010Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert I010 to I410
  int I010ToI410(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I010ToI410(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I010ToI410Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010ToI410');
  late final _I010ToI410 = _I010ToI410Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert I210 to I410
  int I210ToI410(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I210ToI410(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I210ToI410Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210ToI410');
  late final _I210ToI410 = _I210ToI410Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert I010 to P010
  int I010ToP010(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _I010ToP010(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _I010ToP010Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010ToP010');
  late final _I010ToP010 = _I010ToP010Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert I210 to P210
  int I210ToP210(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _I210ToP210(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _I210ToP210Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210ToP210');
  late final _I210ToP210 = _I210ToP210Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert I012 to P012
  int I012ToP012(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _I012ToP012(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _I012ToP012Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I012ToP012');
  late final _I012ToP012 = _I012ToP012Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert I212 to P212
  int I212ToP212(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _I212ToP212(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _I212ToP212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I212ToP212');
  late final _I212ToP212 = _I212ToP212Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert I400 (grey) to I420.
  int I400ToI420(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I400ToI420(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I400ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I400ToI420');
  late final _I400ToI420 = _I400ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I400 (grey) to NV21.
  int I400ToNV21(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _I400ToNV21(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _I400ToNV21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I400ToNV21');
  late final _I400ToNV21 = _I400ToNV21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV12 to I420.
  int NV12ToI420(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _NV12ToI420(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _NV12ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12ToI420');
  late final _NV12ToI420 = _NV12ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert NV21 to I420.
  int NV21ToI420(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _NV21ToI420(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _NV21ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV21ToI420');
  late final _NV21ToI420 = _NV21ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert NV12 to NV24.
  int NV12ToNV24(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _NV12ToNV24(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _NV12ToNV24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12ToNV24');
  late final _NV12ToNV24 = _NV12ToNV24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert NV16 to NV24.
  int NV16ToNV24(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _NV16ToNV24(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _NV16ToNV24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV16ToNV24');
  late final _NV16ToNV24 = _NV16ToNV24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert P010 to P410.
  int P010ToP410(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _P010ToP410(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _P010ToP410Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('P010ToP410');
  late final _P010ToP410 = _P010ToP410Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert P210 to P410.
  int P210ToP410(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _P210ToP410(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _P210ToP410Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('P210ToP410');
  late final _P210ToP410 = _P210ToP410Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  /// Convert YUY2 to I420.
  int YUY2ToI420(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int src_stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _YUY2ToI420(
      src_yuy2,
      src_stride_yuy2,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _YUY2ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('YUY2ToI420');
  late final _YUY2ToI420 = _YUY2ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert UYVY to I420.
  int UYVYToI420(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int src_stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _UYVYToI420(
      src_uyvy,
      src_stride_uyvy,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _UYVYToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('UYVYToI420');
  late final _UYVYToI420 = _UYVYToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert AYUV to NV12.
  int AYUVToNV12(
    ffi.Pointer<ffi.Uint8> src_ayuv,
    int src_stride_ayuv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _AYUVToNV12(
      src_ayuv,
      src_stride_ayuv,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _AYUVToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('AYUVToNV12');
  late final _AYUVToNV12 = _AYUVToNV12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert AYUV to NV21.
  int AYUVToNV21(
    ffi.Pointer<ffi.Uint8> src_ayuv,
    int src_stride_ayuv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _AYUVToNV21(
      src_ayuv,
      src_stride_ayuv,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _AYUVToNV21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('AYUVToNV21');
  late final _AYUVToNV21 = _AYUVToNV21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert Android420 to I420.
  int Android420ToI420(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    int src_pixel_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _Android420ToI420(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_pixel_stride_uv,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _Android420ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('Android420ToI420');
  late final _Android420ToI420 = _Android420ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// ARGB little endian (bgra in memory) to I420.
  int ARGBToI420(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _ARGBToI420(
      src_argb,
      src_stride_argb,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _ARGBToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToI420');
  late final _ARGBToI420 = _ARGBToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// BGRA little endian (argb in memory) to I420.
  int BGRAToI420(
    ffi.Pointer<ffi.Uint8> src_bgra,
    int src_stride_bgra,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _BGRAToI420(
      src_bgra,
      src_stride_bgra,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _BGRAToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('BGRAToI420');
  late final _BGRAToI420 = _BGRAToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// ABGR little endian (rgba in memory) to I420.
  int ABGRToI420(
    ffi.Pointer<ffi.Uint8> src_abgr,
    int src_stride_abgr,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _ABGRToI420(
      src_abgr,
      src_stride_abgr,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _ABGRToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ABGRToI420');
  late final _ABGRToI420 = _ABGRToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGBA little endian (abgr in memory) to I420.
  int RGBAToI420(
    ffi.Pointer<ffi.Uint8> src_rgba,
    int src_stride_rgba,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _RGBAToI420(
      src_rgba,
      src_stride_rgba,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _RGBAToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGBAToI420');
  late final _RGBAToI420 = _RGBAToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGB little endian (bgr in memory) to I420.
  int RGB24ToI420(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    int src_stride_rgb24,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _RGB24ToI420(
      src_rgb24,
      src_stride_rgb24,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _RGB24ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGB24ToI420');
  late final _RGB24ToI420 = _RGB24ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGB little endian (bgr in memory) to J420.
  int RGB24ToJ420(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    int src_stride_rgb24,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _RGB24ToJ420(
      src_rgb24,
      src_stride_rgb24,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _RGB24ToJ420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGB24ToJ420');
  late final _RGB24ToJ420 = _RGB24ToJ420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGB big endian (rgb in memory) to I420.
  int RAWToI420(
    ffi.Pointer<ffi.Uint8> src_raw,
    int src_stride_raw,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _RAWToI420(
      src_raw,
      src_stride_raw,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _RAWToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RAWToI420');
  late final _RAWToI420 = _RAWToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGB big endian (rgb in memory) to J420.
  int RAWToJ420(
    ffi.Pointer<ffi.Uint8> src_raw,
    int src_stride_raw,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _RAWToJ420(
      src_raw,
      src_stride_raw,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _RAWToJ420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RAWToJ420');
  late final _RAWToJ420 = _RAWToJ420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGB16 (RGBP fourcc) little endian to I420.
  int RGB565ToI420(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    int src_stride_rgb565,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _RGB565ToI420(
      src_rgb565,
      src_stride_rgb565,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _RGB565ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGB565ToI420');
  late final _RGB565ToI420 = _RGB565ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGB15 (RGBO fourcc) little endian to I420.
  int ARGB1555ToI420(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    int src_stride_argb1555,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _ARGB1555ToI420(
      src_argb1555,
      src_stride_argb1555,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _ARGB1555ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGB1555ToI420');
  late final _ARGB1555ToI420 = _ARGB1555ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGB12 (R444 fourcc) little endian to I420.
  int ARGB4444ToI420(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    int src_stride_argb4444,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _ARGB4444ToI420(
      src_argb4444,
      src_stride_argb4444,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _ARGB4444ToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGB4444ToI420');
  late final _ARGB4444ToI420 = _ARGB4444ToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// RGB little endian (bgr in memory) to J400.
  int RGB24ToJ400(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    int src_stride_rgb24,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int dst_stride_yj,
    int width,
    int height,
  ) {
    return _RGB24ToJ400(
      src_rgb24,
      src_stride_rgb24,
      dst_yj,
      dst_stride_yj,
      width,
      height,
    );
  }

  late final _RGB24ToJ400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGB24ToJ400');
  late final _RGB24ToJ400 = _RGB24ToJ400Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGB big endian (rgb in memory) to J400.
  int RAWToJ400(
    ffi.Pointer<ffi.Uint8> src_raw,
    int src_stride_raw,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int dst_stride_yj,
    int width,
    int height,
  ) {
    return _RAWToJ400(
      src_raw,
      src_stride_raw,
      dst_yj,
      dst_stride_yj,
      width,
      height,
    );
  }

  late final _RAWToJ400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('RAWToJ400');
  late final _RAWToJ400 = _RAWToJ400Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// src_width/height provided by capture.
  /// dst_width/height for clipping determine final size.
  int MJPGToI420(
    ffi.Pointer<ffi.Uint8> sample,
    int sample_size,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int src_width,
    int src_height,
    int dst_width,
    int dst_height,
  ) {
    return _MJPGToI420(
      sample,
      sample_size,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      src_width,
      src_height,
      dst_width,
      dst_height,
    );
  }

  late final _MJPGToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MJPGToI420');
  late final _MJPGToI420 = _MJPGToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int)>();

  /// JPEG to NV21
  int MJPGToNV21(
    ffi.Pointer<ffi.Uint8> sample,
    int sample_size,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int src_width,
    int src_height,
    int dst_width,
    int dst_height,
  ) {
    return _MJPGToNV21(
      sample,
      sample_size,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      src_width,
      src_height,
      dst_width,
      dst_height,
    );
  }

  late final _MJPGToNV21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MJPGToNV21');
  late final _MJPGToNV21 = _MJPGToNV21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int, int)>();

  /// JPEG to NV12
  int MJPGToNV12(
    ffi.Pointer<ffi.Uint8> sample,
    int sample_size,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int src_width,
    int src_height,
    int dst_width,
    int dst_height,
  ) {
    return _MJPGToNV12(
      sample,
      sample_size,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      src_width,
      src_height,
      dst_width,
      dst_height,
    );
  }

  late final _MJPGToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MJPGToNV12');
  late final _MJPGToNV12 = _MJPGToNV12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int, int)>();

  /// Query size of MJPG in pixels.
  int MJPGSize(
    ffi.Pointer<ffi.Uint8> sample,
    int sample_size,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _MJPGSize(
      sample,
      sample_size,
      width,
      height,
    );
  }

  late final _MJPGSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('MJPGSize');
  late final _MJPGSize = _MJPGSizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  /// Convert camera sample to I420 with cropping, rotation and vertical flip.
  /// "src_size" is needed to parse MJPG.
  /// "dst_stride_y" number of bytes in a row of the dst_y plane.
  /// Normally this would be the same as dst_width, with recommended alignment
  /// to 16 bytes for better efficiency.
  /// If rotation of 90 or 270 is used, stride is affected. The caller should
  /// allocate the I420 buffer according to rotation.
  /// "dst_stride_u" number of bytes in a row of the dst_u plane.
  /// Normally this would be the same as (dst_width + 1) / 2, with
  /// recommended alignment to 16 bytes for better efficiency.
  /// If rotation of 90 or 270 is used, stride is affected.
  /// "crop_x" and "crop_y" are starting position for cropping.
  /// To center, crop_x = (src_width - dst_width) / 2
  /// crop_y = (src_height - dst_height) / 2
  /// "src_width" / "src_height" is size of src_frame in pixels.
  /// "src_height" can be negative indicating a vertically flipped image source.
  /// "crop_width" / "crop_height" is the size to crop the src to.
  /// Must be less than or equal to src_width/src_height
  /// Cropping parameters are pre-rotation.
  /// "rotation" can be 0, 90, 180 or 270.
  /// "fourcc" is a fourcc. ie 'I420', 'YUY2'
  /// Returns 0 for successful; -1 for invalid parameter. Non-zero for failure.
  int ConvertToI420(
    ffi.Pointer<ffi.Uint8> sample,
    int sample_size,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int crop_x,
    int crop_y,
    int src_width,
    int src_height,
    int crop_width,
    int crop_height,
    int rotation,
    int fourcc,
  ) {
    return _ConvertToI420(
      sample,
      sample_size,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      crop_x,
      crop_y,
      src_width,
      src_height,
      crop_width,
      crop_height,
      rotation,
      fourcc,
    );
  }

  late final _ConvertToI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32,
              ffi.Uint32)>>('ConvertToI420');
  late final _ConvertToI420 = _ConvertToI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int)>();

  int ARGBCopy(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBCopy(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('ARGBCopy');
  late final _ARGBCopy = _ARGBCopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To BGRA.
  int ARGBToBGRA(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_bgra,
    int dst_stride_bgra,
    int width,
    int height,
  ) {
    return _ARGBToBGRA(
      src_argb,
      src_stride_argb,
      dst_bgra,
      dst_stride_bgra,
      width,
      height,
    );
  }

  late final _ARGBToBGRAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToBGRA');
  late final _ARGBToBGRA = _ARGBToBGRAPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To ABGR.
  int ARGBToABGR(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _ARGBToABGR(
      src_argb,
      src_stride_argb,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _ARGBToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToABGR');
  late final _ARGBToABGR = _ARGBToABGRPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To RGBA.
  int ARGBToRGBA(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int dst_stride_rgba,
    int width,
    int height,
  ) {
    return _ARGBToRGBA(
      src_argb,
      src_stride_argb,
      dst_rgba,
      dst_stride_rgba,
      width,
      height,
    );
  }

  late final _ARGBToRGBAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToRGBA');
  late final _ARGBToRGBA = _ARGBToRGBAPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ABGR To AR30.
  int ABGRToAR30(
    ffi.Pointer<ffi.Uint8> src_abgr,
    int src_stride_abgr,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _ABGRToAR30(
      src_abgr,
      src_stride_abgr,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _ABGRToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ABGRToAR30');
  late final _ABGRToAR30 = _ABGRToAR30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To AR30.
  int ARGBToAR30(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _ARGBToAR30(
      src_argb,
      src_stride_argb,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _ARGBToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToAR30');
  late final _ARGBToAR30 = _ARGBToAR30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To RGB24.
  int ARGBToRGB24(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    int width,
    int height,
  ) {
    return _ARGBToRGB24(
      src_argb,
      src_stride_argb,
      dst_rgb24,
      dst_stride_rgb24,
      width,
      height,
    );
  }

  late final _ARGBToRGB24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToRGB24');
  late final _ARGBToRGB24 = _ARGBToRGB24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To RAW.
  int ARGBToRAW(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_raw,
    int dst_stride_raw,
    int width,
    int height,
  ) {
    return _ARGBToRAW(
      src_argb,
      src_stride_argb,
      dst_raw,
      dst_stride_raw,
      width,
      height,
    );
  }

  late final _ARGBToRAWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('ARGBToRAW');
  late final _ARGBToRAW = _ARGBToRAWPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To RGB565.
  int ARGBToRGB565(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    int width,
    int height,
  ) {
    return _ARGBToRGB565(
      src_argb,
      src_stride_argb,
      dst_rgb565,
      dst_stride_rgb565,
      width,
      height,
    );
  }

  late final _ARGBToRGB565Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToRGB565');
  late final _ARGBToRGB565 = _ARGBToRGB565Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To RGB565 with 4x4 dither matrix (16 bytes).
  /// Values in dither matrix from 0 to 7 recommended.
  /// The order of the dither matrix is first byte is upper left.
  /// TODO(fbarchard): Consider pointer to 2d array for dither4x4.
  /// const uint8_t(*dither)[4][4];
  int ARGBToRGB565Dither(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    ffi.Pointer<ffi.Uint8> dither4x4,
    int width,
    int height,
  ) {
    return _ARGBToRGB565Dither(
      src_argb,
      src_stride_argb,
      dst_rgb565,
      dst_stride_rgb565,
      dither4x4,
      width,
      height,
    );
  }

  late final _ARGBToRGB565DitherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('ARGBToRGB565Dither');
  late final _ARGBToRGB565Dither = _ARGBToRGB565DitherPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int)>();

  /// Convert ARGB To ARGB1555.
  int ARGBToARGB1555(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    int dst_stride_argb1555,
    int width,
    int height,
  ) {
    return _ARGBToARGB1555(
      src_argb,
      src_stride_argb,
      dst_argb1555,
      dst_stride_argb1555,
      width,
      height,
    );
  }

  late final _ARGBToARGB1555Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToARGB1555');
  late final _ARGBToARGB1555 = _ARGBToARGB1555Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To ARGB4444.
  int ARGBToARGB4444(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    int dst_stride_argb4444,
    int width,
    int height,
  ) {
    return _ARGBToARGB4444(
      src_argb,
      src_stride_argb,
      dst_argb4444,
      dst_stride_argb4444,
      width,
      height,
    );
  }

  late final _ARGBToARGB4444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToARGB4444');
  late final _ARGBToARGB4444 = _ARGBToARGB4444Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To I444.
  int ARGBToI444(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _ARGBToI444(
      src_argb,
      src_stride_argb,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _ARGBToI444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToI444');
  late final _ARGBToI444 = _ARGBToI444Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert ARGB to AR64.
  int ARGBToAR64(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int dst_stride_ar64,
    int width,
    int height,
  ) {
    return _ARGBToAR64(
      src_argb,
      src_stride_argb,
      dst_ar64,
      dst_stride_ar64,
      width,
      height,
    );
  }

  late final _ARGBToAR64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToAR64');
  late final _ARGBToAR64 = _ARGBToAR64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint16>, int,
          int, int)>();

  /// Convert ARGB to AB64.
  int ARGBToAB64(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint16> dst_ab64,
    int dst_stride_ab64,
    int width,
    int height,
  ) {
    return _ARGBToAB64(
      src_argb,
      src_stride_argb,
      dst_ab64,
      dst_stride_ab64,
      width,
      height,
    );
  }

  late final _ARGBToAB64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToAB64');
  late final _ARGBToAB64 = _ARGBToAB64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint16>, int,
          int, int)>();

  /// Convert ARGB To I422.
  int ARGBToI422(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _ARGBToI422(
      src_argb,
      src_stride_argb,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _ARGBToI422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToI422');
  late final _ARGBToI422 = _ARGBToI422Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert ARGB to J420. (JPeg full range I420).
  int ARGBToJ420(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int dst_stride_yj,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _ARGBToJ420(
      src_argb,
      src_stride_argb,
      dst_yj,
      dst_stride_yj,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _ARGBToJ420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToJ420');
  late final _ARGBToJ420 = _ARGBToJ420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert ARGB to J422.
  int ARGBToJ422(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int dst_stride_yj,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _ARGBToJ422(
      src_argb,
      src_stride_argb,
      dst_yj,
      dst_stride_yj,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _ARGBToJ422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToJ422');
  late final _ARGBToJ422 = _ARGBToJ422Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert ARGB to J400. (JPeg full range).
  int ARGBToJ400(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int dst_stride_yj,
    int width,
    int height,
  ) {
    return _ARGBToJ400(
      src_argb,
      src_stride_argb,
      dst_yj,
      dst_stride_yj,
      width,
      height,
    );
  }

  late final _ARGBToJ400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToJ400');
  late final _ARGBToJ400 = _ARGBToJ400Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert RGBA to J400. (JPeg full range).
  int RGBAToJ400(
    ffi.Pointer<ffi.Uint8> src_rgba,
    int src_stride_rgba,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int dst_stride_yj,
    int width,
    int height,
  ) {
    return _RGBAToJ400(
      src_rgba,
      src_stride_rgba,
      dst_yj,
      dst_stride_yj,
      width,
      height,
    );
  }

  late final _RGBAToJ400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGBAToJ400');
  late final _RGBAToJ400 = _RGBAToJ400Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB to I400.
  int ARGBToI400(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _ARGBToI400(
      src_argb,
      src_stride_argb,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _ARGBToI400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToI400');
  late final _ARGBToI400 = _ARGBToI400Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB to G. (Reverse of J400toARGB, which replicates G back to ARGB)
  int ARGBToG(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_g,
    int dst_stride_g,
    int width,
    int height,
  ) {
    return _ARGBToG(
      src_argb,
      src_stride_argb,
      dst_g,
      dst_stride_g,
      width,
      height,
    );
  }

  late final _ARGBToGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('ARGBToG');
  late final _ARGBToG = _ARGBToGPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To NV12.
  int ARGBToNV12(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _ARGBToNV12(
      src_argb,
      src_stride_argb,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _ARGBToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToNV12');
  late final _ARGBToNV12 = _ARGBToNV12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert ARGB To NV21.
  int ARGBToNV21(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _ARGBToNV21(
      src_argb,
      src_stride_argb,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _ARGBToNV21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToNV21');
  late final _ARGBToNV21 = _ARGBToNV21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert ABGR To NV12.
  int ABGRToNV12(
    ffi.Pointer<ffi.Uint8> src_abgr,
    int src_stride_abgr,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _ABGRToNV12(
      src_abgr,
      src_stride_abgr,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _ABGRToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ABGRToNV12');
  late final _ABGRToNV12 = _ABGRToNV12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert ABGR To NV21.
  int ABGRToNV21(
    ffi.Pointer<ffi.Uint8> src_abgr,
    int src_stride_abgr,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _ABGRToNV21(
      src_abgr,
      src_stride_abgr,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _ABGRToNV21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ABGRToNV21');
  late final _ABGRToNV21 = _ABGRToNV21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert ARGB To YUY2.
  int ARGBToYUY2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_yuy2,
    int dst_stride_yuy2,
    int width,
    int height,
  ) {
    return _ARGBToYUY2(
      src_argb,
      src_stride_argb,
      dst_yuy2,
      dst_stride_yuy2,
      width,
      height,
    );
  }

  late final _ARGBToYUY2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToYUY2');
  late final _ARGBToYUY2 = _ARGBToYUY2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert ARGB To UYVY.
  int ARGBToUYVY(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_uyvy,
    int dst_stride_uyvy,
    int width,
    int height,
  ) {
    return _ARGBToUYVY(
      src_argb,
      src_stride_argb,
      dst_uyvy,
      dst_stride_uyvy,
      width,
      height,
    );
  }

  late final _ARGBToUYVYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBToUYVY');
  late final _ARGBToUYVY = _ARGBToUYVYPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Internal flag to indicate cpuid requires initialization.
  late final ffi.Pointer<ffi.Int> _kCpuInitialized =
      _lookup<ffi.Int>('kCpuInitialized');

  int get kCpuInitialized => _kCpuInitialized.value;

  /// These flags are only valid on ARM processors.
  late final ffi.Pointer<ffi.Int> _kCpuHasARM = _lookup<ffi.Int>('kCpuHasARM');

  int get kCpuHasARM => _kCpuHasARM.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasNEON =
      _lookup<ffi.Int>('kCpuHasNEON');

  int get kCpuHasNEON => _kCpuHasNEON.value;

  /// These flags are only valid on x86 processors.
  late final ffi.Pointer<ffi.Int> _kCpuHasX86 = _lookup<ffi.Int>('kCpuHasX86');

  int get kCpuHasX86 => _kCpuHasX86.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasSSE2 =
      _lookup<ffi.Int>('kCpuHasSSE2');

  int get kCpuHasSSE2 => _kCpuHasSSE2.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasSSSE3 =
      _lookup<ffi.Int>('kCpuHasSSSE3');

  int get kCpuHasSSSE3 => _kCpuHasSSSE3.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasSSE41 =
      _lookup<ffi.Int>('kCpuHasSSE41');

  int get kCpuHasSSE41 => _kCpuHasSSE41.value;

  /// unused at this time.
  late final ffi.Pointer<ffi.Int> _kCpuHasSSE42 =
      _lookup<ffi.Int>('kCpuHasSSE42');

  int get kCpuHasSSE42 => _kCpuHasSSE42.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasAVX = _lookup<ffi.Int>('kCpuHasAVX');

  int get kCpuHasAVX => _kCpuHasAVX.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasAVX2 =
      _lookup<ffi.Int>('kCpuHasAVX2');

  int get kCpuHasAVX2 => _kCpuHasAVX2.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasERMS =
      _lookup<ffi.Int>('kCpuHasERMS');

  int get kCpuHasERMS => _kCpuHasERMS.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasFMA3 =
      _lookup<ffi.Int>('kCpuHasFMA3');

  int get kCpuHasFMA3 => _kCpuHasFMA3.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasF16C =
      _lookup<ffi.Int>('kCpuHasF16C');

  int get kCpuHasF16C => _kCpuHasF16C.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasGFNI =
      _lookup<ffi.Int>('kCpuHasGFNI');

  int get kCpuHasGFNI => _kCpuHasGFNI.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasAVX512BW =
      _lookup<ffi.Int>('kCpuHasAVX512BW');

  int get kCpuHasAVX512BW => _kCpuHasAVX512BW.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasAVX512VL =
      _lookup<ffi.Int>('kCpuHasAVX512VL');

  int get kCpuHasAVX512VL => _kCpuHasAVX512VL.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasAVX512VBMI =
      _lookup<ffi.Int>('kCpuHasAVX512VBMI');

  int get kCpuHasAVX512VBMI => _kCpuHasAVX512VBMI.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasAVX512VBMI2 =
      _lookup<ffi.Int>('kCpuHasAVX512VBMI2');

  int get kCpuHasAVX512VBMI2 => _kCpuHasAVX512VBMI2.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasAVX512VBITALG =
      _lookup<ffi.Int>('kCpuHasAVX512VBITALG');

  int get kCpuHasAVX512VBITALG => _kCpuHasAVX512VBITALG.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasAVX512VPOPCNTDQ =
      _lookup<ffi.Int>('kCpuHasAVX512VPOPCNTDQ');

  int get kCpuHasAVX512VPOPCNTDQ => _kCpuHasAVX512VPOPCNTDQ.value;

  /// These flags are only valid on MIPS processors.
  late final ffi.Pointer<ffi.Int> _kCpuHasMIPS =
      _lookup<ffi.Int>('kCpuHasMIPS');

  int get kCpuHasMIPS => _kCpuHasMIPS.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasMSA = _lookup<ffi.Int>('kCpuHasMSA');

  int get kCpuHasMSA => _kCpuHasMSA.value;

  late final ffi.Pointer<ffi.Int> _kCpuHasMMI = _lookup<ffi.Int>('kCpuHasMMI');

  int get kCpuHasMMI => _kCpuHasMMI.value;

  /// Optional init function. TestCpuFlag does an auto-init.
  /// Returns cpu_info flags.
  int InitCpuFlags() {
    return _InitCpuFlags();
  }

  late final _InitCpuFlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('InitCpuFlags');
  late final _InitCpuFlags = _InitCpuFlagsPtr.asFunction<int Function()>();

  /// Internal function for parsing /proc/cpuinfo.
  int ArmCpuCaps(
    ffi.Pointer<ffi.Char> cpuinfo_name,
  ) {
    return _ArmCpuCaps(
      cpuinfo_name,
    );
  }

  late final _ArmCpuCapsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'ArmCpuCaps');
  late final _ArmCpuCaps =
      _ArmCpuCapsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int MipsCpuCaps(
    ffi.Pointer<ffi.Char> cpuinfo_name,
  ) {
    return _MipsCpuCaps(
      cpuinfo_name,
    );
  }

  late final _MipsCpuCapsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'MipsCpuCaps');
  late final _MipsCpuCaps =
      _MipsCpuCapsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// For testing, allow CPU flags to be disabled.
  /// ie MaskCpuFlags(~kCpuHasSSSE3) to disable SSSE3.
  /// MaskCpuFlags(-1) to enable all cpu specific optimizations.
  /// MaskCpuFlags(1) to disable all cpu specific optimizations.
  /// MaskCpuFlags(0) to reset state so next call will auto init.
  /// Returns cpu_info flags.
  int MaskCpuFlags(
    int enable_flags,
  ) {
    return _MaskCpuFlags(
      enable_flags,
    );
  }

  late final _MaskCpuFlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('MaskCpuFlags');
  late final _MaskCpuFlags = _MaskCpuFlagsPtr.asFunction<int Function(int)>();

  /// Low level cpuid for X86. Returns zeros on other CPUs.
  /// eax is the info type that you want.
  /// ecx is typically the cpu number, and should normally be zero.
  void CpuId(
    int info_eax,
    int info_ecx,
    ffi.Pointer<ffi.Int> cpu_info,
  ) {
    return _CpuId(
      info_eax,
      info_ecx,
      cpu_info,
    );
  }

  late final _CpuIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('CpuId');
  late final _CpuId =
      _CpuIdPtr.asFunction<void Function(int, int, ffi.Pointer<ffi.Int>)>();

  /// Rotate ARGB frame
  int ARGBRotate(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int src_width,
    int src_height,
    int mode,
  ) {
    return _ARGBRotate(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      src_width,
      src_height,
      mode,
    );
  }

  late final _ARGBRotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('ARGBRotate');
  late final _ARGBRotate = _ARGBRotatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int)>();

  void I444ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_NEON(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_NEON');
  late final _I444ToARGBRow_NEON = _I444ToARGBRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_NEON(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_NEON');
  late final _I422ToARGBRow_NEON = _I422ToARGBRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444AlphaToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444AlphaToARGBRow_NEON(
      src_y,
      src_u,
      src_v,
      src_a,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I444AlphaToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444AlphaToARGBRow_NEON');
  late final _I444AlphaToARGBRow_NEON = _I444AlphaToARGBRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422AlphaToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_NEON(
      src_y,
      src_u,
      src_v,
      src_a,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_NEON');
  late final _I422AlphaToARGBRow_NEON = _I422AlphaToARGBRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGBARow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_NEON(
      src_y,
      src_u,
      src_v,
      dst_rgba,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_NEON');
  late final _I422ToRGBARow_NEON = _I422ToRGBARow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB24Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_NEON(
      src_y,
      src_u,
      src_v,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_NEON');
  late final _I422ToRGB24Row_NEON = _I422ToRGB24Row_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB565Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_NEON(
      src_y,
      src_u,
      src_v,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_NEON');
  late final _I422ToRGB565Row_NEON = _I422ToRGB565Row_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB1555Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_NEON(
      src_y,
      src_u,
      src_v,
      dst_argb1555,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_NEON');
  late final _I422ToARGB1555Row_NEON = _I422ToARGB1555Row_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_NEON(
      src_y,
      src_u,
      src_v,
      dst_argb4444,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_NEON');
  late final _I422ToARGB4444Row_NEON = _I422ToARGB4444Row_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void NV12ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_NEON(
      src_y,
      src_uv,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_NEON');
  late final _NV12ToARGBRow_NEON = _NV12ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB565Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_NEON(
      src_y,
      src_uv,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_NEON');
  late final _NV12ToRGB565Row_NEON = _NV12ToRGB565Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_NEON(
      src_y,
      src_vu,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_NEON');
  late final _NV21ToARGBRow_NEON = _NV21ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_NEON(
      src_y,
      src_uv,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_NEON');
  late final _NV12ToRGB24Row_NEON = _NV12ToRGB24Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_NEON(
      src_y,
      src_vu,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_NEON');
  late final _NV21ToRGB24Row_NEON = _NV21ToRGB24Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToYUV24Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_yuv24,
    int width,
  ) {
    return _NV21ToYUV24Row_NEON(
      src_y,
      src_vu,
      dst_yuv24,
      width,
    );
  }

  late final _NV21ToYUV24Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('NV21ToYUV24Row_NEON');
  late final _NV21ToYUV24Row_NEON = _NV21ToYUV24Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_NEON(
      src_yuy2,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_NEON');
  late final _YUY2ToARGBRow_NEON = _YUY2ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_NEON(
      src_uyvy,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_NEON');
  late final _UYVYToARGBRow_NEON = _UYVYToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I444ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_MSA(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_MSA');
  late final _I444ToARGBRow_MSA = _I444ToARGBRow_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_MMI(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_MMI');
  late final _I444ToARGBRow_MMI = _I444ToARGBRow_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_MSA(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_MSA');
  late final _I422ToARGBRow_MSA = _I422ToARGBRow_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGBARow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_MSA(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_MSA');
  late final _I422ToRGBARow_MSA = _I422ToRGBARow_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_MMI(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_MMI');
  late final _I422ToARGBRow_MMI = _I422ToARGBRow_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422AlphaToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_MSA(
      src_y,
      src_u,
      src_v,
      src_a,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_MSA');
  late final _I422AlphaToARGBRow_MSA = _I422AlphaToARGBRow_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB24Row_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_MSA(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_MSA');
  late final _I422ToRGB24Row_MSA = _I422ToRGB24Row_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB565Row_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_MSA(
      src_y,
      src_u,
      src_v,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_MSA');
  late final _I422ToRGB565Row_MSA = _I422ToRGB565Row_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_MSA(
      src_y,
      src_u,
      src_v,
      dst_argb4444,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_MSA');
  late final _I422ToARGB4444Row_MSA = _I422ToARGB4444Row_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB1555Row_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_MSA(
      src_y,
      src_u,
      src_v,
      dst_argb1555,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_MSA');
  late final _I422ToARGB1555Row_MSA = _I422ToARGB1555Row_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void NV12ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_MSA(
      src_y,
      src_uv,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_MSA');
  late final _NV12ToARGBRow_MSA = _NV12ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB565Row_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_MSA(
      src_y,
      src_uv,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_MSA');
  late final _NV12ToRGB565Row_MSA = _NV12ToRGB565Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_MSA(
      src_y,
      src_vu,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_MSA');
  late final _NV21ToARGBRow_MSA = _NV21ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_MSA(
      src_yuy2,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_MSA');
  late final _YUY2ToARGBRow_MSA = _YUY2ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_MSA(
      src_uyvy,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_MSA');
  late final _UYVYToARGBRow_MSA = _UYVYToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void ARGBToYRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYRow_AVX2(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _ARGBToYRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_AVX2');
  late final _ARGBToYRow_AVX2 = _ARGBToYRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_Any_AVX2');
  late final _ARGBToYRow_Any_AVX2 = _ARGBToYRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_abgr,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ABGRToYRow_AVX2(
      src_abgr,
      dst_y,
      width,
    );
  }

  late final _ABGRToYRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_AVX2');
  late final _ABGRToYRow_AVX2 = _ABGRToYRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ABGRToYRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ABGRToYRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_Any_AVX2');
  late final _ABGRToYRow_Any_AVX2 = _ABGRToYRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYRow_SSSE3(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _ARGBToYRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_SSSE3');
  late final _ARGBToYRow_SSSE3 = _ARGBToYRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYJRow_AVX2(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _ARGBToYJRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_AVX2');
  late final _ARGBToYJRow_AVX2 = _ARGBToYJRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYJRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYJRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_Any_AVX2');
  late final _ARGBToYJRow_Any_AVX2 = _ARGBToYJRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYJRow_SSSE3(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _ARGBToYJRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_SSSE3');
  late final _ARGBToYJRow_SSSE3 = _ARGBToYJRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYJRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_rgba,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYJRow_AVX2(
      src_rgba,
      dst_y,
      width,
    );
  }

  late final _RGBAToYJRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYJRow_AVX2');
  late final _RGBAToYJRow_AVX2 = _RGBAToYJRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYJRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGBAToYJRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGBAToYJRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYJRow_Any_AVX2');
  late final _RGBAToYJRow_Any_AVX2 = _RGBAToYJRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYJRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_rgba,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYJRow_SSSE3(
      src_rgba,
      dst_y,
      width,
    );
  }

  late final _RGBAToYJRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYJRow_SSSE3');
  late final _RGBAToYJRow_SSSE3 = _RGBAToYJRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_bgra,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _BGRAToYRow_SSSE3(
      src_bgra,
      dst_y,
      width,
    );
  }

  late final _BGRAToYRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_SSSE3');
  late final _BGRAToYRow_SSSE3 = _BGRAToYRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_abgr,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ABGRToYRow_SSSE3(
      src_abgr,
      dst_y,
      width,
    );
  }

  late final _ABGRToYRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_SSSE3');
  late final _ABGRToYRow_SSSE3 = _ABGRToYRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_rgba,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYRow_SSSE3(
      src_rgba,
      dst_y,
      width,
    );
  }

  late final _RGBAToYRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_SSSE3');
  late final _RGBAToYRow_SSSE3 = _RGBAToYRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB24ToYRow_SSSE3(
      src_rgb24,
      dst_y,
      width,
    );
  }

  late final _RGB24ToYRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_SSSE3');
  late final _RGB24ToYRow_SSSE3 = _RGB24ToYRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYJRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int width,
  ) {
    return _RGB24ToYJRow_SSSE3(
      src_rgb24,
      dst_yj,
      width,
    );
  }

  late final _RGB24ToYJRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYJRow_SSSE3');
  late final _RGB24ToYJRow_SSSE3 = _RGB24ToYJRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RAWToYRow_SSSE3(
      src_raw,
      dst_y,
      width,
    );
  }

  late final _RAWToYRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_SSSE3');
  late final _RAWToYRow_SSSE3 = _RAWToYRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYJRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int width,
  ) {
    return _RAWToYJRow_SSSE3(
      src_raw,
      dst_yj,
      width,
    );
  }

  late final _RAWToYJRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYJRow_SSSE3');
  late final _RAWToYJRow_SSSE3 = _RAWToYJRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYJRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int width,
  ) {
    return _RGB24ToYJRow_AVX2(
      src_rgb24,
      dst_yj,
      width,
    );
  }

  late final _RGB24ToYJRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYJRow_AVX2');
  late final _RGB24ToYJRow_AVX2 = _RGB24ToYJRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYJRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int width,
  ) {
    return _RAWToYJRow_AVX2(
      src_raw,
      dst_yj,
      width,
    );
  }

  late final _RAWToYJRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYJRow_AVX2');
  late final _RAWToYJRow_AVX2 = _RAWToYJRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYRow_NEON(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _ARGBToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_NEON');
  late final _ARGBToYRow_NEON = _ARGBToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYJRow_NEON(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _ARGBToYJRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_NEON');
  late final _ARGBToYJRow_NEON = _ARGBToYJRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYJRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgba,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYJRow_NEON(
      src_rgba,
      dst_y,
      width,
    );
  }

  late final _RGBAToYJRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYJRow_NEON');
  late final _RGBAToYJRow_NEON = _RGBAToYJRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYRow_MSA(
      src_argb0,
      dst_y,
      width,
    );
  }

  late final _ARGBToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_MSA');
  late final _ARGBToYRow_MSA = _ARGBToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYJRow_MSA(
      src_argb0,
      dst_y,
      width,
    );
  }

  late final _ARGBToYJRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_MSA');
  late final _ARGBToYJRow_MSA = _ARGBToYJRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYRow_MMI(
      src_argb0,
      dst_y,
      width,
    );
  }

  late final _ARGBToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_MMI');
  late final _ARGBToYRow_MMI = _ARGBToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYJRow_MMI(
      src_argb0,
      dst_y,
      width,
    );
  }

  late final _ARGBToYJRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_MMI');
  late final _ARGBToYJRow_MMI = _ARGBToYJRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_NEON(
      src_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_NEON');
  late final _ARGBToUV444Row_NEON = _ARGBToUV444Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_NEON(
      src_argb,
      src_stride_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_NEON');
  late final _ARGBToUVRow_NEON = _ARGBToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_MSA(
      src_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_MSA');
  late final _ARGBToUV444Row_MSA = _ARGBToUV444Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_MSA(
      src_argb,
      src_stride_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_MSA');
  late final _ARGBToUVRow_MSA = _ARGBToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_MMI(
      src_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_MMI');
  late final _ARGBToUV444Row_MMI = _ARGBToUV444Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_MMI(
      src_argb,
      src_stride_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_MMI');
  late final _ARGBToUVRow_MMI = _ARGBToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_NEON(
      src_argb,
      src_stride_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_NEON');
  late final _ARGBToUVJRow_NEON = _ARGBToUVJRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_bgra,
    int src_stride_bgra,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_NEON(
      src_bgra,
      src_stride_bgra,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_NEON');
  late final _BGRAToUVRow_NEON = _BGRAToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_abgr,
    int src_stride_abgr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_NEON(
      src_abgr,
      src_stride_abgr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_NEON');
  late final _ABGRToUVRow_NEON = _ABGRToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgba,
    int src_stride_rgba,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_NEON(
      src_rgba,
      src_stride_rgba,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_NEON');
  late final _RGBAToUVRow_NEON = _RGBAToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    int src_stride_rgb24,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB24ToUVRow_NEON(
      src_rgb24,
      src_stride_rgb24,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB24ToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToUVRow_NEON');
  late final _RGB24ToUVRow_NEON = _RGB24ToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_raw,
    int src_stride_raw,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RAWToUVRow_NEON(
      src_raw,
      src_stride_raw,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RAWToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToUVRow_NEON');
  late final _RAWToUVRow_NEON = _RAWToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    int src_stride_rgb565,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB565ToUVRow_NEON(
      src_rgb565,
      src_stride_rgb565,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB565ToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToUVRow_NEON');
  late final _RGB565ToUVRow_NEON = _RGB565ToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    int src_stride_argb1555,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB1555ToUVRow_NEON(
      src_argb1555,
      src_stride_argb1555,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB1555ToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToUVRow_NEON');
  late final _ARGB1555ToUVRow_NEON = _ARGB1555ToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    int src_stride_argb4444,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB4444ToUVRow_NEON(
      src_argb4444,
      src_stride_argb4444,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB4444ToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToUVRow_NEON');
  late final _ARGB4444ToUVRow_NEON = _ARGB4444ToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_MSA(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_MSA');
  late final _ARGBToUVJRow_MSA = _ARGBToUVJRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_MSA(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_MSA');
  late final _BGRAToUVRow_MSA = _BGRAToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_MSA(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_MSA');
  late final _ABGRToUVRow_MSA = _ABGRToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_MSA(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_MSA');
  late final _RGBAToUVRow_MSA = _RGBAToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB24ToUVRow_MSA(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB24ToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToUVRow_MSA');
  late final _RGB24ToUVRow_MSA = _RGB24ToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RAWToUVRow_MSA(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RAWToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToUVRow_MSA');
  late final _RAWToUVRow_MSA = _RAWToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    int src_stride_rgb565,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB565ToUVRow_MSA(
      src_rgb565,
      src_stride_rgb565,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB565ToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToUVRow_MSA');
  late final _RGB565ToUVRow_MSA = _RGB565ToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    int src_stride_argb1555,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB1555ToUVRow_MSA(
      src_argb1555,
      src_stride_argb1555,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB1555ToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToUVRow_MSA');
  late final _ARGB1555ToUVRow_MSA = _ARGB1555ToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_MMI(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_MMI');
  late final _ARGBToUVJRow_MMI = _ARGBToUVJRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_MMI(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_MMI');
  late final _BGRAToUVRow_MMI = _BGRAToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_MMI(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_MMI');
  late final _ABGRToUVRow_MMI = _ABGRToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_MMI(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_MMI');
  late final _RGBAToUVRow_MMI = _RGBAToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB24ToUVRow_MMI(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB24ToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToUVRow_MMI');
  late final _RGB24ToUVRow_MMI = _RGB24ToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RAWToUVRow_MMI(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RAWToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToUVRow_MMI');
  late final _RAWToUVRow_MMI = _RAWToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    int src_stride_rgb565,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB565ToUVRow_MMI(
      src_rgb565,
      src_stride_rgb565,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB565ToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToUVRow_MMI');
  late final _RGB565ToUVRow_MMI = _RGB565ToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    int src_stride_argb1555,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB1555ToUVRow_MMI(
      src_argb1555,
      src_stride_argb1555,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB1555ToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToUVRow_MMI');
  late final _ARGB1555ToUVRow_MMI = _ARGB1555ToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    int src_stride_argb4444,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB4444ToUVRow_MMI(
      src_argb4444,
      src_stride_argb4444,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB4444ToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToUVRow_MMI');
  late final _ARGB4444ToUVRow_MMI = _ARGB4444ToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_bgra,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _BGRAToYRow_NEON(
      src_bgra,
      dst_y,
      width,
    );
  }

  late final _BGRAToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_NEON');
  late final _BGRAToYRow_NEON = _BGRAToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_abgr,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ABGRToYRow_NEON(
      src_abgr,
      dst_y,
      width,
    );
  }

  late final _ABGRToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_NEON');
  late final _ABGRToYRow_NEON = _ABGRToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgba,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYRow_NEON(
      src_rgba,
      dst_y,
      width,
    );
  }

  late final _RGBAToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_NEON');
  late final _RGBAToYRow_NEON = _RGBAToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB24ToYRow_NEON(
      src_rgb24,
      dst_y,
      width,
    );
  }

  late final _RGB24ToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_NEON');
  late final _RGB24ToYRow_NEON = _RGB24ToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYJRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int width,
  ) {
    return _RGB24ToYJRow_NEON(
      src_rgb24,
      dst_yj,
      width,
    );
  }

  late final _RGB24ToYJRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYJRow_NEON');
  late final _RGB24ToYJRow_NEON = _RGB24ToYJRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RAWToYRow_NEON(
      src_raw,
      dst_y,
      width,
    );
  }

  late final _RAWToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_NEON');
  late final _RAWToYRow_NEON = _RAWToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYJRow_NEON(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_yj,
    int width,
  ) {
    return _RAWToYJRow_NEON(
      src_raw,
      dst_yj,
      width,
    );
  }

  late final _RAWToYJRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYJRow_NEON');
  late final _RAWToYJRow_NEON = _RAWToYJRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB565ToYRow_NEON(
      src_rgb565,
      dst_y,
      width,
    );
  }

  late final _RGB565ToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToYRow_NEON');
  late final _RGB565ToYRow_NEON = _RGB565ToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGB1555ToYRow_NEON(
      src_argb1555,
      dst_y,
      width,
    );
  }

  late final _ARGB1555ToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToYRow_NEON');
  late final _ARGB1555ToYRow_NEON = _ARGB1555ToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGB4444ToYRow_NEON(
      src_argb4444,
      dst_y,
      width,
    );
  }

  late final _ARGB4444ToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToYRow_NEON');
  late final _ARGB4444ToYRow_NEON = _ARGB4444ToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _BGRAToYRow_MSA(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _BGRAToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_MSA');
  late final _BGRAToYRow_MSA = _BGRAToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ABGRToYRow_MSA(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _ABGRToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_MSA');
  late final _ABGRToYRow_MSA = _ABGRToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYRow_MSA(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _RGBAToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_MSA');
  late final _RGBAToYRow_MSA = _RGBAToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB24ToYRow_MSA(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _RGB24ToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_MSA');
  late final _RGB24ToYRow_MSA = _RGB24ToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RAWToYRow_MSA(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _RAWToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_MSA');
  late final _RAWToYRow_MSA = _RAWToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB565ToYRow_MSA(
      src_rgb565,
      dst_y,
      width,
    );
  }

  late final _RGB565ToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToYRow_MSA');
  late final _RGB565ToYRow_MSA = _RGB565ToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGB1555ToYRow_MSA(
      src_argb1555,
      dst_y,
      width,
    );
  }

  late final _ARGB1555ToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToYRow_MSA');
  late final _ARGB1555ToYRow_MSA = _ARGB1555ToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _BGRAToYRow_MMI(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _BGRAToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_MMI');
  late final _BGRAToYRow_MMI = _BGRAToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ABGRToYRow_MMI(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _ABGRToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_MMI');
  late final _ABGRToYRow_MMI = _ABGRToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYRow_MMI(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _RGBAToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_MMI');
  late final _RGBAToYRow_MMI = _RGBAToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB24ToYRow_MMI(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _RGB24ToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_MMI');
  late final _RGB24ToYRow_MMI = _RGB24ToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RAWToYRow_MMI(
      src_argb,
      dst_y,
      width,
    );
  }

  late final _RAWToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_MMI');
  late final _RAWToYRow_MMI = _RAWToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB565ToYRow_MMI(
      src_rgb565,
      dst_y,
      width,
    );
  }

  late final _RGB565ToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToYRow_MMI');
  late final _RGB565ToYRow_MMI = _RGB565ToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGB1555ToYRow_MMI(
      src_argb1555,
      dst_y,
      width,
    );
  }

  late final _ARGB1555ToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToYRow_MMI');
  late final _ARGB1555ToYRow_MMI = _ARGB1555ToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGB4444ToYRow_MMI(
      src_argb4444,
      dst_y,
      width,
    );
  }

  late final _ARGB4444ToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToYRow_MMI');
  late final _ARGB4444ToYRow_MMI = _ARGB4444ToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _ARGBToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_C');
  late final _ARGBToYRow_C = _ARGBToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGBToYJRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _ARGBToYJRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_C');
  late final _ARGBToYJRow_C = _ARGBToYJRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYJRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYJRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _RGBAToYJRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYJRow_C');
  late final _RGBAToYJRow_C = _RGBAToYJRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _BGRAToYRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _BGRAToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_C');
  late final _BGRAToYRow_C = _BGRAToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ABGRToYRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _ABGRToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_C');
  late final _ABGRToYRow_C = _ABGRToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGBAToYRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _RGBAToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_C');
  late final _RGBAToYRow_C = _RGBAToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB24ToYRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _RGB24ToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_C');
  late final _RGB24ToYRow_C = _RGB24ToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYJRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB24ToYJRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _RGB24ToYJRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYJRow_C');
  late final _RGB24ToYJRow_C = _RGB24ToYJRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RAWToYRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _RAWToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_C');
  late final _RAWToYRow_C = _RAWToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYJRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RAWToYJRow_C(
      src_rgb,
      dst_y,
      width,
    );
  }

  late final _RAWToYJRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYJRow_C');
  late final _RAWToYJRow_C = _RAWToYJRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToYRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _RGB565ToYRow_C(
      src_rgb565,
      dst_y,
      width,
    );
  }

  late final _RGB565ToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToYRow_C');
  late final _RGB565ToYRow_C = _RGB565ToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToYRow_C(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGB1555ToYRow_C(
      src_argb1555,
      dst_y,
      width,
    );
  }

  late final _ARGB1555ToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToYRow_C');
  late final _ARGB1555ToYRow_C = _ARGB1555ToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToYRow_C(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _ARGB4444ToYRow_C(
      src_argb4444,
      dst_y,
      width,
    );
  }

  late final _ARGB4444ToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToYRow_C');
  late final _ARGB4444ToYRow_C = _ARGB4444ToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_Any_SSSE3');
  late final _ARGBToYRow_Any_SSSE3 = _ARGBToYRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYJRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYJRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_Any_SSSE3');
  late final _ARGBToYJRow_Any_SSSE3 = _ARGBToYJRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYJRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGBAToYJRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGBAToYJRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYJRow_Any_SSSE3');
  late final _RGBAToYJRow_Any_SSSE3 = _RGBAToYJRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _BGRAToYRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _BGRAToYRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_Any_SSSE3');
  late final _BGRAToYRow_Any_SSSE3 = _BGRAToYRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ABGRToYRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ABGRToYRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_Any_SSSE3');
  late final _ABGRToYRow_Any_SSSE3 = _ABGRToYRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGBAToYRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGBAToYRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_Any_SSSE3');
  late final _RGBAToYRow_Any_SSSE3 = _RGBAToYRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToYRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToYRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_Any_SSSE3');
  late final _RGB24ToYRow_Any_SSSE3 = _RGB24ToYRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYJRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToYJRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToYJRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYJRow_Any_SSSE3');
  late final _RGB24ToYJRow_Any_SSSE3 = _RGB24ToYJRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToYRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToYRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_Any_SSSE3');
  late final _RAWToYRow_Any_SSSE3 = _RAWToYRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYJRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToYJRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToYJRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYJRow_Any_SSSE3');
  late final _RAWToYJRow_Any_SSSE3 = _RAWToYJRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYJRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToYJRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToYJRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYJRow_Any_AVX2');
  late final _RGB24ToYJRow_Any_AVX2 = _RGB24ToYJRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYJRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToYJRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToYJRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYJRow_Any_AVX2');
  late final _RAWToYJRow_Any_AVX2 = _RAWToYJRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_Any_NEON');
  late final _ARGBToYRow_Any_NEON = _ARGBToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYJRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYJRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_Any_NEON');
  late final _ARGBToYJRow_Any_NEON = _ARGBToYJRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYJRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGBAToYJRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGBAToYJRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYJRow_Any_NEON');
  late final _RGBAToYJRow_Any_NEON = _RGBAToYJRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _BGRAToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _BGRAToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_Any_NEON');
  late final _BGRAToYRow_Any_NEON = _BGRAToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ABGRToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ABGRToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_Any_NEON');
  late final _ABGRToYRow_Any_NEON = _ABGRToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGBAToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGBAToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_Any_NEON');
  late final _RGBAToYRow_Any_NEON = _RGBAToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_Any_NEON');
  late final _RGB24ToYRow_Any_NEON = _RGB24ToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYJRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToYJRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToYJRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYJRow_Any_NEON');
  late final _RGB24ToYJRow_Any_NEON = _RGB24ToYJRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_Any_NEON');
  late final _RAWToYRow_Any_NEON = _RAWToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYJRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToYJRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToYJRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYJRow_Any_NEON');
  late final _RAWToYJRow_Any_NEON = _RAWToYJRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB565ToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB565ToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToYRow_Any_NEON');
  late final _RGB565ToYRow_Any_NEON = _RGB565ToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB1555ToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB1555ToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToYRow_Any_NEON');
  late final _ARGB1555ToYRow_Any_NEON = _ARGB1555ToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB4444ToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB4444ToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToYRow_Any_NEON');
  late final _ARGB4444ToYRow_Any_NEON = _ARGB4444ToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _BGRAToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _BGRAToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_Any_MSA');
  late final _BGRAToYRow_Any_MSA = _BGRAToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ABGRToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ABGRToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_Any_MSA');
  late final _ABGRToYRow_Any_MSA = _ABGRToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGBAToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGBAToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_Any_MSA');
  late final _RGBAToYRow_Any_MSA = _RGBAToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYJRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYJRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_Any_MSA');
  late final _ARGBToYJRow_Any_MSA = _ARGBToYJRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_Any_MSA');
  late final _ARGBToYRow_Any_MSA = _ARGBToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_Any_MSA');
  late final _RGB24ToYRow_Any_MSA = _RGB24ToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_Any_MSA');
  late final _RAWToYRow_Any_MSA = _RAWToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB565ToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB565ToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToYRow_Any_MSA');
  late final _RGB565ToYRow_Any_MSA = _RGB565ToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB1555ToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB1555ToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToYRow_Any_MSA');
  late final _ARGB1555ToYRow_Any_MSA = _ARGB1555ToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _BGRAToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _BGRAToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToYRow_Any_MMI');
  late final _BGRAToYRow_Any_MMI = _BGRAToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ABGRToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ABGRToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToYRow_Any_MMI');
  late final _ABGRToYRow_Any_MMI = _ABGRToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGBAToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGBAToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToYRow_Any_MMI');
  late final _RGBAToYRow_Any_MMI = _RGBAToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYJRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYJRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYJRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYJRow_Any_MMI');
  late final _ARGBToYJRow_Any_MMI = _ARGBToYJRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToYRow_Any_MMI');
  late final _ARGBToYRow_Any_MMI = _ARGBToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToYRow_Any_MMI');
  late final _RGB24ToYRow_Any_MMI = _RGB24ToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToYRow_Any_MMI');
  late final _RAWToYRow_Any_MMI = _RAWToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB565ToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB565ToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToYRow_Any_MMI');
  late final _RGB565ToYRow_Any_MMI = _RGB565ToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB1555ToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB1555ToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToYRow_Any_MMI');
  late final _ARGB1555ToYRow_Any_MMI = _ARGB1555ToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB4444ToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB4444ToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToYRow_Any_MMI');
  late final _ARGB4444ToYRow_Any_MMI = _ARGB4444ToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_AVX2(
      src_argb,
      src_stride_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_AVX2');
  late final _ARGBToUVRow_AVX2 = _ARGBToUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_abgr,
    int src_stride_abgr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_AVX2(
      src_abgr,
      src_stride_abgr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_AVX2');
  late final _ABGRToUVRow_AVX2 = _ABGRToUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_AVX2(
      src_argb,
      src_stride_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_AVX2');
  late final _ARGBToUVJRow_AVX2 = _ARGBToUVJRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_SSSE3(
      src_argb,
      src_stride_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_SSSE3');
  late final _ARGBToUVRow_SSSE3 = _ARGBToUVRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_SSSE3(
      src_argb,
      src_stride_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_SSSE3');
  late final _ARGBToUVJRow_SSSE3 = _ARGBToUVJRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_bgra,
    int src_stride_bgra,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_SSSE3(
      src_bgra,
      src_stride_bgra,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_SSSE3');
  late final _BGRAToUVRow_SSSE3 = _BGRAToUVRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_abgr,
    int src_stride_abgr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_SSSE3(
      src_abgr,
      src_stride_abgr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_SSSE3');
  late final _ABGRToUVRow_SSSE3 = _ABGRToUVRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_rgba,
    int src_stride_rgba,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_SSSE3(
      src_rgba,
      src_stride_rgba,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_SSSE3');
  late final _RGBAToUVRow_SSSE3 = _RGBAToUVRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_Any_AVX2(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_Any_AVX2');
  late final _ARGBToUVRow_Any_AVX2 = _ARGBToUVRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_Any_AVX2(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_Any_AVX2');
  late final _ABGRToUVRow_Any_AVX2 = _ABGRToUVRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_Any_AVX2(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_Any_AVX2');
  late final _ARGBToUVJRow_Any_AVX2 = _ARGBToUVJRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_Any_SSSE3');
  late final _ARGBToUVRow_Any_SSSE3 = _ARGBToUVRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_Any_SSSE3');
  late final _ARGBToUVJRow_Any_SSSE3 = _ARGBToUVJRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_Any_SSSE3');
  late final _BGRAToUVRow_Any_SSSE3 = _BGRAToUVRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_Any_SSSE3');
  late final _ABGRToUVRow_Any_SSSE3 = _ABGRToUVRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_Any_SSSE3');
  late final _RGBAToUVRow_Any_SSSE3 = _RGBAToUVRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_Any_NEON(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_Any_NEON');
  late final _ARGBToUV444Row_Any_NEON = _ARGBToUV444Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_Any_NEON');
  late final _ARGBToUVRow_Any_NEON = _ARGBToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_Any_MSA(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_Any_MSA');
  late final _ARGBToUV444Row_Any_MSA = _ARGBToUV444Row_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_Any_MSA');
  late final _ARGBToUVRow_Any_MSA = _ARGBToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_Any_MMI(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_Any_MMI');
  late final _ARGBToUV444Row_Any_MMI = _ARGBToUV444Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_Any_MMI');
  late final _ARGBToUVRow_Any_MMI = _ARGBToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_Any_NEON');
  late final _ARGBToUVJRow_Any_NEON = _ARGBToUVJRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_Any_NEON');
  late final _BGRAToUVRow_Any_NEON = _BGRAToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_Any_NEON');
  late final _ABGRToUVRow_Any_NEON = _ABGRToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_Any_NEON');
  late final _RGBAToUVRow_Any_NEON = _RGBAToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB24ToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB24ToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToUVRow_Any_NEON');
  late final _RGB24ToUVRow_Any_NEON = _RGB24ToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RAWToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RAWToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToUVRow_Any_NEON');
  late final _RAWToUVRow_Any_NEON = _RAWToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB565ToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB565ToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToUVRow_Any_NEON');
  late final _RGB565ToUVRow_Any_NEON = _RGB565ToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB1555ToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB1555ToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToUVRow_Any_NEON');
  late final _ARGB1555ToUVRow_Any_NEON =
      _ARGB1555ToUVRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB4444ToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB4444ToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToUVRow_Any_NEON');
  late final _ARGB4444ToUVRow_Any_NEON =
      _ARGB4444ToUVRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_Any_MSA');
  late final _ARGBToUVJRow_Any_MSA = _ARGBToUVJRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_Any_MSA');
  late final _BGRAToUVRow_Any_MSA = _BGRAToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_Any_MSA');
  late final _ABGRToUVRow_Any_MSA = _ABGRToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_Any_MSA');
  late final _RGBAToUVRow_Any_MSA = _RGBAToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB24ToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB24ToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToUVRow_Any_MSA');
  late final _RGB24ToUVRow_Any_MSA = _RGB24ToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RAWToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RAWToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToUVRow_Any_MSA');
  late final _RAWToUVRow_Any_MSA = _RAWToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB565ToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB565ToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToUVRow_Any_MSA');
  late final _RGB565ToUVRow_Any_MSA = _RGB565ToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB1555ToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB1555ToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToUVRow_Any_MSA');
  late final _ARGB1555ToUVRow_Any_MSA = _ARGB1555ToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_Any_MMI');
  late final _ARGBToUVJRow_Any_MMI = _ARGBToUVJRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_Any_MMI');
  late final _BGRAToUVRow_Any_MMI = _BGRAToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_Any_MMI');
  late final _ABGRToUVRow_Any_MMI = _ABGRToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_Any_MMI');
  late final _RGBAToUVRow_Any_MMI = _RGBAToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB24ToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB24ToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToUVRow_Any_MMI');
  late final _RGB24ToUVRow_Any_MMI = _RGB24ToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RAWToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RAWToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToUVRow_Any_MMI');
  late final _RAWToUVRow_Any_MMI = _RAWToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB565ToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB565ToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToUVRow_Any_MMI');
  late final _RGB565ToUVRow_Any_MMI = _RGB565ToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB1555ToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB1555ToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToUVRow_Any_MMI');
  late final _ARGB1555ToUVRow_Any_MMI = _ARGB1555ToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB4444ToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB4444ToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToUVRow_Any_MMI');
  late final _ARGB4444ToUVRow_Any_MMI = _ARGB4444ToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVRow_C(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVRow_C');
  late final _ARGBToUVRow_C = _ARGBToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUVJRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUVJRow_C(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUVJRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToUVJRow_C');
  late final _ARGBToUVJRow_C = _ARGBToUVJRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void BGRAToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _BGRAToUVRow_C(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _BGRAToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BGRAToUVRow_C');
  late final _BGRAToUVRow_C = _BGRAToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ABGRToUVRow_C(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ABGRToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToUVRow_C');
  late final _ABGRToUVRow_C = _ABGRToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGBAToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGBAToUVRow_C(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGBAToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBAToUVRow_C');
  late final _RGBAToUVRow_C = _RGBAToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB24ToUVRow_C(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB24ToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToUVRow_C');
  late final _RGB24ToUVRow_C = _RGB24ToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RAWToUVRow_C(
      src_rgb,
      src_stride_rgb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RAWToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToUVRow_C');
  late final _RAWToUVRow_C = _RAWToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    int src_stride_rgb565,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _RGB565ToUVRow_C(
      src_rgb565,
      src_stride_rgb565,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _RGB565ToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToUVRow_C');
  late final _RGB565ToUVRow_C = _RGB565ToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    int src_stride_argb1555,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB1555ToUVRow_C(
      src_argb1555,
      src_stride_argb1555,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB1555ToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToUVRow_C');
  late final _ARGB1555ToUVRow_C = _ARGB1555ToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    int src_stride_argb4444,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGB4444ToUVRow_C(
      src_argb4444,
      src_stride_argb4444,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGB4444ToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToUVRow_C');
  late final _ARGB4444ToUVRow_C = _ARGB4444ToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_SSSE3(
      src_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_SSSE3');
  late final _ARGBToUV444Row_SSSE3 = _ARGBToUV444Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_Any_SSSE3(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_Any_SSSE3');
  late final _ARGBToUV444Row_Any_SSSE3 =
      _ARGBToUV444Row_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToUV444Row_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _ARGBToUV444Row_C(
      src_argb,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _ARGBToUV444Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBToUV444Row_C');
  late final _ARGBToUV444Row_C = _ARGBToUV444Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _MirrorRow_AVX2(
      src,
      dst,
      width,
    );
  }

  late final _MirrorRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_AVX2');
  late final _MirrorRow_AVX2 = _MirrorRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _MirrorRow_SSSE3(
      src,
      dst,
      width,
    );
  }

  late final _MirrorRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_SSSE3');
  late final _MirrorRow_SSSE3 = _MirrorRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_NEON(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _MirrorRow_NEON(
      src,
      dst,
      width,
    );
  }

  late final _MirrorRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_NEON');
  late final _MirrorRow_NEON = _MirrorRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_MSA(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _MirrorRow_MSA(
      src,
      dst,
      width,
    );
  }

  late final _MirrorRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_MSA');
  late final _MirrorRow_MSA = _MirrorRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_MMI(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _MirrorRow_MMI(
      src,
      dst,
      width,
    );
  }

  late final _MirrorRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_MMI');
  late final _MirrorRow_MMI = _MirrorRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_C(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _MirrorRow_C(
      src,
      dst,
      width,
    );
  }

  late final _MirrorRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_C');
  late final _MirrorRow_C = _MirrorRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_Any_AVX2');
  late final _MirrorRow_Any_AVX2 = _MirrorRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_Any_SSSE3');
  late final _MirrorRow_Any_SSSE3 = _MirrorRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _MirrorRow_Any_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _MirrorRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_Any_SSE2');
  late final _MirrorRow_Any_SSE2 = _MirrorRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_Any_NEON');
  late final _MirrorRow_Any_NEON = _MirrorRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_Any_MSA');
  late final _MirrorRow_Any_MSA = _MirrorRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorRow_Any_MMI');
  late final _MirrorRow_Any_MMI = _MirrorRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MirrorUVRow_AVX2(
      src_uv,
      dst_uv,
      width,
    );
  }

  late final _MirrorUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_AVX2');
  late final _MirrorUVRow_AVX2 = _MirrorUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MirrorUVRow_SSSE3(
      src_uv,
      dst_uv,
      width,
    );
  }

  late final _MirrorUVRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_SSSE3');
  late final _MirrorUVRow_SSSE3 = _MirrorUVRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MirrorUVRow_NEON(
      src_uv,
      dst_uv,
      width,
    );
  }

  late final _MirrorUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_NEON');
  late final _MirrorUVRow_NEON = _MirrorUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MirrorUVRow_MSA(
      src_uv,
      dst_uv,
      width,
    );
  }

  late final _MirrorUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_MSA');
  late final _MirrorUVRow_MSA = _MirrorUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MirrorUVRow_C(
      src_uv,
      dst_uv,
      width,
    );
  }

  late final _MirrorUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_C');
  late final _MirrorUVRow_C = _MirrorUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorUVRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorUVRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_Any_AVX2');
  late final _MirrorUVRow_Any_AVX2 = _MirrorUVRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorUVRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorUVRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_Any_SSSE3');
  late final _MirrorUVRow_Any_SSSE3 = _MirrorUVRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorUVRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_Any_NEON');
  late final _MirrorUVRow_Any_NEON = _MirrorUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MirrorUVRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _MirrorUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MirrorUVRow_Any_MSA');
  late final _MirrorUVRow_Any_MSA = _MirrorUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorSplitUVRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _MirrorSplitUVRow_SSSE3(
      src,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _MirrorSplitUVRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MirrorSplitUVRow_SSSE3');
  late final _MirrorSplitUVRow_SSSE3 = _MirrorSplitUVRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorSplitUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _MirrorSplitUVRow_NEON(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _MirrorSplitUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MirrorSplitUVRow_NEON');
  late final _MirrorSplitUVRow_NEON = _MirrorSplitUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorSplitUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _MirrorSplitUVRow_MSA(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _MirrorSplitUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MirrorSplitUVRow_MSA');
  late final _MirrorSplitUVRow_MSA = _MirrorSplitUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorSplitUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _MirrorSplitUVRow_MMI(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _MirrorSplitUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MirrorSplitUVRow_MMI');
  late final _MirrorSplitUVRow_MMI = _MirrorSplitUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MirrorSplitUVRow_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _MirrorSplitUVRow_C(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _MirrorSplitUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MirrorSplitUVRow_C');
  late final _MirrorSplitUVRow_C = _MirrorSplitUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBMirrorRow_AVX2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBMirrorRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_AVX2');
  late final _ARGBMirrorRow_AVX2 = _ARGBMirrorRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBMirrorRow_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBMirrorRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_SSE2');
  late final _ARGBMirrorRow_SSE2 = _ARGBMirrorRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBMirrorRow_NEON(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBMirrorRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_NEON');
  late final _ARGBMirrorRow_NEON = _ARGBMirrorRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_MSA(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBMirrorRow_MSA(
      src,
      dst,
      width,
    );
  }

  late final _ARGBMirrorRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_MSA');
  late final _ARGBMirrorRow_MSA = _ARGBMirrorRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_MMI(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBMirrorRow_MMI(
      src,
      dst,
      width,
    );
  }

  late final _ARGBMirrorRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_MMI');
  late final _ARGBMirrorRow_MMI = _ARGBMirrorRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_C(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBMirrorRow_C(
      src,
      dst,
      width,
    );
  }

  late final _ARGBMirrorRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_C');
  late final _ARGBMirrorRow_C = _ARGBMirrorRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMirrorRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMirrorRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_Any_AVX2');
  late final _ARGBMirrorRow_Any_AVX2 = _ARGBMirrorRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMirrorRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMirrorRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_Any_SSE2');
  late final _ARGBMirrorRow_Any_SSE2 = _ARGBMirrorRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMirrorRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMirrorRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_Any_NEON');
  late final _ARGBMirrorRow_Any_NEON = _ARGBMirrorRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMirrorRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMirrorRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_Any_MSA');
  late final _ARGBMirrorRow_Any_MSA = _ARGBMirrorRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMirrorRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMirrorRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMirrorRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBMirrorRow_Any_MMI');
  late final _ARGBMirrorRow_Any_MMI = _ARGBMirrorRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24MirrorRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _RGB24MirrorRow_SSSE3(
      src_rgb24,
      dst_rgb24,
      width,
    );
  }

  late final _RGB24MirrorRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24MirrorRow_SSSE3');
  late final _RGB24MirrorRow_SSSE3 = _RGB24MirrorRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24MirrorRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _RGB24MirrorRow_NEON(
      src_rgb24,
      dst_rgb24,
      width,
    );
  }

  late final _RGB24MirrorRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24MirrorRow_NEON');
  late final _RGB24MirrorRow_NEON = _RGB24MirrorRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24MirrorRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _RGB24MirrorRow_C(
      src_rgb24,
      dst_rgb24,
      width,
    );
  }

  late final _RGB24MirrorRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24MirrorRow_C');
  late final _RGB24MirrorRow_C = _RGB24MirrorRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24MirrorRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24MirrorRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24MirrorRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24MirrorRow_Any_SSSE3');
  late final _RGB24MirrorRow_Any_SSSE3 =
      _RGB24MirrorRow_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24MirrorRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24MirrorRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24MirrorRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24MirrorRow_Any_NEON');
  late final _RGB24MirrorRow_Any_NEON = _RGB24MirrorRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_C(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_C');
  late final _SplitUVRow_C = _SplitUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_SSE2(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_SSE2');
  late final _SplitUVRow_SSE2 = _SplitUVRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_AVX2(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_AVX2');
  late final _SplitUVRow_AVX2 = _SplitUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_NEON(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_NEON');
  late final _SplitUVRow_NEON = _SplitUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_MSA(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_MSA');
  late final _SplitUVRow_MSA = _SplitUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_MMI(
      src_uv,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_MMI');
  late final _SplitUVRow_MMI = _SplitUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_Any_SSE2(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_Any_SSE2');
  late final _SplitUVRow_Any_SSE2 = _SplitUVRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_Any_AVX2(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_Any_AVX2');
  late final _SplitUVRow_Any_AVX2 = _SplitUVRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_Any_NEON(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_Any_NEON');
  late final _SplitUVRow_Any_NEON = _SplitUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_Any_MSA(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_Any_MSA');
  late final _SplitUVRow_Any_MSA = _SplitUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _SplitUVRow_Any_MMI(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _SplitUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SplitUVRow_Any_MMI');
  late final _SplitUVRow_Any_MMI = _SplitUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_C(
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MergeUVRow_C(
      src_u,
      src_v,
      dst_uv,
      width,
    );
  }

  late final _MergeUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_C');
  late final _MergeUVRow_C = _MergeUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MergeUVRow_SSE2(
      src_u,
      src_v,
      dst_uv,
      width,
    );
  }

  late final _MergeUVRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_SSE2');
  late final _MergeUVRow_SSE2 = _MergeUVRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MergeUVRow_AVX2(
      src_u,
      src_v,
      dst_uv,
      width,
    );
  }

  late final _MergeUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_AVX2');
  late final _MergeUVRow_AVX2 = _MergeUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MergeUVRow_NEON(
      src_u,
      src_v,
      dst_uv,
      width,
    );
  }

  late final _MergeUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_NEON');
  late final _MergeUVRow_NEON = _MergeUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MergeUVRow_MSA(
      src_u,
      src_v,
      dst_uv,
      width,
    );
  }

  late final _MergeUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_MSA');
  late final _MergeUVRow_MSA = _MergeUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _MergeUVRow_MMI(
      src_u,
      src_v,
      dst_uv,
      width,
    );
  }

  late final _MergeUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_MMI');
  late final _MergeUVRow_MMI = _MergeUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeUVRow_Any_SSE2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeUVRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_Any_SSE2');
  late final _MergeUVRow_Any_SSE2 = _MergeUVRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeUVRow_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeUVRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_Any_AVX2');
  late final _MergeUVRow_Any_AVX2 = _MergeUVRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeUVRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_Any_NEON');
  late final _MergeUVRow_Any_NEON = _MergeUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeUVRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_Any_MSA');
  late final _MergeUVRow_Any_MSA = _MergeUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void MergeUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeUVRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('MergeUVRow_Any_MMI');
  late final _MergeUVRow_Any_MMI = _MergeUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void HalfMergeUVRow_C(
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _HalfMergeUVRow_C(
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uv,
      width,
    );
  }

  late final _HalfMergeUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('HalfMergeUVRow_C');
  late final _HalfMergeUVRow_C = _HalfMergeUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  void HalfMergeUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _HalfMergeUVRow_NEON(
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uv,
      width,
    );
  }

  late final _HalfMergeUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('HalfMergeUVRow_NEON');
  late final _HalfMergeUVRow_NEON = _HalfMergeUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  void HalfMergeUVRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _HalfMergeUVRow_SSSE3(
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uv,
      width,
    );
  }

  late final _HalfMergeUVRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('HalfMergeUVRow_SSSE3');
  late final _HalfMergeUVRow_SSSE3 = _HalfMergeUVRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  void HalfMergeUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _HalfMergeUVRow_AVX2(
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uv,
      width,
    );
  }

  late final _HalfMergeUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('HalfMergeUVRow_AVX2');
  late final _HalfMergeUVRow_AVX2 = _HalfMergeUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SplitRGBRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitRGBRow_C(
      src_rgb,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitRGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitRGBRow_C');
  late final _SplitRGBRow_C = _SplitRGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitRGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitRGBRow_SSSE3(
      src_rgb,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitRGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitRGBRow_SSSE3');
  late final _SplitRGBRow_SSSE3 = _SplitRGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitRGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitRGBRow_NEON(
      src_rgb,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitRGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitRGBRow_NEON');
  late final _SplitRGBRow_NEON = _SplitRGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitRGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitRGBRow_MMI(
      src_rgb,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitRGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitRGBRow_MMI');
  late final _SplitRGBRow_MMI = _SplitRGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitRGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitRGBRow_Any_SSSE3(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitRGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitRGBRow_Any_SSSE3');
  late final _SplitRGBRow_Any_SSSE3 = _SplitRGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitRGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitRGBRow_Any_NEON(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitRGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitRGBRow_Any_NEON');
  late final _SplitRGBRow_Any_NEON = _SplitRGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitRGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitRGBRow_Any_MMI(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitRGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitRGBRow_Any_MMI');
  late final _SplitRGBRow_Any_MMI = _SplitRGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeRGBRow_C(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _MergeRGBRow_C(
      src_r,
      src_g,
      src_b,
      dst_rgb,
      width,
    );
  }

  late final _MergeRGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeRGBRow_C');
  late final _MergeRGBRow_C = _MergeRGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeRGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _MergeRGBRow_SSSE3(
      src_r,
      src_g,
      src_b,
      dst_rgb,
      width,
    );
  }

  late final _MergeRGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeRGBRow_SSSE3');
  late final _MergeRGBRow_SSSE3 = _MergeRGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeRGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _MergeRGBRow_NEON(
      src_r,
      src_g,
      src_b,
      dst_rgb,
      width,
    );
  }

  late final _MergeRGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeRGBRow_NEON');
  late final _MergeRGBRow_NEON = _MergeRGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeRGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _MergeRGBRow_MMI(
      src_r,
      src_g,
      src_b,
      dst_rgb,
      width,
    );
  }

  late final _MergeRGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeRGBRow_MMI');
  late final _MergeRGBRow_MMI = _MergeRGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeRGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeRGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeRGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeRGBRow_Any_SSSE3');
  late final _MergeRGBRow_Any_SSSE3 = _MergeRGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeRGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _MergeRGBRow_Any_NEON(
      src_r,
      src_g,
      src_b,
      dst_rgb,
      width,
    );
  }

  late final _MergeRGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeRGBRow_Any_NEON');
  late final _MergeRGBRow_Any_NEON = _MergeRGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeRGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _MergeRGBRow_Any_MMI(
      src_r,
      src_g,
      src_b,
      dst_rgb,
      width,
    );
  }

  late final _MergeRGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeRGBRow_Any_MMI');
  late final _MergeRGBRow_Any_MMI = _MergeRGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _MergeARGBRow_C(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_argb,
      width,
    );
  }

  late final _MergeARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeARGBRow_C');
  late final _MergeARGBRow_C = _MergeARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void MergeARGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _MergeARGBRow_SSE2(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_argb,
      width,
    );
  }

  late final _MergeARGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeARGBRow_SSE2');
  late final _MergeARGBRow_SSE2 = _MergeARGBRow_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void MergeARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _MergeARGBRow_AVX2(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_argb,
      width,
    );
  }

  late final _MergeARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeARGBRow_AVX2');
  late final _MergeARGBRow_AVX2 = _MergeARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void MergeARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _MergeARGBRow_NEON(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_argb,
      width,
    );
  }

  late final _MergeARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeARGBRow_NEON');
  late final _MergeARGBRow_NEON = _MergeARGBRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void MergeARGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeARGBRow_Any_SSE2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeARGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeARGBRow_Any_SSE2');
  late final _MergeARGBRow_Any_SSE2 = _MergeARGBRow_Any_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void MergeARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeARGBRow_Any_AVX2');
  late final _MergeARGBRow_Any_AVX2 = _MergeARGBRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void MergeARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeARGBRow_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeARGBRow_Any_NEON');
  late final _MergeARGBRow_Any_NEON = _MergeARGBRow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_C(
      src_argb,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_C');
  late final _SplitARGBRow_C = _SplitARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_SSE2(
      src_argb,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_SSE2');
  late final _SplitARGBRow_SSE2 = _SplitARGBRow_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_SSSE3(
      src_argb,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_SSSE3');
  late final _SplitARGBRow_SSSE3 = _SplitARGBRow_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_AVX2(
      src_argb,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_AVX2');
  late final _SplitARGBRow_AVX2 = _SplitARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgba,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_NEON(
      src_rgba,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_NEON');
  late final _SplitARGBRow_NEON = _SplitARGBRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_Any_SSE2(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_Any_SSE2');
  late final _SplitARGBRow_Any_SSE2 = _SplitARGBRow_Any_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_Any_SSSE3(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_Any_SSSE3');
  late final _SplitARGBRow_Any_SSSE3 = _SplitARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_Any_AVX2(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_Any_AVX2');
  late final _SplitARGBRow_Any_AVX2 = _SplitARGBRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void SplitARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _SplitARGBRow_Any_NEON(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      dst_a,
      width,
    );
  }

  late final _SplitARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitARGBRow_Any_NEON');
  late final _SplitARGBRow_Any_NEON = _SplitARGBRow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  void MergeXRGBRow_C(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _MergeXRGBRow_C(
      src_r,
      src_g,
      src_b,
      dst_argb,
      width,
    );
  }

  late final _MergeXRGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeXRGBRow_C');
  late final _MergeXRGBRow_C = _MergeXRGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeXRGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _MergeXRGBRow_SSE2(
      src_r,
      src_g,
      src_b,
      dst_argb,
      width,
    );
  }

  late final _MergeXRGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeXRGBRow_SSE2');
  late final _MergeXRGBRow_SSE2 = _MergeXRGBRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeXRGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _MergeXRGBRow_AVX2(
      src_r,
      src_g,
      src_b,
      dst_argb,
      width,
    );
  }

  late final _MergeXRGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeXRGBRow_AVX2');
  late final _MergeXRGBRow_AVX2 = _MergeXRGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeXRGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_r,
    ffi.Pointer<ffi.Uint8> src_g,
    ffi.Pointer<ffi.Uint8> src_b,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _MergeXRGBRow_NEON(
      src_r,
      src_g,
      src_b,
      dst_argb,
      width,
    );
  }

  late final _MergeXRGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeXRGBRow_NEON');
  late final _MergeXRGBRow_NEON = _MergeXRGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeXRGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeXRGBRow_Any_SSE2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeXRGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeXRGBRow_Any_SSE2');
  late final _MergeXRGBRow_Any_SSE2 = _MergeXRGBRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeXRGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeXRGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeXRGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeXRGBRow_Any_AVX2');
  late final _MergeXRGBRow_Any_AVX2 = _MergeXRGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeXRGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _MergeXRGBRow_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _MergeXRGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('MergeXRGBRow_Any_NEON');
  late final _MergeXRGBRow_Any_NEON = _MergeXRGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_C(
      src_argb,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_C');
  late final _SplitXRGBRow_C = _SplitXRGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_SSE2(
      src_argb,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_SSE2');
  late final _SplitXRGBRow_SSE2 = _SplitXRGBRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_SSSE3(
      src_argb,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_SSSE3');
  late final _SplitXRGBRow_SSSE3 = _SplitXRGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_AVX2(
      src_argb,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_AVX2');
  late final _SplitXRGBRow_AVX2 = _SplitXRGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgba,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_NEON(
      src_rgba,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_NEON');
  late final _SplitXRGBRow_NEON = _SplitXRGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_Any_SSE2(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_Any_SSE2');
  late final _SplitXRGBRow_Any_SSE2 = _SplitXRGBRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_Any_SSSE3(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_Any_SSSE3');
  late final _SplitXRGBRow_Any_SSSE3 = _SplitXRGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_Any_AVX2(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_Any_AVX2');
  late final _SplitXRGBRow_Any_AVX2 = _SplitXRGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SplitXRGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int width,
  ) {
    return _SplitXRGBRow_Any_NEON(
      src_ptr,
      dst_r,
      dst_g,
      dst_b,
      width,
    );
  }

  late final _SplitXRGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SplitXRGBRow_Any_NEON');
  late final _SplitXRGBRow_Any_NEON = _SplitXRGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void MergeXR30Row_C(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int depth,
    int width,
  ) {
    return _MergeXR30Row_C(
      src_r,
      src_g,
      src_b,
      dst_ar30,
      depth,
      width,
    );
  }

  late final _MergeXR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXR30Row_C');
  late final _MergeXR30Row_C = _MergeXR30Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeAR64Row_C(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> src_a,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int depth,
    int width,
  ) {
    return _MergeAR64Row_C(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_ar64,
      depth,
      width,
    );
  }

  late final _MergeAR64Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeAR64Row_C');
  late final _MergeAR64Row_C = _MergeAR64Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          int,
          int)>();

  void MergeARGB16To8Row_C(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int depth,
    int width,
  ) {
    return _MergeARGB16To8Row_C(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_argb,
      depth,
      width,
    );
  }

  late final _MergeARGB16To8Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeARGB16To8Row_C');
  late final _MergeARGB16To8Row_C = _MergeARGB16To8Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int)>();

  void MergeXR64Row_C(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int depth,
    int width,
  ) {
    return _MergeXR64Row_C(
      src_r,
      src_g,
      src_b,
      dst_ar64,
      depth,
      width,
    );
  }

  late final _MergeXR64Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeXR64Row_C');
  late final _MergeXR64Row_C = _MergeXR64Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeXRGB16To8Row_C(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int depth,
    int width,
  ) {
    return _MergeXRGB16To8Row_C(
      src_r,
      src_g,
      src_b,
      dst_argb,
      depth,
      width,
    );
  }

  late final _MergeXRGB16To8Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXRGB16To8Row_C');
  late final _MergeXRGB16To8Row_C = _MergeXRGB16To8Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeXR30Row_AVX2(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int depth,
    int width,
  ) {
    return _MergeXR30Row_AVX2(
      src_r,
      src_g,
      src_b,
      dst_ar30,
      depth,
      width,
    );
  }

  late final _MergeXR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXR30Row_AVX2');
  late final _MergeXR30Row_AVX2 = _MergeXR30Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeAR64Row_AVX2(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> src_a,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int depth,
    int width,
  ) {
    return _MergeAR64Row_AVX2(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_ar64,
      depth,
      width,
    );
  }

  late final _MergeAR64Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeAR64Row_AVX2');
  late final _MergeAR64Row_AVX2 = _MergeAR64Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          int,
          int)>();

  void MergeARGB16To8Row_AVX2(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int depth,
    int width,
  ) {
    return _MergeARGB16To8Row_AVX2(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_argb,
      depth,
      width,
    );
  }

  late final _MergeARGB16To8Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeARGB16To8Row_AVX2');
  late final _MergeARGB16To8Row_AVX2 = _MergeARGB16To8Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int)>();

  void MergeXR64Row_AVX2(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int depth,
    int width,
  ) {
    return _MergeXR64Row_AVX2(
      src_r,
      src_g,
      src_b,
      dst_ar64,
      depth,
      width,
    );
  }

  late final _MergeXR64Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeXR64Row_AVX2');
  late final _MergeXR64Row_AVX2 = _MergeXR64Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeXRGB16To8Row_AVX2(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int depth,
    int width,
  ) {
    return _MergeXRGB16To8Row_AVX2(
      src_r,
      src_g,
      src_b,
      dst_argb,
      depth,
      width,
    );
  }

  late final _MergeXRGB16To8Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXRGB16To8Row_AVX2');
  late final _MergeXRGB16To8Row_AVX2 = _MergeXRGB16To8Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeXR30Row_NEON(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int depth,
    int width,
  ) {
    return _MergeXR30Row_NEON(
      src_r,
      src_g,
      src_b,
      dst_ar30,
      depth,
      width,
    );
  }

  late final _MergeXR30Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXR30Row_NEON');
  late final _MergeXR30Row_NEON = _MergeXR30Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeXR30Row_10_NEON(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int arg4,
    int width,
  ) {
    return _MergeXR30Row_10_NEON(
      src_r,
      src_g,
      src_b,
      dst_ar30,
      arg4,
      width,
    );
  }

  late final _MergeXR30Row_10_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXR30Row_10_NEON');
  late final _MergeXR30Row_10_NEON = _MergeXR30Row_10_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeAR64Row_NEON(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> src_a,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int depth,
    int width,
  ) {
    return _MergeAR64Row_NEON(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_ar64,
      depth,
      width,
    );
  }

  late final _MergeAR64Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeAR64Row_NEON');
  late final _MergeAR64Row_NEON = _MergeAR64Row_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          int,
          int)>();

  void MergeARGB16To8Row_NEON(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int depth,
    int width,
  ) {
    return _MergeARGB16To8Row_NEON(
      src_r,
      src_g,
      src_b,
      src_a,
      dst_argb,
      depth,
      width,
    );
  }

  late final _MergeARGB16To8Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeARGB16To8Row_NEON');
  late final _MergeARGB16To8Row_NEON = _MergeARGB16To8Row_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int)>();

  void MergeXR64Row_NEON(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int depth,
    int width,
  ) {
    return _MergeXR64Row_NEON(
      src_r,
      src_g,
      src_b,
      dst_ar64,
      depth,
      width,
    );
  }

  late final _MergeXR64Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeXR64Row_NEON');
  late final _MergeXR64Row_NEON = _MergeXR64Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeXRGB16To8Row_NEON(
    ffi.Pointer<ffi.Uint16> src_r,
    ffi.Pointer<ffi.Uint16> src_g,
    ffi.Pointer<ffi.Uint16> src_b,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int depth,
    int width,
  ) {
    return _MergeXRGB16To8Row_NEON(
      src_r,
      src_g,
      src_b,
      dst_argb,
      depth,
      width,
    );
  }

  late final _MergeXRGB16To8Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXRGB16To8Row_NEON');
  late final _MergeXRGB16To8Row_NEON = _MergeXRGB16To8Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeXR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeXR30Row_Any_AVX2(
      r_buf,
      g_buf,
      b_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeXR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXR30Row_Any_AVX2');
  late final _MergeXR30Row_Any_AVX2 = _MergeXR30Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeAR64Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeAR64Row_Any_AVX2(
      r_buf,
      g_buf,
      b_buf,
      a_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeAR64Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeAR64Row_Any_AVX2');
  late final _MergeAR64Row_Any_AVX2 = _MergeAR64Row_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          int,
          int)>();

  void MergeXR64Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeXR64Row_Any_AVX2(
      r_buf,
      g_buf,
      b_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeXR64Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeXR64Row_Any_AVX2');
  late final _MergeXR64Row_Any_AVX2 = _MergeXR64Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeARGB16To8Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeARGB16To8Row_Any_AVX2(
      r_buf,
      g_buf,
      b_buf,
      a_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeARGB16To8Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeARGB16To8Row_Any_AVX2');
  late final _MergeARGB16To8Row_Any_AVX2 =
      _MergeARGB16To8Row_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              int,
              int)>();

  void MergeXRGB16To8Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeXRGB16To8Row_Any_AVX2(
      r_buf,
      g_buf,
      b_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeXRGB16To8Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXRGB16To8Row_Any_AVX2');
  late final _MergeXRGB16To8Row_Any_AVX2 =
      _MergeXRGB16To8Row_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeXR30Row_Any_NEON(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeXR30Row_Any_NEON(
      r_buf,
      g_buf,
      b_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeXR30Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXR30Row_Any_NEON');
  late final _MergeXR30Row_Any_NEON = _MergeXR30Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeXR30Row_10_Any_NEON(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeXR30Row_10_Any_NEON(
      r_buf,
      g_buf,
      b_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeXR30Row_10_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXR30Row_10_Any_NEON');
  late final _MergeXR30Row_10_Any_NEON =
      _MergeXR30Row_10_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeAR64Row_Any_NEON(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeAR64Row_Any_NEON(
      r_buf,
      g_buf,
      b_buf,
      a_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeAR64Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeAR64Row_Any_NEON');
  late final _MergeAR64Row_Any_NEON = _MergeAR64Row_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          int,
          int)>();

  void MergeARGB16To8Row_Any_NEON(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeARGB16To8Row_Any_NEON(
      r_buf,
      g_buf,
      b_buf,
      a_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeARGB16To8Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeARGB16To8Row_Any_NEON');
  late final _MergeARGB16To8Row_Any_NEON =
      _MergeARGB16To8Row_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              int,
              int)>();

  void MergeXR64Row_Any_NEON(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeXR64Row_Any_NEON(
      r_buf,
      g_buf,
      b_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeXR64Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeXR64Row_Any_NEON');
  late final _MergeXR64Row_Any_NEON = _MergeXR64Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeXRGB16To8Row_Any_NEON(
    ffi.Pointer<ffi.Uint16> r_buf,
    ffi.Pointer<ffi.Uint16> g_buf,
    ffi.Pointer<ffi.Uint16> b_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int depth,
    int width,
  ) {
    return _MergeXRGB16To8Row_Any_NEON(
      r_buf,
      g_buf,
      b_buf,
      dst_ptr,
      depth,
      width,
    );
  }

  late final _MergeXRGB16To8Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('MergeXRGB16To8Row_Any_NEON');
  late final _MergeXRGB16To8Row_Any_NEON =
      _MergeXRGB16To8Row_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void MergeUVRow_16_C(
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int depth,
    int width,
  ) {
    return _MergeUVRow_16_C(
      src_u,
      src_v,
      dst_uv,
      depth,
      width,
    );
  }

  late final _MergeUVRow_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>, ffi.Int, ffi.Int)>>('MergeUVRow_16_C');
  late final _MergeUVRow_16_C = _MergeUVRow_16_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeUVRow_16_AVX2(
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int depth,
    int width,
  ) {
    return _MergeUVRow_16_AVX2(
      src_u,
      src_v,
      dst_uv,
      depth,
      width,
    );
  }

  late final _MergeUVRow_16_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeUVRow_16_AVX2');
  late final _MergeUVRow_16_AVX2 = _MergeUVRow_16_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeUVRow_16_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int depth,
    int width,
  ) {
    return _MergeUVRow_16_Any_AVX2(
      src_u,
      src_v,
      dst_uv,
      depth,
      width,
    );
  }

  late final _MergeUVRow_16_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeUVRow_16_Any_AVX2');
  late final _MergeUVRow_16_Any_AVX2 = _MergeUVRow_16_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeUVRow_16_NEON(
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int depth,
    int width,
  ) {
    return _MergeUVRow_16_NEON(
      src_u,
      src_v,
      dst_uv,
      depth,
      width,
    );
  }

  late final _MergeUVRow_16_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeUVRow_16_NEON');
  late final _MergeUVRow_16_NEON = _MergeUVRow_16_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void MergeUVRow_16_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int depth,
    int width,
  ) {
    return _MergeUVRow_16_Any_NEON(
      src_u,
      src_v,
      dst_uv,
      depth,
      width,
    );
  }

  late final _MergeUVRow_16_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('MergeUVRow_16_Any_NEON');
  late final _MergeUVRow_16_Any_NEON = _MergeUVRow_16_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void SplitUVRow_16_C(
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint16> dst_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int depth,
    int width,
  ) {
    return _SplitUVRow_16_C(
      src_uv,
      dst_u,
      dst_v,
      depth,
      width,
    );
  }

  late final _SplitUVRow_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>, ffi.Int, ffi.Int)>>('SplitUVRow_16_C');
  late final _SplitUVRow_16_C = _SplitUVRow_16_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void SplitUVRow_16_AVX2(
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint16> dst_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int depth,
    int width,
  ) {
    return _SplitUVRow_16_AVX2(
      src_uv,
      dst_u,
      dst_v,
      depth,
      width,
    );
  }

  late final _SplitUVRow_16_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('SplitUVRow_16_AVX2');
  late final _SplitUVRow_16_AVX2 = _SplitUVRow_16_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void SplitUVRow_16_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint16> dst_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int depth,
    int width,
  ) {
    return _SplitUVRow_16_Any_AVX2(
      src_uv,
      dst_u,
      dst_v,
      depth,
      width,
    );
  }

  late final _SplitUVRow_16_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('SplitUVRow_16_Any_AVX2');
  late final _SplitUVRow_16_Any_AVX2 = _SplitUVRow_16_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void SplitUVRow_16_NEON(
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint16> dst_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int depth,
    int width,
  ) {
    return _SplitUVRow_16_NEON(
      src_uv,
      dst_u,
      dst_v,
      depth,
      width,
    );
  }

  late final _SplitUVRow_16_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('SplitUVRow_16_NEON');
  late final _SplitUVRow_16_NEON = _SplitUVRow_16_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void SplitUVRow_16_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint16> dst_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int depth,
    int width,
  ) {
    return _SplitUVRow_16_Any_NEON(
      src_uv,
      dst_u,
      dst_v,
      depth,
      width,
    );
  }

  late final _SplitUVRow_16_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int)>>('SplitUVRow_16_Any_NEON');
  late final _SplitUVRow_16_Any_NEON = _SplitUVRow_16_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  void MultiplyRow_16_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _MultiplyRow_16_C(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _MultiplyRow_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('MultiplyRow_16_C');
  late final _MultiplyRow_16_C = _MultiplyRow_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MultiplyRow_16_AVX2(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _MultiplyRow_16_AVX2(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _MultiplyRow_16_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('MultiplyRow_16_AVX2');
  late final _MultiplyRow_16_AVX2 = _MultiplyRow_16_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MultiplyRow_16_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int scale,
    int width,
  ) {
    return _MultiplyRow_16_Any_AVX2(
      src_ptr,
      dst_ptr,
      scale,
      width,
    );
  }

  late final _MultiplyRow_16_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('MultiplyRow_16_Any_AVX2');
  late final _MultiplyRow_16_Any_AVX2 = _MultiplyRow_16_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MultiplyRow_16_NEON(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _MultiplyRow_16_NEON(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _MultiplyRow_16_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('MultiplyRow_16_NEON');
  late final _MultiplyRow_16_NEON = _MultiplyRow_16_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void MultiplyRow_16_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int scale,
    int width,
  ) {
    return _MultiplyRow_16_Any_NEON(
      src_ptr,
      dst_ptr,
      scale,
      width,
    );
  }

  late final _MultiplyRow_16_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('MultiplyRow_16_Any_NEON');
  late final _MultiplyRow_16_Any_NEON = _MultiplyRow_16_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void DivideRow_16_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _DivideRow_16_C(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _DivideRow_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('DivideRow_16_C');
  late final _DivideRow_16_C = _DivideRow_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void DivideRow_16_AVX2(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _DivideRow_16_AVX2(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _DivideRow_16_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('DivideRow_16_AVX2');
  late final _DivideRow_16_AVX2 = _DivideRow_16_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void DivideRow_16_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int scale,
    int width,
  ) {
    return _DivideRow_16_Any_AVX2(
      src_ptr,
      dst_ptr,
      scale,
      width,
    );
  }

  late final _DivideRow_16_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('DivideRow_16_Any_AVX2');
  late final _DivideRow_16_Any_AVX2 = _DivideRow_16_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void DivideRow_16_NEON(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _DivideRow_16_NEON(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _DivideRow_16_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('DivideRow_16_NEON');
  late final _DivideRow_16_NEON = _DivideRow_16_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void DivideRow_16_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int scale,
    int width,
  ) {
    return _DivideRow_16_Any_NEON(
      src_ptr,
      dst_ptr,
      scale,
      width,
    );
  }

  late final _DivideRow_16_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('DivideRow_16_Any_NEON');
  late final _DivideRow_16_Any_NEON = _DivideRow_16_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void Convert8To16Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _Convert8To16Row_C(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _Convert8To16Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('Convert8To16Row_C');
  late final _Convert8To16Row_C = _Convert8To16Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void Convert8To16Row_SSE2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _Convert8To16Row_SSE2(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _Convert8To16Row_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('Convert8To16Row_SSE2');
  late final _Convert8To16Row_SSE2 = _Convert8To16Row_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void Convert8To16Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int scale,
    int width,
  ) {
    return _Convert8To16Row_AVX2(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _Convert8To16Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('Convert8To16Row_AVX2');
  late final _Convert8To16Row_AVX2 = _Convert8To16Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void Convert8To16Row_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int scale,
    int width,
  ) {
    return _Convert8To16Row_Any_SSE2(
      src_ptr,
      dst_ptr,
      scale,
      width,
    );
  }

  late final _Convert8To16Row_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('Convert8To16Row_Any_SSE2');
  late final _Convert8To16Row_Any_SSE2 =
      _Convert8To16Row_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void Convert8To16Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int scale,
    int width,
  ) {
    return _Convert8To16Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      scale,
      width,
    );
  }

  late final _Convert8To16Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int)>>('Convert8To16Row_Any_AVX2');
  late final _Convert8To16Row_Any_AVX2 =
      _Convert8To16Row_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void Convert16To8Row_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int scale,
    int width,
  ) {
    return _Convert16To8Row_C(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _Convert16To8Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int)>>('Convert16To8Row_C');
  late final _Convert16To8Row_C = _Convert16To8Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void Convert16To8Row_SSSE3(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int scale,
    int width,
  ) {
    return _Convert16To8Row_SSSE3(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _Convert16To8Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int)>>('Convert16To8Row_SSSE3');
  late final _Convert16To8Row_SSSE3 = _Convert16To8Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void Convert16To8Row_AVX2(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int scale,
    int width,
  ) {
    return _Convert16To8Row_AVX2(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _Convert16To8Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int)>>('Convert16To8Row_AVX2');
  late final _Convert16To8Row_AVX2 = _Convert16To8Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void Convert16To8Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int scale,
    int width,
  ) {
    return _Convert16To8Row_Any_SSSE3(
      src_ptr,
      dst_ptr,
      scale,
      width,
    );
  }

  late final _Convert16To8Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int)>>('Convert16To8Row_Any_SSSE3');
  late final _Convert16To8Row_Any_SSSE3 =
      _Convert16To8Row_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void Convert16To8Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int scale,
    int width,
  ) {
    return _Convert16To8Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      scale,
      width,
    );
  }

  late final _Convert16To8Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int)>>('Convert16To8Row_Any_AVX2');
  late final _Convert16To8Row_Any_AVX2 =
      _Convert16To8Row_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void CopyRow_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _CopyRow_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _CopyRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_SSE2');
  late final _CopyRow_SSE2 = _CopyRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_AVX(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _CopyRow_AVX(
      src,
      dst,
      width,
    );
  }

  late final _CopyRow_AVXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_AVX');
  late final _CopyRow_AVX = _CopyRow_AVXPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_ERMS(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _CopyRow_ERMS(
      src,
      dst,
      width,
    );
  }

  late final _CopyRow_ERMSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_ERMS');
  late final _CopyRow_ERMS = _CopyRow_ERMSPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_NEON(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _CopyRow_NEON(
      src,
      dst,
      width,
    );
  }

  late final _CopyRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_NEON');
  late final _CopyRow_NEON = _CopyRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_MIPS(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int count,
  ) {
    return _CopyRow_MIPS(
      src,
      dst,
      count,
    );
  }

  late final _CopyRow_MIPSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_MIPS');
  late final _CopyRow_MIPS = _CopyRow_MIPSPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_C(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int count,
  ) {
    return _CopyRow_C(
      src,
      dst,
      count,
    );
  }

  late final _CopyRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_C');
  late final _CopyRow_C = _CopyRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _CopyRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _CopyRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_Any_SSE2');
  late final _CopyRow_Any_SSE2 = _CopyRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_Any_AVX(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _CopyRow_Any_AVX(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _CopyRow_Any_AVXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_Any_AVX');
  late final _CopyRow_Any_AVX = _CopyRow_Any_AVXPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _CopyRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _CopyRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CopyRow_Any_NEON');
  late final _CopyRow_Any_NEON = _CopyRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void CopyRow_16_C(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    int count,
  ) {
    return _CopyRow_16_C(
      src,
      dst,
      count,
    );
  }

  late final _CopyRow_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('CopyRow_16_C');
  late final _CopyRow_16_C = _CopyRow_16_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ARGBCopyAlphaRow_C(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBCopyAlphaRow_C(
      src,
      dst,
      width,
    );
  }

  late final _ARGBCopyAlphaRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyAlphaRow_C');
  late final _ARGBCopyAlphaRow_C = _ARGBCopyAlphaRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyAlphaRow_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBCopyAlphaRow_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBCopyAlphaRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyAlphaRow_SSE2');
  late final _ARGBCopyAlphaRow_SSE2 = _ARGBCopyAlphaRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyAlphaRow_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBCopyAlphaRow_AVX2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBCopyAlphaRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyAlphaRow_AVX2');
  late final _ARGBCopyAlphaRow_AVX2 = _ARGBCopyAlphaRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyAlphaRow_MMI(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBCopyAlphaRow_MMI(
      src,
      dst,
      width,
    );
  }

  late final _ARGBCopyAlphaRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyAlphaRow_MMI');
  late final _ARGBCopyAlphaRow_MMI = _ARGBCopyAlphaRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyAlphaRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBCopyAlphaRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBCopyAlphaRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyAlphaRow_Any_SSE2');
  late final _ARGBCopyAlphaRow_Any_SSE2 =
      _ARGBCopyAlphaRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyAlphaRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBCopyAlphaRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBCopyAlphaRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyAlphaRow_Any_AVX2');
  late final _ARGBCopyAlphaRow_Any_AVX2 =
      _ARGBCopyAlphaRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyAlphaRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBCopyAlphaRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBCopyAlphaRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyAlphaRow_Any_MMI');
  late final _ARGBCopyAlphaRow_Any_MMI =
      _ARGBCopyAlphaRow_Any_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _ARGBExtractAlphaRow_C(
      src_argb,
      dst_a,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_C');
  late final _ARGBExtractAlphaRow_C = _ARGBExtractAlphaRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _ARGBExtractAlphaRow_SSE2(
      src_argb,
      dst_a,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_SSE2');
  late final _ARGBExtractAlphaRow_SSE2 =
      _ARGBExtractAlphaRow_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _ARGBExtractAlphaRow_AVX2(
      src_argb,
      dst_a,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_AVX2');
  late final _ARGBExtractAlphaRow_AVX2 =
      _ARGBExtractAlphaRow_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _ARGBExtractAlphaRow_NEON(
      src_argb,
      dst_a,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_NEON');
  late final _ARGBExtractAlphaRow_NEON =
      _ARGBExtractAlphaRow_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _ARGBExtractAlphaRow_MSA(
      src_argb,
      dst_a,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_MSA');
  late final _ARGBExtractAlphaRow_MSA = _ARGBExtractAlphaRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_a,
    int width,
  ) {
    return _ARGBExtractAlphaRow_MMI(
      src_argb,
      dst_a,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_MMI');
  late final _ARGBExtractAlphaRow_MMI = _ARGBExtractAlphaRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBExtractAlphaRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_Any_SSE2');
  late final _ARGBExtractAlphaRow_Any_SSE2 =
      _ARGBExtractAlphaRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBExtractAlphaRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_Any_AVX2');
  late final _ARGBExtractAlphaRow_Any_AVX2 =
      _ARGBExtractAlphaRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBExtractAlphaRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_Any_NEON');
  late final _ARGBExtractAlphaRow_Any_NEON =
      _ARGBExtractAlphaRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBExtractAlphaRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_Any_MSA');
  late final _ARGBExtractAlphaRow_Any_MSA =
      _ARGBExtractAlphaRow_Any_MSAPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBExtractAlphaRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBExtractAlphaRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBExtractAlphaRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBExtractAlphaRow_Any_MMI');
  late final _ARGBExtractAlphaRow_Any_MMI =
      _ARGBExtractAlphaRow_Any_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyYToAlphaRow_C(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBCopyYToAlphaRow_C(
      src,
      dst,
      width,
    );
  }

  late final _ARGBCopyYToAlphaRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyYToAlphaRow_C');
  late final _ARGBCopyYToAlphaRow_C = _ARGBCopyYToAlphaRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyYToAlphaRow_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBCopyYToAlphaRow_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBCopyYToAlphaRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyYToAlphaRow_SSE2');
  late final _ARGBCopyYToAlphaRow_SSE2 =
      _ARGBCopyYToAlphaRow_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyYToAlphaRow_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBCopyYToAlphaRow_AVX2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBCopyYToAlphaRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyYToAlphaRow_AVX2');
  late final _ARGBCopyYToAlphaRow_AVX2 =
      _ARGBCopyYToAlphaRow_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyYToAlphaRow_MMI(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBCopyYToAlphaRow_MMI(
      src,
      dst,
      width,
    );
  }

  late final _ARGBCopyYToAlphaRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyYToAlphaRow_MMI');
  late final _ARGBCopyYToAlphaRow_MMI = _ARGBCopyYToAlphaRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyYToAlphaRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBCopyYToAlphaRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBCopyYToAlphaRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyYToAlphaRow_Any_SSE2');
  late final _ARGBCopyYToAlphaRow_Any_SSE2 =
      _ARGBCopyYToAlphaRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyYToAlphaRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBCopyYToAlphaRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBCopyYToAlphaRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyYToAlphaRow_Any_AVX2');
  late final _ARGBCopyYToAlphaRow_Any_AVX2 =
      _ARGBCopyYToAlphaRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBCopyYToAlphaRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBCopyYToAlphaRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBCopyYToAlphaRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBCopyYToAlphaRow_Any_MMI');
  late final _ARGBCopyYToAlphaRow_Any_MMI =
      _ARGBCopyYToAlphaRow_Any_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SetRow_C(
    ffi.Pointer<ffi.Uint8> dst,
    int v8,
    int width,
  ) {
    return _SetRow_C(
      dst,
      v8,
      width,
    );
  }

  late final _SetRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint8, ffi.Int)>>('SetRow_C');
  late final _SetRow_C = _SetRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void SetRow_MSA(
    ffi.Pointer<ffi.Uint8> dst,
    int v8,
    int width,
  ) {
    return _SetRow_MSA(
      dst,
      v8,
      width,
    );
  }

  late final _SetRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint8, ffi.Int)>>('SetRow_MSA');
  late final _SetRow_MSA = _SetRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void SetRow_X86(
    ffi.Pointer<ffi.Uint8> dst,
    int v8,
    int width,
  ) {
    return _SetRow_X86(
      dst,
      v8,
      width,
    );
  }

  late final _SetRow_X86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint8, ffi.Int)>>('SetRow_X86');
  late final _SetRow_X86 = _SetRow_X86Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void SetRow_ERMS(
    ffi.Pointer<ffi.Uint8> dst,
    int v8,
    int width,
  ) {
    return _SetRow_ERMS(
      dst,
      v8,
      width,
    );
  }

  late final _SetRow_ERMSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint8, ffi.Int)>>('SetRow_ERMS');
  late final _SetRow_ERMS = _SetRow_ERMSPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void SetRow_NEON(
    ffi.Pointer<ffi.Uint8> dst,
    int v8,
    int width,
  ) {
    return _SetRow_NEON(
      dst,
      v8,
      width,
    );
  }

  late final _SetRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint8, ffi.Int)>>('SetRow_NEON');
  late final _SetRow_NEON = _SetRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void SetRow_Any_X86(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int v32,
    int width,
  ) {
    return _SetRow_Any_X86(
      dst_ptr,
      v32,
      width,
    );
  }

  late final _SetRow_Any_X86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint8, ffi.Int)>>('SetRow_Any_X86');
  late final _SetRow_Any_X86 = _SetRow_Any_X86Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void SetRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int v32,
    int width,
  ) {
    return _SetRow_Any_NEON(
      dst_ptr,
      v32,
      width,
    );
  }

  late final _SetRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint8, ffi.Int)>>('SetRow_Any_NEON');
  late final _SetRow_Any_NEON = _SetRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBSetRow_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int v32,
    int width,
  ) {
    return _ARGBSetRow_C(
      dst_argb,
      v32,
      width,
    );
  }

  late final _ARGBSetRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint32, ffi.Int)>>('ARGBSetRow_C');
  late final _ARGBSetRow_C = _ARGBSetRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBSetRow_X86(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int v32,
    int width,
  ) {
    return _ARGBSetRow_X86(
      dst_argb,
      v32,
      width,
    );
  }

  late final _ARGBSetRow_X86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint32, ffi.Int)>>('ARGBSetRow_X86');
  late final _ARGBSetRow_X86 = _ARGBSetRow_X86Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBSetRow_NEON(
    ffi.Pointer<ffi.Uint8> dst,
    int v32,
    int width,
  ) {
    return _ARGBSetRow_NEON(
      dst,
      v32,
      width,
    );
  }

  late final _ARGBSetRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint32, ffi.Int)>>('ARGBSetRow_NEON');
  late final _ARGBSetRow_NEON = _ARGBSetRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBSetRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int v32,
    int width,
  ) {
    return _ARGBSetRow_Any_NEON(
      dst_ptr,
      v32,
      width,
    );
  }

  late final _ARGBSetRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32,
              ffi.Int)>>('ARGBSetRow_Any_NEON');
  late final _ARGBSetRow_Any_NEON = _ARGBSetRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBSetRow_MSA(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int v32,
    int width,
  ) {
    return _ARGBSetRow_MSA(
      dst_argb,
      v32,
      width,
    );
  }

  late final _ARGBSetRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint32, ffi.Int)>>('ARGBSetRow_MSA');
  late final _ARGBSetRow_MSA = _ARGBSetRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBSetRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int v32,
    int width,
  ) {
    return _ARGBSetRow_Any_MSA(
      dst_ptr,
      v32,
      width,
    );
  }

  late final _ARGBSetRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32,
              ffi.Int)>>('ARGBSetRow_Any_MSA');
  late final _ARGBSetRow_Any_MSA = _ARGBSetRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBSetRow_MMI(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int v32,
    int width,
  ) {
    return _ARGBSetRow_MMI(
      dst_argb,
      v32,
      width,
    );
  }

  late final _ARGBSetRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint32, ffi.Int)>>('ARGBSetRow_MMI');
  late final _ARGBSetRow_MMI = _ARGBSetRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBSetRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int v32,
    int width,
  ) {
    return _ARGBSetRow_Any_MMI(
      dst_ptr,
      v32,
      width,
    );
  }

  late final _ARGBSetRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32,
              ffi.Int)>>('ARGBSetRow_Any_MMI');
  late final _ARGBSetRow_Any_MMI = _ARGBSetRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  /// ARGBShufflers for BGRAToARGB etc.
  void ARGBShuffleRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
  ) {
    return _ARGBShuffleRow_C(
      src_argb,
      dst_argb,
      shuffler,
      width,
    );
  }

  late final _ARGBShuffleRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_C');
  late final _ARGBShuffleRow_C = _ARGBShuffleRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
  ) {
    return _ARGBShuffleRow_SSSE3(
      src_argb,
      dst_argb,
      shuffler,
      width,
    );
  }

  late final _ARGBShuffleRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_SSSE3');
  late final _ARGBShuffleRow_SSSE3 = _ARGBShuffleRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
  ) {
    return _ARGBShuffleRow_AVX2(
      src_argb,
      dst_argb,
      shuffler,
      width,
    );
  }

  late final _ARGBShuffleRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_AVX2');
  late final _ARGBShuffleRow_AVX2 = _ARGBShuffleRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
  ) {
    return _ARGBShuffleRow_NEON(
      src_argb,
      dst_argb,
      shuffler,
      width,
    );
  }

  late final _ARGBShuffleRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_NEON');
  late final _ARGBShuffleRow_NEON = _ARGBShuffleRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
  ) {
    return _ARGBShuffleRow_MSA(
      src_argb,
      dst_argb,
      shuffler,
      width,
    );
  }

  late final _ARGBShuffleRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_MSA');
  late final _ARGBShuffleRow_MSA = _ARGBShuffleRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
  ) {
    return _ARGBShuffleRow_MMI(
      src_argb,
      dst_argb,
      shuffler,
      width,
    );
  }

  late final _ARGBShuffleRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_MMI');
  late final _ARGBShuffleRow_MMI = _ARGBShuffleRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> param,
    int width,
  ) {
    return _ARGBShuffleRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBShuffleRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_Any_SSSE3');
  late final _ARGBShuffleRow_Any_SSSE3 =
      _ARGBShuffleRow_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> param,
    int width,
  ) {
    return _ARGBShuffleRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBShuffleRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_Any_AVX2');
  late final _ARGBShuffleRow_Any_AVX2 = _ARGBShuffleRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> param,
    int width,
  ) {
    return _ARGBShuffleRow_Any_NEON(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBShuffleRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_Any_NEON');
  late final _ARGBShuffleRow_Any_NEON = _ARGBShuffleRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> param,
    int width,
  ) {
    return _ARGBShuffleRow_Any_MSA(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBShuffleRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_Any_MSA');
  late final _ARGBShuffleRow_Any_MSA = _ARGBShuffleRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBShuffleRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> param,
    int width,
  ) {
    return _ARGBShuffleRow_Any_MMI(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBShuffleRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBShuffleRow_Any_MMI');
  late final _ARGBShuffleRow_Any_MMI = _ARGBShuffleRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB24ToARGBRow_SSSE3(
      src_rgb24,
      dst_argb,
      width,
    );
  }

  late final _RGB24ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_SSSE3');
  late final _RGB24ToARGBRow_SSSE3 = _RGB24ToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RAWToARGBRow_SSSE3(
      src_raw,
      dst_argb,
      width,
    );
  }

  late final _RAWToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_SSSE3');
  late final _RAWToARGBRow_SSSE3 = _RAWToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGBARow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int width,
  ) {
    return _RAWToRGBARow_SSSE3(
      src_raw,
      dst_rgba,
      width,
    );
  }

  late final _RAWToRGBARow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGBARow_SSSE3');
  late final _RAWToRGBARow_SSSE3 = _RAWToRGBARow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _RAWToRGB24Row_SSSE3(
      src_raw,
      dst_rgb24,
      width,
    );
  }

  late final _RAWToRGB24Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_SSSE3');
  late final _RAWToRGB24Row_SSSE3 = _RAWToRGB24Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _RGB565ToARGBRow_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _RGB565ToARGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_SSE2');
  late final _RGB565ToARGBRow_SSE2 = _RGB565ToARGBRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGB1555ToARGBRow_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_SSE2');
  late final _ARGB1555ToARGBRow_SSE2 = _ARGB1555ToARGBRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGB4444ToARGBRow_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_SSE2');
  late final _ARGB4444ToARGBRow_SSE2 = _ARGB4444ToARGBRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB565ToARGBRow_AVX2(
      src_rgb565,
      dst_argb,
      width,
    );
  }

  late final _RGB565ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_AVX2');
  late final _RGB565ToARGBRow_AVX2 = _RGB565ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB1555ToARGBRow_AVX2(
      src_argb1555,
      dst_argb,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_AVX2');
  late final _ARGB1555ToARGBRow_AVX2 = _ARGB1555ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB4444ToARGBRow_AVX2(
      src_argb4444,
      dst_argb,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_AVX2');
  late final _ARGB4444ToARGBRow_AVX2 = _ARGB4444ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB24ToARGBRow_NEON(
      src_rgb24,
      dst_argb,
      width,
    );
  }

  late final _RGB24ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_NEON');
  late final _RGB24ToARGBRow_NEON = _RGB24ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB24ToARGBRow_MSA(
      src_rgb24,
      dst_argb,
      width,
    );
  }

  late final _RGB24ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_MSA');
  late final _RGB24ToARGBRow_MSA = _RGB24ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB24ToARGBRow_MMI(
      src_rgb24,
      dst_argb,
      width,
    );
  }

  late final _RGB24ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_MMI');
  late final _RGB24ToARGBRow_MMI = _RGB24ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RAWToARGBRow_NEON(
      src_raw,
      dst_argb,
      width,
    );
  }

  late final _RAWToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_NEON');
  late final _RAWToARGBRow_NEON = _RAWToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGBARow_NEON(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int width,
  ) {
    return _RAWToRGBARow_NEON(
      src_raw,
      dst_rgba,
      width,
    );
  }

  late final _RAWToRGBARow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGBARow_NEON');
  late final _RAWToRGBARow_NEON = _RAWToRGBARow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RAWToARGBRow_MSA(
      src_raw,
      dst_argb,
      width,
    );
  }

  late final _RAWToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_MSA');
  late final _RAWToARGBRow_MSA = _RAWToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RAWToARGBRow_MMI(
      src_raw,
      dst_argb,
      width,
    );
  }

  late final _RAWToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_MMI');
  late final _RAWToARGBRow_MMI = _RAWToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_NEON(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _RAWToRGB24Row_NEON(
      src_raw,
      dst_rgb24,
      width,
    );
  }

  late final _RAWToRGB24Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_NEON');
  late final _RAWToRGB24Row_NEON = _RAWToRGB24Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_MSA(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _RAWToRGB24Row_MSA(
      src_raw,
      dst_rgb24,
      width,
    );
  }

  late final _RAWToRGB24Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_MSA');
  late final _RAWToRGB24Row_MSA = _RAWToRGB24Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_MMI(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _RAWToRGB24Row_MMI(
      src_raw,
      dst_rgb24,
      width,
    );
  }

  late final _RAWToRGB24Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_MMI');
  late final _RAWToRGB24Row_MMI = _RAWToRGB24Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB565ToARGBRow_NEON(
      src_rgb565,
      dst_argb,
      width,
    );
  }

  late final _RGB565ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_NEON');
  late final _RGB565ToARGBRow_NEON = _RGB565ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB565ToARGBRow_MSA(
      src_rgb565,
      dst_argb,
      width,
    );
  }

  late final _RGB565ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_MSA');
  late final _RGB565ToARGBRow_MSA = _RGB565ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB565ToARGBRow_MMI(
      src_rgb565,
      dst_argb,
      width,
    );
  }

  late final _RGB565ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_MMI');
  late final _RGB565ToARGBRow_MMI = _RGB565ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB1555ToARGBRow_NEON(
      src_argb1555,
      dst_argb,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_NEON');
  late final _ARGB1555ToARGBRow_NEON = _ARGB1555ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB1555ToARGBRow_MSA(
      src_argb1555,
      dst_argb,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_MSA');
  late final _ARGB1555ToARGBRow_MSA = _ARGB1555ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB1555ToARGBRow_MMI(
      src_argb1555,
      dst_argb,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_MMI');
  late final _ARGB1555ToARGBRow_MMI = _ARGB1555ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB4444ToARGBRow_NEON(
      src_argb4444,
      dst_argb,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_NEON');
  late final _ARGB4444ToARGBRow_NEON = _ARGB4444ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB4444ToARGBRow_MSA(
      src_argb4444,
      dst_argb,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_MSA');
  late final _ARGB4444ToARGBRow_MSA = _ARGB4444ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB4444ToARGBRow_MMI(
      src_argb4444,
      dst_argb,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_MMI');
  late final _ARGB4444ToARGBRow_MMI = _ARGB4444ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB24ToARGBRow_C(
      src_rgb24,
      dst_argb,
      width,
    );
  }

  late final _RGB24ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_C');
  late final _RGB24ToARGBRow_C = _RGB24ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RAWToARGBRow_C(
      src_raw,
      dst_argb,
      width,
    );
  }

  late final _RAWToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_C');
  late final _RAWToARGBRow_C = _RAWToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGBARow_C(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int width,
  ) {
    return _RAWToRGBARow_C(
      src_raw,
      dst_rgba,
      width,
    );
  }

  late final _RAWToRGBARow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGBARow_C');
  late final _RAWToRGBARow_C = _RAWToRGBARow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_C(
    ffi.Pointer<ffi.Uint8> src_raw,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _RAWToRGB24Row_C(
      src_raw,
      dst_rgb24,
      width,
    );
  }

  late final _RAWToRGB24Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_C');
  late final _RAWToRGB24Row_C = _RAWToRGB24Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _RGB565ToARGBRow_C(
      src_rgb565,
      dst_argb,
      width,
    );
  }

  late final _RGB565ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_C');
  late final _RGB565ToARGBRow_C = _RGB565ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB1555ToARGBRow_C(
      src_argb1555,
      dst_argb,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_C');
  late final _ARGB1555ToARGBRow_C = _ARGB1555ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGB4444ToARGBRow_C(
      src_argb4444,
      dst_argb,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_C');
  late final _ARGB4444ToARGBRow_C = _ARGB4444ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void AR30ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_ar30,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AR30ToARGBRow_C(
      src_ar30,
      dst_argb,
      width,
    );
  }

  late final _AR30ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR30ToARGBRow_C');
  late final _AR30ToARGBRow_C = _AR30ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void AR30ToABGRRow_C(
    ffi.Pointer<ffi.Uint8> src_ar30,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int width,
  ) {
    return _AR30ToABGRRow_C(
      src_ar30,
      dst_abgr,
      width,
    );
  }

  late final _AR30ToABGRRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR30ToABGRRow_C');
  late final _AR30ToABGRRow_C = _AR30ToABGRRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR30Row_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int width,
  ) {
    return _ARGBToAR30Row_C(
      src_argb,
      dst_ar30,
      width,
    );
  }

  late final _ARGBToAR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToAR30Row_C');
  late final _ARGBToAR30Row_C = _ARGBToAR30Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void AR30ToAB30Row_C(
    ffi.Pointer<ffi.Uint8> src_ar30,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int width,
  ) {
    return _AR30ToAB30Row_C(
      src_ar30,
      dst_ab30,
      width,
    );
  }

  late final _AR30ToAB30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR30ToAB30Row_C');
  late final _AR30ToAB30Row_C = _AR30ToAB30Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToARGBRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_Any_SSSE3');
  late final _RGB24ToARGBRow_Any_SSSE3 =
      _RGB24ToARGBRow_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToARGBRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_Any_SSSE3');
  late final _RAWToARGBRow_Any_SSSE3 = _RAWToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGBARow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToRGBARow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToRGBARow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGBARow_Any_SSSE3');
  late final _RAWToRGBARow_Any_SSSE3 = _RAWToRGBARow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToRGB24Row_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToRGB24Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_Any_SSSE3');
  late final _RAWToRGB24Row_Any_SSSE3 = _RAWToRGB24Row_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB565ToARGBRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB565ToARGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_Any_SSE2');
  late final _RGB565ToARGBRow_Any_SSE2 =
      _RGB565ToARGBRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB1555ToARGBRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_Any_SSE2');
  late final _ARGB1555ToARGBRow_Any_SSE2 =
      _ARGB1555ToARGBRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB4444ToARGBRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_Any_SSE2');
  late final _ARGB4444ToARGBRow_Any_SSE2 =
      _ARGB4444ToARGBRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB565ToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB565ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_Any_AVX2');
  late final _RGB565ToARGBRow_Any_AVX2 =
      _RGB565ToARGBRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB1555ToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_Any_AVX2');
  late final _ARGB1555ToARGBRow_Any_AVX2 =
      _ARGB1555ToARGBRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB4444ToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_Any_AVX2');
  late final _ARGB4444ToARGBRow_Any_AVX2 =
      _ARGB4444ToARGBRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_Any_NEON');
  late final _RGB24ToARGBRow_Any_NEON = _RGB24ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_Any_MSA');
  late final _RGB24ToARGBRow_Any_MSA = _RGB24ToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB24ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB24ToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB24ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB24ToARGBRow_Any_MMI');
  late final _RGB24ToARGBRow_Any_MMI = _RGB24ToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_Any_NEON');
  late final _RAWToARGBRow_Any_NEON = _RAWToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGBARow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToRGBARow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToRGBARow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGBARow_Any_NEON');
  late final _RAWToRGBARow_Any_NEON = _RAWToRGBARow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_Any_MSA');
  late final _RAWToARGBRow_Any_MSA = _RAWToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToARGBRow_Any_MMI');
  late final _RAWToARGBRow_Any_MMI = _RAWToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToRGB24Row_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToRGB24Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_Any_NEON');
  late final _RAWToRGB24Row_Any_NEON = _RAWToRGB24Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToRGB24Row_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToRGB24Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_Any_MSA');
  late final _RAWToRGB24Row_Any_MSA = _RAWToRGB24Row_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RAWToRGB24Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RAWToRGB24Row_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RAWToRGB24Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RAWToRGB24Row_Any_MMI');
  late final _RAWToRGB24Row_Any_MMI = _RAWToRGB24Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB565ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB565ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_Any_NEON');
  late final _RGB565ToARGBRow_Any_NEON =
      _RGB565ToARGBRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB565ToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB565ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_Any_MSA');
  late final _RGB565ToARGBRow_Any_MSA = _RGB565ToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGB565ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _RGB565ToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _RGB565ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGB565ToARGBRow_Any_MMI');
  late final _RGB565ToARGBRow_Any_MMI = _RGB565ToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB1555ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_Any_NEON');
  late final _ARGB1555ToARGBRow_Any_NEON =
      _ARGB1555ToARGBRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB1555ToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_Any_MSA');
  late final _ARGB1555ToARGBRow_Any_MSA =
      _ARGB1555ToARGBRow_Any_MSAPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB1555ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB1555ToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB1555ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB1555ToARGBRow_Any_MMI');
  late final _ARGB1555ToARGBRow_Any_MMI =
      _ARGB1555ToARGBRow_Any_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB4444ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_Any_NEON');
  late final _ARGB4444ToARGBRow_Any_NEON =
      _ARGB4444ToARGBRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB4444ToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_Any_MSA');
  late final _ARGB4444ToARGBRow_Any_MSA =
      _ARGB4444ToARGBRow_Any_MSAPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGB4444ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGB4444ToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGB4444ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGB4444ToARGBRow_Any_MMI');
  late final _ARGB4444ToARGBRow_Any_MMI =
      _ARGB4444ToARGBRow_Any_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToRGB24Row_SSSE3(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToRGB24Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_SSSE3');
  late final _ARGBToRGB24Row_SSSE3 = _ARGBToRGB24Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToRAWRow_SSSE3(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToRAWRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_SSSE3');
  late final _ARGBToRAWRow_SSSE3 = _ARGBToRAWRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToRGB565Row_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToRGB565Row_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_SSE2');
  late final _ARGBToRGB565Row_SSE2 = _ARGBToRGB565Row_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToARGB1555Row_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToARGB1555Row_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_SSE2');
  late final _ARGBToARGB1555Row_SSE2 = _ARGBToARGB1555Row_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToARGB4444Row_SSE2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToARGB4444Row_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_SSE2');
  late final _ARGBToARGB4444Row_SSE2 = _ARGBToARGB4444Row_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToAR30Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ABGRToAR30Row_SSSE3(
      src,
      dst,
      width,
    );
  }

  late final _ABGRToAR30Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToAR30Row_SSSE3');
  late final _ABGRToAR30Row_SSSE3 = _ABGRToAR30Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR30Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToAR30Row_SSSE3(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToAR30Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToAR30Row_SSSE3');
  late final _ARGBToAR30Row_SSSE3 = _ARGBToAR30Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToRAWRow_AVX2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToRAWRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_AVX2');
  late final _ARGBToRAWRow_AVX2 = _ARGBToRAWRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToRGB24Row_AVX2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToRGB24Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_AVX2');
  late final _ARGBToRGB24Row_AVX2 = _ARGBToRGB24Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_AVX512VBMI(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToRGB24Row_AVX512VBMI(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToRGB24Row_AVX512VBMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_AVX512VBMI');
  late final _ARGBToRGB24Row_AVX512VBMI =
      _ARGBToRGB24Row_AVX512VBMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565DitherRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int dither4,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_C(
      src_argb,
      dst_rgb,
      dither4,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_C');
  late final _ARGBToRGB565DitherRow_C = _ARGBToRGB565DitherRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB565DitherRow_SSE2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int dither4,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_SSE2(
      src,
      dst,
      dither4,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_SSE2');
  late final _ARGBToRGB565DitherRow_SSE2 =
      _ARGBToRGB565DitherRow_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB565DitherRow_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int dither4,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_AVX2(
      src,
      dst,
      dither4,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_AVX2');
  late final _ARGBToRGB565DitherRow_AVX2 =
      _ARGBToRGB565DitherRow_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB565Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRGB565Row_AVX2(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRGB565Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_AVX2');
  late final _ARGBToRGB565Row_AVX2 = _ARGBToRGB565Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToARGB1555Row_AVX2(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToARGB1555Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_AVX2');
  late final _ARGBToARGB1555Row_AVX2 = _ARGBToARGB1555Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToARGB4444Row_AVX2(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToARGB4444Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_AVX2');
  late final _ARGBToARGB4444Row_AVX2 = _ARGBToARGB4444Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToAR30Row_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ABGRToAR30Row_AVX2(
      src,
      dst,
      width,
    );
  }

  late final _ABGRToAR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToAR30Row_AVX2');
  late final _ABGRToAR30Row_AVX2 = _ABGRToAR30Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR30Row_AVX2(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _ARGBToAR30Row_AVX2(
      src,
      dst,
      width,
    );
  }

  late final _ARGBToAR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToAR30Row_AVX2');
  late final _ARGBToAR30Row_AVX2 = _ARGBToAR30Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int width,
  ) {
    return _ARGBToRGB24Row_NEON(
      src_argb,
      dst_rgb24,
      width,
    );
  }

  late final _ARGBToRGB24Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_NEON');
  late final _ARGBToRGB24Row_NEON = _ARGBToRGB24Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_raw,
    int width,
  ) {
    return _ARGBToRAWRow_NEON(
      src_argb,
      dst_raw,
      width,
    );
  }

  late final _ARGBToRAWRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_NEON');
  late final _ARGBToRAWRow_NEON = _ARGBToRAWRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int width,
  ) {
    return _ARGBToRGB565Row_NEON(
      src_argb,
      dst_rgb565,
      width,
    );
  }

  late final _ARGBToRGB565Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_NEON');
  late final _ARGBToRGB565Row_NEON = _ARGBToRGB565Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    int width,
  ) {
    return _ARGBToARGB1555Row_NEON(
      src_argb,
      dst_argb1555,
      width,
    );
  }

  late final _ARGBToARGB1555Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_NEON');
  late final _ARGBToARGB1555Row_NEON = _ARGBToARGB1555Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    int width,
  ) {
    return _ARGBToARGB4444Row_NEON(
      src_argb,
      dst_argb4444,
      width,
    );
  }

  late final _ARGBToARGB4444Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_NEON');
  late final _ARGBToARGB4444Row_NEON = _ARGBToARGB4444Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565DitherRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int dither4,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_NEON(
      src_argb,
      dst_rgb,
      dither4,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_NEON');
  late final _ARGBToRGB565DitherRow_NEON =
      _ARGBToRGB565DitherRow_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB24Row_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRGB24Row_MSA(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRGB24Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_MSA');
  late final _ARGBToRGB24Row_MSA = _ARGBToRGB24Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRAWRow_MSA(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRAWRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_MSA');
  late final _ARGBToRAWRow_MSA = _ARGBToRAWRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRGB565Row_MSA(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRGB565Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_MSA');
  late final _ARGBToRGB565Row_MSA = _ARGBToRGB565Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToARGB1555Row_MSA(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToARGB1555Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_MSA');
  late final _ARGBToARGB1555Row_MSA = _ARGBToARGB1555Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToARGB4444Row_MSA(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToARGB4444Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_MSA');
  late final _ARGBToARGB4444Row_MSA = _ARGBToARGB4444Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565DitherRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int dither4,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_MSA(
      src_argb,
      dst_rgb,
      dither4,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_MSA');
  late final _ARGBToRGB565DitherRow_MSA =
      _ARGBToRGB565DitherRow_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB24Row_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRGB24Row_MMI(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRGB24Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_MMI');
  late final _ARGBToRGB24Row_MMI = _ARGBToRGB24Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRAWRow_MMI(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRAWRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_MMI');
  late final _ARGBToRAWRow_MMI = _ARGBToRAWRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRGB565Row_MMI(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRGB565Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_MMI');
  late final _ARGBToRGB565Row_MMI = _ARGBToRGB565Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToARGB1555Row_MMI(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToARGB1555Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_MMI');
  late final _ARGBToARGB1555Row_MMI = _ARGBToARGB1555Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToARGB4444Row_MMI(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToARGB4444Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_MMI');
  late final _ARGBToARGB4444Row_MMI = _ARGBToARGB4444Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565DitherRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int dither4,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_MMI(
      src_argb,
      dst_rgb,
      dither4,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_MMI');
  late final _ARGBToRGB565DitherRow_MMI =
      _ARGBToRGB565DitherRow_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGBARow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRGBARow_C(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRGBARow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGBARow_C');
  late final _ARGBToRGBARow_C = _ARGBToRGBARow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRGB24Row_C(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRGB24Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_C');
  late final _ARGBToRGB24Row_C = _ARGBToRGB24Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRAWRow_C(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRAWRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_C');
  late final _ARGBToRAWRow_C = _ARGBToRAWRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToRGB565Row_C(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToRGB565Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_C');
  late final _ARGBToRGB565Row_C = _ARGBToRGB565Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToARGB1555Row_C(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToARGB1555Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_C');
  late final _ARGBToARGB1555Row_C = _ARGBToARGB1555Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int width,
  ) {
    return _ARGBToARGB4444Row_C(
      src_argb,
      dst_rgb,
      width,
    );
  }

  late final _ARGBToARGB4444Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_C');
  late final _ARGBToARGB4444Row_C = _ARGBToARGB4444Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToAR30Row_C(
    ffi.Pointer<ffi.Uint8> src_abgr,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int width,
  ) {
    return _ABGRToAR30Row_C(
      src_abgr,
      dst_ar30,
      width,
    );
  }

  late final _ABGRToAR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToAR30Row_C');
  late final _ABGRToAR30Row_C = _ABGRToAR30Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR64Row_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int width,
  ) {
    return _ARGBToAR64Row_C(
      src_argb,
      dst_ar64,
      width,
    );
  }

  late final _ARGBToAR64Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAR64Row_C');
  late final _ARGBToAR64Row_C = _ARGBToAR64Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ARGBToAB64Row_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint16> dst_ab64,
    int width,
  ) {
    return _ARGBToAB64Row_C(
      src_argb,
      dst_ab64,
      width,
    );
  }

  late final _ARGBToAB64Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAB64Row_C');
  late final _ARGBToAB64Row_C = _ARGBToAB64Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void AR64ToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_ar64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AR64ToARGBRow_C(
      src_ar64,
      dst_argb,
      width,
    );
  }

  late final _AR64ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR64ToARGBRow_C');
  late final _AR64ToARGBRow_C = _AR64ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void AB64ToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_ab64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AB64ToARGBRow_C(
      src_ab64,
      dst_argb,
      width,
    );
  }

  late final _AB64ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AB64ToARGBRow_C');
  late final _AB64ToARGBRow_C = _AB64ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void AR64ShuffleRow_C(
    ffi.Pointer<ffi.Uint8> src_ar64,
    ffi.Pointer<ffi.Uint8> dst_ar64,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
  ) {
    return _AR64ShuffleRow_C(
      src_ar64,
      dst_ar64,
      shuffler,
      width,
    );
  }

  late final _AR64ShuffleRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('AR64ShuffleRow_C');
  late final _AR64ShuffleRow_C = _AR64ShuffleRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR64Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int width,
  ) {
    return _ARGBToAR64Row_SSSE3(
      src_argb,
      dst_ar64,
      width,
    );
  }

  late final _ARGBToAR64Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAR64Row_SSSE3');
  late final _ARGBToAR64Row_SSSE3 = _ARGBToAR64Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ARGBToAB64Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint16> dst_ab64,
    int width,
  ) {
    return _ARGBToAB64Row_SSSE3(
      src_argb,
      dst_ab64,
      width,
    );
  }

  late final _ARGBToAB64Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAB64Row_SSSE3');
  late final _ARGBToAB64Row_SSSE3 = _ARGBToAB64Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void AR64ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ar64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AR64ToARGBRow_SSSE3(
      src_ar64,
      dst_argb,
      width,
    );
  }

  late final _AR64ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR64ToARGBRow_SSSE3');
  late final _AR64ToARGBRow_SSSE3 = _AR64ToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void AB64ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ab64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AB64ToARGBRow_SSSE3(
      src_ab64,
      dst_argb,
      width,
    );
  }

  late final _AB64ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AB64ToARGBRow_SSSE3');
  late final _AB64ToARGBRow_SSSE3 = _AB64ToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR64Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int width,
  ) {
    return _ARGBToAR64Row_AVX2(
      src_argb,
      dst_ar64,
      width,
    );
  }

  late final _ARGBToAR64Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAR64Row_AVX2');
  late final _ARGBToAR64Row_AVX2 = _ARGBToAR64Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ARGBToAB64Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint16> dst_ab64,
    int width,
  ) {
    return _ARGBToAB64Row_AVX2(
      src_argb,
      dst_ab64,
      width,
    );
  }

  late final _ARGBToAB64Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAB64Row_AVX2');
  late final _ARGBToAB64Row_AVX2 = _ARGBToAB64Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void AR64ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> src_ar64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AR64ToARGBRow_AVX2(
      src_ar64,
      dst_argb,
      width,
    );
  }

  late final _AR64ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR64ToARGBRow_AVX2');
  late final _AR64ToARGBRow_AVX2 = _AR64ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void AB64ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> src_ab64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AB64ToARGBRow_AVX2(
      src_ab64,
      dst_argb,
      width,
    );
  }

  late final _AB64ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AB64ToARGBRow_AVX2');
  late final _AB64ToARGBRow_AVX2 = _AB64ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR64Row_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int width,
  ) {
    return _ARGBToAR64Row_NEON(
      src_argb,
      dst_ar64,
      width,
    );
  }

  late final _ARGBToAR64Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAR64Row_NEON');
  late final _ARGBToAR64Row_NEON = _ARGBToAR64Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ARGBToAB64Row_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint16> dst_ab64,
    int width,
  ) {
    return _ARGBToAB64Row_NEON(
      src_argb,
      dst_ab64,
      width,
    );
  }

  late final _ARGBToAB64Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAB64Row_NEON');
  late final _ARGBToAB64Row_NEON = _ARGBToAB64Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void AR64ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint16> src_ar64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AR64ToARGBRow_NEON(
      src_ar64,
      dst_argb,
      width,
    );
  }

  late final _AR64ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR64ToARGBRow_NEON');
  late final _AR64ToARGBRow_NEON = _AR64ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void AB64ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint16> src_ab64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _AB64ToARGBRow_NEON(
      src_ab64,
      dst_argb,
      width,
    );
  }

  late final _AB64ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AB64ToARGBRow_NEON');
  late final _AB64ToARGBRow_NEON = _AB64ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR64Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int width,
  ) {
    return _ARGBToAR64Row_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToAR64Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAR64Row_Any_SSSE3');
  late final _ARGBToAR64Row_Any_SSSE3 = _ARGBToAR64Row_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ARGBToAB64Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int width,
  ) {
    return _ARGBToAB64Row_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToAB64Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAB64Row_Any_SSSE3');
  late final _ARGBToAB64Row_Any_SSSE3 = _ARGBToAB64Row_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void AR64ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _AR64ToARGBRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _AR64ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR64ToARGBRow_Any_SSSE3');
  late final _AR64ToARGBRow_Any_SSSE3 = _AR64ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void AB64ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _AB64ToARGBRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _AB64ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AB64ToARGBRow_Any_SSSE3');
  late final _AB64ToARGBRow_Any_SSSE3 = _AB64ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR64Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int width,
  ) {
    return _ARGBToAR64Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToAR64Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAR64Row_Any_AVX2');
  late final _ARGBToAR64Row_Any_AVX2 = _ARGBToAR64Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ARGBToAB64Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int width,
  ) {
    return _ARGBToAB64Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToAB64Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAB64Row_Any_AVX2');
  late final _ARGBToAB64Row_Any_AVX2 = _ARGBToAB64Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void AR64ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _AR64ToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _AR64ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR64ToARGBRow_Any_AVX2');
  late final _AR64ToARGBRow_Any_AVX2 = _AR64ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void AB64ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _AB64ToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _AB64ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AB64ToARGBRow_Any_AVX2');
  late final _AB64ToARGBRow_Any_AVX2 = _AB64ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR64Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int width,
  ) {
    return _ARGBToAR64Row_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToAR64Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAR64Row_Any_NEON');
  late final _ARGBToAR64Row_Any_NEON = _ARGBToAR64Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ARGBToAB64Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int width,
  ) {
    return _ARGBToAB64Row_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToAB64Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ARGBToAB64Row_Any_NEON');
  late final _ARGBToAB64Row_Any_NEON = _ARGBToAB64Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void AR64ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _AR64ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _AR64ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AR64ToARGBRow_Any_NEON');
  late final _AR64ToARGBRow_Any_NEON = _AR64ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void AB64ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _AB64ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _AB64ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AB64ToARGBRow_Any_NEON');
  late final _AB64ToARGBRow_Any_NEON = _AB64ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _J400ToARGBRow_SSE2(
      src_y,
      dst_argb,
      width,
    );
  }

  late final _J400ToARGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_SSE2');
  late final _J400ToARGBRow_SSE2 = _J400ToARGBRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _J400ToARGBRow_AVX2(
      src_y,
      dst_argb,
      width,
    );
  }

  late final _J400ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_AVX2');
  late final _J400ToARGBRow_AVX2 = _J400ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _J400ToARGBRow_NEON(
      src_y,
      dst_argb,
      width,
    );
  }

  late final _J400ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_NEON');
  late final _J400ToARGBRow_NEON = _J400ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _J400ToARGBRow_MSA(
      src_y,
      dst_argb,
      width,
    );
  }

  late final _J400ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_MSA');
  late final _J400ToARGBRow_MSA = _J400ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _J400ToARGBRow_MMI(
      src_y,
      dst_argb,
      width,
    );
  }

  late final _J400ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_MMI');
  late final _J400ToARGBRow_MMI = _J400ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _J400ToARGBRow_C(
      src_y,
      dst_argb,
      width,
    );
  }

  late final _J400ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_C');
  late final _J400ToARGBRow_C = _J400ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _J400ToARGBRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _J400ToARGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_Any_SSE2');
  late final _J400ToARGBRow_Any_SSE2 = _J400ToARGBRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _J400ToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _J400ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_Any_AVX2');
  late final _J400ToARGBRow_Any_AVX2 = _J400ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _J400ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _J400ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_Any_NEON');
  late final _J400ToARGBRow_Any_NEON = _J400ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _J400ToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _J400ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_Any_MSA');
  late final _J400ToARGBRow_Any_MSA = _J400ToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void J400ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _J400ToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _J400ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('J400ToARGBRow_Any_MMI');
  late final _J400ToARGBRow_Any_MMI = _J400ToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I444ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_C');
  late final _I444ToARGBRow_C = _I444ToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_C');
  late final _I422ToARGBRow_C = _I422ToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToAR30Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToAR30Row_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I422ToAR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToAR30Row_C');
  late final _I422ToAR30Row_C = _I422ToAR30Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToAR30Row_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToAR30Row_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I210ToAR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToAR30Row_C');
  late final _I210ToAR30Row_C = _I210ToAR30Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToARGBRow_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I210ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToARGBRow_C');
  late final _I210ToARGBRow_C = _I210ToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToAR30Row_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToAR30Row_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I212ToAR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToAR30Row_C');
  late final _I212ToAR30Row_C = _I212ToAR30Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToARGBRow_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I212ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToARGBRow_C');
  late final _I212ToARGBRow_C = _I212ToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToAR30Row_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToAR30Row_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I410ToAR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToAR30Row_C');
  late final _I410ToAR30Row_C = _I410ToAR30Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToARGBRow_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I410ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToARGBRow_C');
  late final _I410ToARGBRow_C = _I410ToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210AlphaToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint16> src_a,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210AlphaToARGBRow_C(
      src_y,
      src_u,
      src_v,
      src_a,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I210AlphaToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210AlphaToARGBRow_C');
  late final _I210AlphaToARGBRow_C = _I210AlphaToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410AlphaToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint16> src_a,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410AlphaToARGBRow_C(
      src_y,
      src_u,
      src_v,
      src_a,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I410AlphaToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410AlphaToARGBRow_C');
  late final _I410AlphaToARGBRow_C = _I410AlphaToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444AlphaToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444AlphaToARGBRow_C(
      src_y,
      src_u,
      src_v,
      src_a,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I444AlphaToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444AlphaToARGBRow_C');
  late final _I444AlphaToARGBRow_C = _I444AlphaToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422AlphaToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_C(
      src_y,
      src_u,
      src_v,
      src_a,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_C');
  late final _I422AlphaToARGBRow_C = _I422AlphaToARGBRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void NV12ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_C(
      src_y,
      src_uv,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_C');
  late final _NV12ToARGBRow_C = _NV12ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB565Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_C(
      src_y,
      src_uv,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_C');
  late final _NV12ToRGB565Row_C = _NV12ToRGB565Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_C(
      src_y,
      src_vu,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_C');
  late final _NV21ToARGBRow_C = _NV21ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_C(
      src_y,
      src_uv,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_C');
  late final _NV12ToRGB24Row_C = _NV12ToRGB24Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_C(
      src_y,
      src_vu,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_C');
  late final _NV21ToRGB24Row_C = _NV21ToRGB24Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToYUV24Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_yuv24,
    int width,
  ) {
    return _NV21ToYUV24Row_C(
      src_y,
      src_vu,
      dst_yuv24,
      width,
    );
  }

  late final _NV21ToYUV24Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('NV21ToYUV24Row_C');
  late final _NV21ToYUV24Row_C = _NV21ToYUV24Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_C(
      src_yuy2,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_C');
  late final _YUY2ToARGBRow_C = _YUY2ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_C(
      src_uyvy,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_C');
  late final _UYVYToARGBRow_C = _UYVYToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void P210ToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToARGBRow_C(
      src_y,
      src_uv,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P210ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToARGBRow_C');
  late final _P210ToARGBRow_C = _P210ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToARGBRow_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToARGBRow_C(
      src_y,
      src_uv,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P410ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToARGBRow_C');
  late final _P410ToARGBRow_C = _P410ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToAR30Row_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToAR30Row_C(
      src_y,
      src_uv,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P210ToAR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToAR30Row_C');
  late final _P210ToAR30Row_C = _P210ToAR30Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToAR30Row_C(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToAR30Row_C(
      src_y,
      src_uv,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P410ToAR30Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToAR30Row_C');
  late final _P410ToAR30Row_C = _P410ToAR30Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void I422ToRGBARow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_C');
  late final _I422ToRGBARow_C = _I422ToRGBARow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB24Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_C(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_C');
  late final _I422ToRGB24Row_C = _I422ToRGB24Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_C(
      src_y,
      src_u,
      src_v,
      dst_argb4444,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_C');
  late final _I422ToARGB4444Row_C = _I422ToARGB4444Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB1555Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_C(
      src_y,
      src_u,
      src_v,
      dst_argb1555,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_C');
  late final _I422ToARGB1555Row_C = _I422ToARGB1555Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB565Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_C(
      src_y,
      src_u,
      src_v,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_C');
  late final _I422ToRGB565Row_C = _I422ToRGB565Row_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_AVX2');
  late final _I422ToARGBRow_AVX2 = _I422ToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGBARow_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_AVX2');
  late final _I422ToRGBARow_AVX2 = _I422ToRGBARow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_SSSE3');
  late final _I444ToARGBRow_SSSE3 = _I444ToARGBRow_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_AVX2');
  late final _I444ToARGBRow_AVX2 = _I444ToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_SSSE3');
  late final _I422ToARGBRow_SSSE3 = _I422ToARGBRow_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToAR30Row_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToAR30Row_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _I422ToAR30Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToAR30Row_SSSE3');
  late final _I422ToAR30Row_SSSE3 = _I422ToAR30Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToAR30Row_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToAR30Row_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _I210ToAR30Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToAR30Row_SSSE3');
  late final _I210ToAR30Row_SSSE3 = _I210ToAR30Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I210ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToARGBRow_SSSE3');
  late final _I210ToARGBRow_SSSE3 = _I210ToARGBRow_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToAR30Row_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToAR30Row_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _I212ToAR30Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToAR30Row_SSSE3');
  late final _I212ToAR30Row_SSSE3 = _I212ToAR30Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I212ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToARGBRow_SSSE3');
  late final _I212ToARGBRow_SSSE3 = _I212ToARGBRow_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToAR30Row_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToAR30Row_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _I410ToAR30Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToAR30Row_SSSE3');
  late final _I410ToAR30Row_SSSE3 = _I410ToAR30Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I410ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToARGBRow_SSSE3');
  late final _I410ToARGBRow_SSSE3 = _I410ToARGBRow_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210AlphaToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210AlphaToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I210AlphaToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210AlphaToARGBRow_SSSE3');
  late final _I210AlphaToARGBRow_SSSE3 =
      _I210AlphaToARGBRow_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I410AlphaToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410AlphaToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I410AlphaToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410AlphaToARGBRow_SSSE3');
  late final _I410AlphaToARGBRow_SSSE3 =
      _I410AlphaToARGBRow_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToAR30Row_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToAR30Row_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _I422ToAR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToAR30Row_AVX2');
  late final _I422ToAR30Row_AVX2 = _I422ToAR30Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I210ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToARGBRow_AVX2');
  late final _I210ToARGBRow_AVX2 = _I210ToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToAR30Row_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToAR30Row_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _I210ToAR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToAR30Row_AVX2');
  late final _I210ToAR30Row_AVX2 = _I210ToAR30Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I212ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToARGBRow_AVX2');
  late final _I212ToARGBRow_AVX2 = _I212ToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToAR30Row_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToAR30Row_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _I212ToAR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToAR30Row_AVX2');
  late final _I212ToAR30Row_AVX2 = _I212ToAR30Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToAR30Row_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToAR30Row_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _I410ToAR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToAR30Row_AVX2');
  late final _I410ToAR30Row_AVX2 = _I410ToAR30Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I410ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToARGBRow_AVX2');
  late final _I410ToARGBRow_AVX2 = _I410ToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210AlphaToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210AlphaToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I210AlphaToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210AlphaToARGBRow_AVX2');
  late final _I210AlphaToARGBRow_AVX2 = _I210AlphaToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410AlphaToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410AlphaToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I410AlphaToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410AlphaToARGBRow_AVX2');
  late final _I410AlphaToARGBRow_AVX2 = _I410AlphaToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444AlphaToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444AlphaToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I444AlphaToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444AlphaToARGBRow_SSSE3');
  late final _I444AlphaToARGBRow_SSSE3 =
      _I444AlphaToARGBRow_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I444AlphaToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444AlphaToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I444AlphaToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444AlphaToARGBRow_AVX2');
  late final _I444AlphaToARGBRow_AVX2 = _I444AlphaToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422AlphaToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_SSSE3');
  late final _I422AlphaToARGBRow_SSSE3 =
      _I422AlphaToARGBRow_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422AlphaToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_AVX2');
  late final _I422AlphaToARGBRow_AVX2 = _I422AlphaToARGBRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void NV12ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_SSSE3(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_SSSE3');
  late final _NV12ToARGBRow_SSSE3 = _NV12ToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_AVX2(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_AVX2');
  late final _NV12ToARGBRow_AVX2 = _NV12ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_SSSE3(
      src_y,
      src_uv,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_SSSE3');
  late final _NV12ToRGB24Row_SSSE3 = _NV12ToRGB24Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_SSSE3(
      src_y,
      src_vu,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_SSSE3');
  late final _NV21ToRGB24Row_SSSE3 = _NV21ToRGB24Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB565Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_SSSE3(
      src_y,
      src_uv,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_SSSE3');
  late final _NV12ToRGB565Row_SSSE3 = _NV12ToRGB565Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_AVX2(
      src_y,
      src_uv,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_AVX2');
  late final _NV12ToRGB24Row_AVX2 = _NV12ToRGB24Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_AVX2(
      src_y,
      src_vu,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_AVX2');
  late final _NV21ToRGB24Row_AVX2 = _NV21ToRGB24Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToYUV24Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_yuv24,
    int width,
  ) {
    return _NV21ToYUV24Row_AVX2(
      src_y,
      src_vu,
      dst_yuv24,
      width,
    );
  }

  late final _NV21ToYUV24Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('NV21ToYUV24Row_AVX2');
  late final _NV21ToYUV24Row_AVX2 = _NV21ToYUV24Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void NV12ToRGB565Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_AVX2(
      src_y,
      src_uv,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_AVX2');
  late final _NV12ToRGB565Row_AVX2 = _NV12ToRGB565Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> vu_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_SSSE3(
      y_buf,
      vu_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_SSSE3');
  late final _NV21ToARGBRow_SSSE3 = _NV21ToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> vu_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_AVX2(
      y_buf,
      vu_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_AVX2');
  late final _NV21ToARGBRow_AVX2 = _NV21ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> yuy2_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_SSSE3(
      yuy2_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_SSSE3');
  late final _YUY2ToARGBRow_SSSE3 = _YUY2ToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint8> uyvy_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_SSSE3(
      uyvy_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_SSSE3');
  late final _UYVYToARGBRow_SSSE3 = _UYVYToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> yuy2_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_AVX2(
      yuy2_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_AVX2');
  late final _YUY2ToARGBRow_AVX2 = _YUY2ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> uyvy_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_AVX2(
      uyvy_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_AVX2');
  late final _UYVYToARGBRow_AVX2 = _UYVYToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void P210ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToARGBRow_SSSE3(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P210ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToARGBRow_SSSE3');
  late final _P210ToARGBRow_SSSE3 = _P210ToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToARGBRow_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToARGBRow_SSSE3(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P410ToARGBRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToARGBRow_SSSE3');
  late final _P410ToARGBRow_SSSE3 = _P410ToARGBRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToAR30Row_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToAR30Row_SSSE3(
      y_buf,
      uv_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P210ToAR30Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToAR30Row_SSSE3');
  late final _P210ToAR30Row_SSSE3 = _P210ToAR30Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToAR30Row_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToAR30Row_SSSE3(
      y_buf,
      uv_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P410ToAR30Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToAR30Row_SSSE3');
  late final _P410ToAR30Row_SSSE3 = _P410ToAR30Row_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToARGBRow_AVX2(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P210ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToARGBRow_AVX2');
  late final _P210ToARGBRow_AVX2 = _P210ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToARGBRow_AVX2(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P410ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToARGBRow_AVX2');
  late final _P410ToARGBRow_AVX2 = _P410ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToAR30Row_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToAR30Row_AVX2(
      y_buf,
      uv_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P210ToAR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToAR30Row_AVX2');
  late final _P210ToAR30Row_AVX2 = _P210ToAR30Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToAR30Row_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToAR30Row_AVX2(
      y_buf,
      uv_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P410ToAR30Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToAR30Row_AVX2');
  late final _P410ToAR30Row_AVX2 = _P410ToAR30Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void I422ToRGBARow_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_rgba,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_SSSE3');
  late final _I422ToRGBARow_SSSE3 = _I422ToRGBARow_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_SSSE3(
      src_y,
      src_u,
      src_v,
      dst_argb4444,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_SSSE3');
  late final _I422ToARGB4444Row_SSSE3 = _I422ToARGB4444Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_AVX2(
      src_y,
      src_u,
      src_v,
      dst_argb4444,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_AVX2');
  late final _I422ToARGB4444Row_AVX2 = _I422ToARGB4444Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB1555Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_SSSE3(
      src_y,
      src_u,
      src_v,
      dst_argb1555,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_SSSE3');
  late final _I422ToARGB1555Row_SSSE3 = _I422ToARGB1555Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB1555Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_AVX2(
      src_y,
      src_u,
      src_v,
      dst_argb1555,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_AVX2');
  late final _I422ToARGB1555Row_AVX2 = _I422ToARGB1555Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB565Row_SSSE3(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_SSSE3(
      src_y,
      src_u,
      src_v,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_SSSE3');
  late final _I422ToRGB565Row_SSSE3 = _I422ToRGB565Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB565Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_AVX2(
      src_y,
      src_u,
      src_v,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_AVX2');
  late final _I422ToRGB565Row_AVX2 = _I422ToRGB565Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB24Row_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_SSSE3');
  late final _I422ToRGB24Row_SSSE3 = _I422ToRGB24Row_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB24Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_AVX2(
      src_y,
      src_u,
      src_v,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_AVX2');
  late final _I422ToRGB24Row_AVX2 = _I422ToRGB24Row_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_Any_AVX2');
  late final _I422ToARGBRow_Any_AVX2 = _I422ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGBARow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_Any_AVX2');
  late final _I422ToRGBARow_Any_AVX2 = _I422ToRGBARow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_Any_SSSE3');
  late final _I444ToARGBRow_Any_SSSE3 = _I444ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_Any_AVX2');
  late final _I444ToARGBRow_Any_AVX2 = _I444ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_Any_SSSE3');
  late final _I422ToARGBRow_Any_SSSE3 = _I422ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToAR30Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToAR30Row_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToAR30Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToAR30Row_Any_SSSE3');
  late final _I422ToAR30Row_Any_SSSE3 = _I422ToAR30Row_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToAR30Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToAR30Row_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I210ToAR30Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToAR30Row_Any_SSSE3');
  late final _I210ToAR30Row_Any_SSSE3 = _I210ToAR30Row_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I210ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToARGBRow_Any_SSSE3');
  late final _I210ToARGBRow_Any_SSSE3 = _I210ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToAR30Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToAR30Row_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I212ToAR30Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToAR30Row_Any_SSSE3');
  late final _I212ToAR30Row_Any_SSSE3 = _I212ToAR30Row_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I212ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToARGBRow_Any_SSSE3');
  late final _I212ToARGBRow_Any_SSSE3 = _I212ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToAR30Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToAR30Row_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I410ToAR30Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToAR30Row_Any_SSSE3');
  late final _I410ToAR30Row_Any_SSSE3 = _I410ToAR30Row_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I410ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToARGBRow_Any_SSSE3');
  late final _I410ToARGBRow_Any_SSSE3 = _I410ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210AlphaToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210AlphaToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I210AlphaToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210AlphaToARGBRow_Any_SSSE3');
  late final _I210AlphaToARGBRow_Any_SSSE3 =
      _I210AlphaToARGBRow_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I410AlphaToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410AlphaToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I410AlphaToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410AlphaToARGBRow_Any_SSSE3');
  late final _I410AlphaToARGBRow_Any_SSSE3 =
      _I410AlphaToARGBRow_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToAR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToAR30Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToAR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToAR30Row_Any_AVX2');
  late final _I422ToAR30Row_Any_AVX2 = _I422ToAR30Row_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I210ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToARGBRow_Any_AVX2');
  late final _I210ToARGBRow_Any_AVX2 = _I210ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210ToAR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToAR30Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I210ToAR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToAR30Row_Any_AVX2');
  late final _I210ToAR30Row_Any_AVX2 = _I210ToAR30Row_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I212ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToARGBRow_Any_AVX2');
  late final _I212ToARGBRow_Any_AVX2 = _I212ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I212ToAR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I212ToAR30Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I212ToAR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I212ToAR30Row_Any_AVX2');
  late final _I212ToAR30Row_Any_AVX2 = _I212ToAR30Row_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToAR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToAR30Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I410ToAR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToAR30Row_Any_AVX2');
  late final _I410ToAR30Row_Any_AVX2 = _I410ToAR30Row_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I410ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410ToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I410ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410ToARGBRow_Any_AVX2');
  late final _I410ToARGBRow_Any_AVX2 = _I410ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I210AlphaToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210AlphaToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I210AlphaToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210AlphaToARGBRow_Any_AVX2');
  late final _I210AlphaToARGBRow_Any_AVX2 =
      _I210AlphaToARGBRow_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I410AlphaToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint16> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I410AlphaToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I410AlphaToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I410AlphaToARGBRow_Any_AVX2');
  late final _I410AlphaToARGBRow_Any_AVX2 =
      _I410AlphaToARGBRow_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I444AlphaToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444AlphaToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I444AlphaToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444AlphaToARGBRow_Any_SSSE3');
  late final _I444AlphaToARGBRow_Any_SSSE3 =
      _I444AlphaToARGBRow_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I444AlphaToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444AlphaToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I444AlphaToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444AlphaToARGBRow_Any_AVX2');
  late final _I444AlphaToARGBRow_Any_AVX2 =
      _I444AlphaToARGBRow_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422AlphaToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_Any_SSSE3');
  late final _I422AlphaToARGBRow_Any_SSSE3 =
      _I422AlphaToARGBRow_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422AlphaToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_Any_AVX2');
  late final _I422AlphaToARGBRow_Any_AVX2 =
      _I422AlphaToARGBRow_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void NV12ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_Any_SSSE3');
  late final _NV12ToARGBRow_Any_SSSE3 = _NV12ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_Any_AVX2');
  late final _NV12ToARGBRow_Any_AVX2 = _NV12ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_Any_SSSE3');
  late final _NV21ToARGBRow_Any_SSSE3 = _NV21ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_Any_AVX2');
  late final _NV21ToARGBRow_Any_AVX2 = _NV21ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_Any_SSSE3');
  late final _NV12ToRGB24Row_Any_SSSE3 =
      _NV12ToRGB24Row_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_Any_SSSE3');
  late final _NV21ToRGB24Row_Any_SSSE3 =
      _NV21ToRGB24Row_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_Any_AVX2');
  late final _NV12ToRGB24Row_Any_AVX2 = _NV12ToRGB24Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_Any_AVX2');
  late final _NV21ToRGB24Row_Any_AVX2 = _NV21ToRGB24Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToYUV24Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_yuv24,
    int width,
  ) {
    return _NV21ToYUV24Row_Any_AVX2(
      src_y,
      src_vu,
      dst_yuv24,
      width,
    );
  }

  late final _NV21ToYUV24Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('NV21ToYUV24Row_Any_AVX2');
  late final _NV21ToYUV24Row_Any_AVX2 = _NV21ToYUV24Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void NV12ToRGB565Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_Any_SSSE3');
  late final _NV12ToRGB565Row_Any_SSSE3 =
      _NV12ToRGB565Row_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB565Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_Any_AVX2');
  late final _NV12ToRGB565Row_Any_AVX2 =
      _NV12ToRGB565Row_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_Any_SSSE3');
  late final _YUY2ToARGBRow_Any_SSSE3 = _YUY2ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_Any_SSSE3');
  late final _UYVYToARGBRow_Any_SSSE3 = _UYVYToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_Any_AVX2');
  late final _YUY2ToARGBRow_Any_AVX2 = _YUY2ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_Any_AVX2');
  late final _UYVYToARGBRow_Any_AVX2 = _UYVYToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void P210ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToARGBRow_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _P210ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToARGBRow_Any_SSSE3');
  late final _P210ToARGBRow_Any_SSSE3 = _P210ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToARGBRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToARGBRow_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _P410ToARGBRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToARGBRow_Any_SSSE3');
  late final _P410ToARGBRow_Any_SSSE3 = _P410ToARGBRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToAR30Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToAR30Row_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _P210ToAR30Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToAR30Row_Any_SSSE3');
  late final _P210ToAR30Row_Any_SSSE3 = _P210ToAR30Row_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToAR30Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToAR30Row_Any_SSSE3(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _P410ToAR30Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToAR30Row_Any_SSSE3');
  late final _P410ToAR30Row_Any_SSSE3 = _P410ToAR30Row_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToARGBRow_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _P210ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToARGBRow_Any_AVX2');
  late final _P210ToARGBRow_Any_AVX2 = _P210ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToARGBRow_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _P410ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToARGBRow_Any_AVX2');
  late final _P410ToARGBRow_Any_AVX2 = _P410ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToAR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToAR30Row_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _P210ToAR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToAR30Row_Any_AVX2');
  late final _P210ToAR30Row_Any_AVX2 = _P210ToAR30Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToAR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToAR30Row_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _P410ToAR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToAR30Row_Any_AVX2');
  late final _P410ToAR30Row_Any_AVX2 = _P410ToAR30Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void I422ToRGBARow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_Any_SSSE3');
  late final _I422ToRGBARow_Any_SSSE3 = _I422ToRGBARow_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_Any_SSSE3');
  late final _I422ToARGB4444Row_Any_SSSE3 =
      _I422ToARGB4444Row_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToARGB4444Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_Any_AVX2');
  late final _I422ToARGB4444Row_Any_AVX2 =
      _I422ToARGB4444Row_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToARGB1555Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_Any_SSSE3');
  late final _I422ToARGB1555Row_Any_SSSE3 =
      _I422ToARGB1555Row_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToARGB1555Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_Any_AVX2');
  late final _I422ToARGB1555Row_Any_AVX2 =
      _I422ToARGB1555Row_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToRGB565Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_Any_SSSE3');
  late final _I422ToRGB565Row_Any_SSSE3 =
      _I422ToRGB565Row_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToRGB565Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_Any_AVX2');
  late final _I422ToRGB565Row_Any_AVX2 =
      _I422ToRGB565Row_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToRGB24Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_Any_SSSE3');
  late final _I422ToRGB24Row_Any_SSSE3 =
      _I422ToRGB24Row_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToRGB24Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_Any_AVX2');
  late final _I422ToRGB24Row_Any_AVX2 = _I422ToRGB24Row_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I400ToARGBRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I400ToARGBRow_C(
      src_y,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I400ToARGBRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_C');
  late final _I400ToARGBRow_C = _I400ToARGBRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I400ToARGBRow_SSE2(
      y_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I400ToARGBRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_SSE2');
  late final _I400ToARGBRow_SSE2 = _I400ToARGBRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I400ToARGBRow_AVX2(
      y_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I400ToARGBRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_AVX2');
  late final _I400ToARGBRow_AVX2 = _I400ToARGBRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I400ToARGBRow_NEON(
      src_y,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I400ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_NEON');
  late final _I400ToARGBRow_NEON = _I400ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I400ToARGBRow_MSA(
      src_y,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I400ToARGBRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_MSA');
  late final _I400ToARGBRow_MSA = _I400ToARGBRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I400ToARGBRow_MMI(
      src_y,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I400ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_MMI');
  late final _I400ToARGBRow_MMI = _I400ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> param,
    int width,
  ) {
    return _I400ToARGBRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _I400ToARGBRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_Any_SSE2');
  late final _I400ToARGBRow_Any_SSE2 = _I400ToARGBRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> param,
    int width,
  ) {
    return _I400ToARGBRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _I400ToARGBRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_Any_AVX2');
  late final _I400ToARGBRow_Any_AVX2 = _I400ToARGBRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> param,
    int width,
  ) {
    return _I400ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _I400ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_Any_NEON');
  late final _I400ToARGBRow_Any_NEON = _I400ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I400ToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I400ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_Any_MSA');
  late final _I400ToARGBRow_Any_MSA = _I400ToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I400ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I400ToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I400ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('I400ToARGBRow_Any_MMI');
  late final _I400ToARGBRow_Any_MMI = _I400ToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  /// ARGB preattenuated alpha blend.
  void ARGBBlendRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBBlendRow_SSSE3(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBBlendRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBBlendRow_SSSE3');
  late final _ARGBBlendRow_SSSE3 = _ARGBBlendRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBBlendRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBBlendRow_NEON(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBBlendRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBBlendRow_NEON');
  late final _ARGBBlendRow_NEON = _ARGBBlendRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBBlendRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBBlendRow_MSA(
      src_argb0,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBBlendRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBBlendRow_MSA');
  late final _ARGBBlendRow_MSA = _ARGBBlendRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBBlendRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBBlendRow_MMI(
      src_argb0,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBBlendRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBBlendRow_MMI');
  late final _ARGBBlendRow_MMI = _ARGBBlendRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBBlendRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBBlendRow_C(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBBlendRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBBlendRow_C');
  late final _ARGBBlendRow_C = _ARGBBlendRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  /// Unattenuated planar alpha blend.
  void BlendPlaneRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src0,
    ffi.Pointer<ffi.Uint8> src1,
    ffi.Pointer<ffi.Uint8> alpha,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _BlendPlaneRow_SSSE3(
      src0,
      src1,
      alpha,
      dst,
      width,
    );
  }

  late final _BlendPlaneRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BlendPlaneRow_SSSE3');
  late final _BlendPlaneRow_SSSE3 = _BlendPlaneRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BlendPlaneRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _BlendPlaneRow_Any_SSSE3(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _BlendPlaneRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BlendPlaneRow_Any_SSSE3');
  late final _BlendPlaneRow_Any_SSSE3 = _BlendPlaneRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BlendPlaneRow_AVX2(
    ffi.Pointer<ffi.Uint8> src0,
    ffi.Pointer<ffi.Uint8> src1,
    ffi.Pointer<ffi.Uint8> alpha,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _BlendPlaneRow_AVX2(
      src0,
      src1,
      alpha,
      dst,
      width,
    );
  }

  late final _BlendPlaneRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BlendPlaneRow_AVX2');
  late final _BlendPlaneRow_AVX2 = _BlendPlaneRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BlendPlaneRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _BlendPlaneRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _BlendPlaneRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BlendPlaneRow_Any_AVX2');
  late final _BlendPlaneRow_Any_AVX2 = _BlendPlaneRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BlendPlaneRow_MMI(
    ffi.Pointer<ffi.Uint8> src0,
    ffi.Pointer<ffi.Uint8> src1,
    ffi.Pointer<ffi.Uint8> alpha,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _BlendPlaneRow_MMI(
      src0,
      src1,
      alpha,
      dst,
      width,
    );
  }

  late final _BlendPlaneRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BlendPlaneRow_MMI');
  late final _BlendPlaneRow_MMI = _BlendPlaneRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BlendPlaneRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _BlendPlaneRow_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _BlendPlaneRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BlendPlaneRow_Any_MMI');
  late final _BlendPlaneRow_Any_MMI = _BlendPlaneRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void BlendPlaneRow_C(
    ffi.Pointer<ffi.Uint8> src0,
    ffi.Pointer<ffi.Uint8> src1,
    ffi.Pointer<ffi.Uint8> alpha,
    ffi.Pointer<ffi.Uint8> dst,
    int width,
  ) {
    return _BlendPlaneRow_C(
      src0,
      src1,
      alpha,
      dst,
      width,
    );
  }

  late final _BlendPlaneRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('BlendPlaneRow_C');
  late final _BlendPlaneRow_C = _BlendPlaneRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  /// ARGB multiply images. Same API as Blend, but these require
  /// pointer and width alignment for SSE2.
  void ARGBMultiplyRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBMultiplyRow_C(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBMultiplyRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_C');
  late final _ARGBMultiplyRow_C = _ARGBMultiplyRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBMultiplyRow_SSE2(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBMultiplyRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_SSE2');
  late final _ARGBMultiplyRow_SSE2 = _ARGBMultiplyRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMultiplyRow_Any_SSE2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMultiplyRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_Any_SSE2');
  late final _ARGBMultiplyRow_Any_SSE2 =
      _ARGBMultiplyRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBMultiplyRow_AVX2(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBMultiplyRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_AVX2');
  late final _ARGBMultiplyRow_AVX2 = _ARGBMultiplyRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMultiplyRow_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMultiplyRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_Any_AVX2');
  late final _ARGBMultiplyRow_Any_AVX2 =
      _ARGBMultiplyRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBMultiplyRow_NEON(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBMultiplyRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_NEON');
  late final _ARGBMultiplyRow_NEON = _ARGBMultiplyRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMultiplyRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMultiplyRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_Any_NEON');
  late final _ARGBMultiplyRow_Any_NEON =
      _ARGBMultiplyRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBMultiplyRow_MSA(
      src_argb0,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBMultiplyRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_MSA');
  late final _ARGBMultiplyRow_MSA = _ARGBMultiplyRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMultiplyRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMultiplyRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_Any_MSA');
  late final _ARGBMultiplyRow_Any_MSA = _ARGBMultiplyRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBMultiplyRow_MMI(
      src_argb0,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBMultiplyRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_MMI');
  late final _ARGBMultiplyRow_MMI = _ARGBMultiplyRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBMultiplyRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBMultiplyRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBMultiplyRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBMultiplyRow_Any_MMI');
  late final _ARGBMultiplyRow_Any_MMI = _ARGBMultiplyRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  /// ARGB add images.
  void ARGBAddRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAddRow_C(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBAddRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_C');
  late final _ARGBAddRow_C = _ARGBAddRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAddRow_SSE2(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBAddRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_SSE2');
  late final _ARGBAddRow_SSE2 = _ARGBAddRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAddRow_Any_SSE2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAddRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_Any_SSE2');
  late final _ARGBAddRow_Any_SSE2 = _ARGBAddRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAddRow_AVX2(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBAddRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_AVX2');
  late final _ARGBAddRow_AVX2 = _ARGBAddRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAddRow_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAddRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_Any_AVX2');
  late final _ARGBAddRow_Any_AVX2 = _ARGBAddRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAddRow_NEON(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBAddRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_NEON');
  late final _ARGBAddRow_NEON = _ARGBAddRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAddRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAddRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_Any_NEON');
  late final _ARGBAddRow_Any_NEON = _ARGBAddRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAddRow_MSA(
      src_argb0,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBAddRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_MSA');
  late final _ARGBAddRow_MSA = _ARGBAddRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAddRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAddRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_Any_MSA');
  late final _ARGBAddRow_Any_MSA = _ARGBAddRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAddRow_MMI(
      src_argb0,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBAddRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_MMI');
  late final _ARGBAddRow_MMI = _ARGBAddRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAddRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAddRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAddRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBAddRow_Any_MMI');
  late final _ARGBAddRow_Any_MMI = _ARGBAddRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  /// ARGB subtract images. Same API as Blend, but these require
  /// pointer and width alignment for SSE2.
  void ARGBSubtractRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSubtractRow_C(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBSubtractRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_C');
  late final _ARGBSubtractRow_C = _ARGBSubtractRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSubtractRow_SSE2(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBSubtractRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_SSE2');
  late final _ARGBSubtractRow_SSE2 = _ARGBSubtractRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBSubtractRow_Any_SSE2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBSubtractRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_Any_SSE2');
  late final _ARGBSubtractRow_Any_SSE2 =
      _ARGBSubtractRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSubtractRow_AVX2(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBSubtractRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_AVX2');
  late final _ARGBSubtractRow_AVX2 = _ARGBSubtractRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBSubtractRow_Any_AVX2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBSubtractRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_Any_AVX2');
  late final _ARGBSubtractRow_Any_AVX2 =
      _ARGBSubtractRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSubtractRow_NEON(
      src_argb,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBSubtractRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_NEON');
  late final _ARGBSubtractRow_NEON = _ARGBSubtractRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBSubtractRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBSubtractRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_Any_NEON');
  late final _ARGBSubtractRow_Any_NEON =
      _ARGBSubtractRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSubtractRow_MSA(
      src_argb0,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBSubtractRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_MSA');
  late final _ARGBSubtractRow_MSA = _ARGBSubtractRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBSubtractRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBSubtractRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_Any_MSA');
  late final _ARGBSubtractRow_Any_MSA = _ARGBSubtractRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSubtractRow_MMI(
      src_argb0,
      src_argb1,
      dst_argb,
      width,
    );
  }

  late final _ARGBSubtractRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_MMI');
  late final _ARGBSubtractRow_MMI = _ARGBSubtractRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSubtractRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBSubtractRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _ARGBSubtractRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ARGBSubtractRow_Any_MMI');
  late final _ARGBSubtractRow_Any_MMI = _ARGBSubtractRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB24Row_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB24Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_Any_SSSE3');
  late final _ARGBToRGB24Row_Any_SSSE3 =
      _ARGBToRGB24Row_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRAWRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRAWRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_Any_SSSE3');
  late final _ARGBToRAWRow_Any_SSSE3 = _ARGBToRAWRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB565Row_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB565Row_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_Any_SSE2');
  late final _ARGBToRGB565Row_Any_SSE2 =
      _ARGBToRGB565Row_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB1555Row_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB1555Row_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_Any_SSE2');
  late final _ARGBToARGB1555Row_Any_SSE2 =
      _ARGBToARGB1555Row_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB4444Row_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB4444Row_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_Any_SSE2');
  late final _ARGBToARGB4444Row_Any_SSE2 =
      _ARGBToARGB4444Row_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToAR30Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ABGRToAR30Row_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ABGRToAR30Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToAR30Row_Any_SSSE3');
  late final _ABGRToAR30Row_Any_SSSE3 = _ABGRToAR30Row_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR30Row_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToAR30Row_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToAR30Row_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToAR30Row_Any_SSSE3');
  late final _ARGBToAR30Row_Any_SSSE3 = _ARGBToAR30Row_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRAWRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRAWRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_Any_AVX2');
  late final _ARGBToRAWRow_Any_AVX2 = _ARGBToRAWRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB24Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB24Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_Any_AVX2');
  late final _ARGBToRGB24Row_Any_AVX2 = _ARGBToRGB24Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_Any_AVX512VBMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB24Row_Any_AVX512VBMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB24Row_Any_AVX512VBMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_Any_AVX512VBMI');
  late final _ARGBToRGB24Row_Any_AVX512VBMI =
      _ARGBToRGB24Row_Any_AVX512VBMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565DitherRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int param,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_Any_SSE2');
  late final _ARGBToRGB565DitherRow_Any_SSE2 =
      _ARGBToRGB565DitherRow_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB565DitherRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int param,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_Any_AVX2');
  late final _ARGBToRGB565DitherRow_Any_AVX2 =
      _ARGBToRGB565DitherRow_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB565Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB565Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB565Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_Any_AVX2');
  late final _ARGBToRGB565Row_Any_AVX2 =
      _ARGBToRGB565Row_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB1555Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB1555Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_Any_AVX2');
  late final _ARGBToARGB1555Row_Any_AVX2 =
      _ARGBToARGB1555Row_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB4444Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB4444Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_Any_AVX2');
  late final _ARGBToARGB4444Row_Any_AVX2 =
      _ARGBToARGB4444Row_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ABGRToAR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ABGRToAR30Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ABGRToAR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ABGRToAR30Row_Any_AVX2');
  late final _ABGRToAR30Row_Any_AVX2 = _ABGRToAR30Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToAR30Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToAR30Row_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToAR30Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToAR30Row_Any_AVX2');
  late final _ARGBToAR30Row_Any_AVX2 = _ARGBToAR30Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB24Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB24Row_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB24Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_Any_NEON');
  late final _ARGBToRGB24Row_Any_NEON = _ARGBToRGB24Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRAWRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRAWRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_Any_NEON');
  late final _ARGBToRAWRow_Any_NEON = _ARGBToRAWRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB565Row_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB565Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_Any_NEON');
  late final _ARGBToRGB565Row_Any_NEON =
      _ARGBToRGB565Row_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB1555Row_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB1555Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_Any_NEON');
  late final _ARGBToARGB1555Row_Any_NEON =
      _ARGBToARGB1555Row_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB4444Row_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB4444Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_Any_NEON');
  late final _ARGBToARGB4444Row_Any_NEON =
      _ARGBToARGB4444Row_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565DitherRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int param,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_Any_NEON(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_Any_NEON');
  late final _ARGBToRGB565DitherRow_Any_NEON =
      _ARGBToRGB565DitherRow_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB24Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB24Row_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB24Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_Any_MSA');
  late final _ARGBToRGB24Row_Any_MSA = _ARGBToRGB24Row_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRAWRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRAWRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_Any_MSA');
  late final _ARGBToRAWRow_Any_MSA = _ARGBToRAWRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB565Row_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB565Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_Any_MSA');
  late final _ARGBToRGB565Row_Any_MSA = _ARGBToRGB565Row_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB1555Row_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB1555Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_Any_MSA');
  late final _ARGBToARGB1555Row_Any_MSA =
      _ARGBToARGB1555Row_Any_MSAPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB4444Row_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB4444Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_Any_MSA');
  late final _ARGBToARGB4444Row_Any_MSA =
      _ARGBToARGB4444Row_Any_MSAPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565DitherRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int param,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_Any_MSA(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_Any_MSA');
  late final _ARGBToRGB565DitherRow_Any_MSA =
      _ARGBToRGB565DitherRow_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBToRGB24Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB24Row_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB24Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB24Row_Any_MMI');
  late final _ARGBToRGB24Row_Any_MMI = _ARGBToRGB24Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRAWRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRAWRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRAWRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRAWRow_Any_MMI');
  late final _ARGBToRAWRow_Any_MMI = _ARGBToRAWRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToRGB565Row_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToRGB565Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToRGB565Row_Any_MMI');
  late final _ARGBToRGB565Row_Any_MMI = _ARGBToRGB565Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB1555Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB1555Row_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB1555Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB1555Row_Any_MMI');
  late final _ARGBToARGB1555Row_Any_MMI =
      _ARGBToARGB1555Row_Any_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToARGB4444Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBToARGB4444Row_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBToARGB4444Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBToARGB4444Row_Any_MMI');
  late final _ARGBToARGB4444Row_Any_MMI =
      _ARGBToARGB4444Row_Any_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBToRGB565DitherRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int param,
    int width,
  ) {
    return _ARGBToRGB565DitherRow_Any_MMI(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ARGBToRGB565DitherRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Int)>>('ARGBToRGB565DitherRow_Any_MMI');
  late final _ARGBToRGB565DitherRow_Any_MMI =
      _ARGBToRGB565DitherRow_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void I444ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_Any_NEON');
  late final _I444ToARGBRow_Any_NEON = _I444ToARGBRow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_Any_NEON');
  late final _I422ToARGBRow_Any_NEON = _I422ToARGBRow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444AlphaToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444AlphaToARGBRow_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I444AlphaToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444AlphaToARGBRow_Any_NEON');
  late final _I444AlphaToARGBRow_Any_NEON =
      _I444AlphaToARGBRow_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422AlphaToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_Any_NEON');
  late final _I422AlphaToARGBRow_Any_NEON =
      _I422AlphaToARGBRow_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToRGBARow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_Any_NEON');
  late final _I422ToRGBARow_Any_NEON = _I422ToRGBARow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB24Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_Any_NEON');
  late final _I422ToRGB24Row_Any_NEON = _I422ToRGB24Row_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_Any_NEON');
  late final _I422ToARGB4444Row_Any_NEON =
      _I422ToARGB4444Row_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToARGB1555Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_Any_NEON');
  late final _I422ToARGB1555Row_Any_NEON =
      _I422ToARGB1555Row_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToRGB565Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_Any_NEON');
  late final _I422ToRGB565Row_Any_NEON =
      _I422ToRGB565Row_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void NV12ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_Any_NEON');
  late final _NV12ToARGBRow_Any_NEON = _NV12ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_Any_NEON');
  late final _NV21ToARGBRow_Any_NEON = _NV21ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_Any_NEON');
  late final _NV12ToRGB24Row_Any_NEON = _NV12ToRGB24Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_Any_NEON');
  late final _NV21ToRGB24Row_Any_NEON = _NV21ToRGB24Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToYUV24Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _NV21ToYUV24Row_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _NV21ToYUV24Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('NV21ToYUV24Row_Any_NEON');
  late final _NV21ToYUV24Row_Any_NEON = _NV21ToYUV24Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void NV12ToRGB565Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_Any_NEON');
  late final _NV12ToRGB565Row_Any_NEON =
      _NV12ToRGB565Row_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_Any_NEON');
  late final _YUY2ToARGBRow_Any_NEON = _YUY2ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_Any_NEON(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_Any_NEON');
  late final _UYVYToARGBRow_Any_NEON = _UYVYToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void P210ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToARGBRow_NEON(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P210ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToARGBRow_NEON');
  late final _P210ToARGBRow_NEON = _P210ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToARGBRow_NEON(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToARGBRow_NEON(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P410ToARGBRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToARGBRow_NEON');
  late final _P410ToARGBRow_NEON = _P410ToARGBRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToAR30Row_NEON(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToAR30Row_NEON(
      y_buf,
      uv_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P210ToAR30Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToAR30Row_NEON');
  late final _P210ToAR30Row_NEON = _P210ToAR30Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToAR30Row_NEON(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToAR30Row_NEON(
      y_buf,
      uv_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P410ToAR30Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToAR30Row_NEON');
  late final _P410ToAR30Row_NEON = _P410ToAR30Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToARGBRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P210ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToARGBRow_Any_NEON');
  late final _P210ToARGBRow_Any_NEON = _P210ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToARGBRow_Any_NEON(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToARGBRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _P410ToARGBRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToARGBRow_Any_NEON');
  late final _P410ToARGBRow_Any_NEON = _P410ToARGBRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P210ToAR30Row_Any_NEON(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P210ToAR30Row_Any_NEON(
      y_buf,
      uv_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P210ToAR30Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P210ToAR30Row_Any_NEON');
  late final _P210ToAR30Row_Any_NEON = _P210ToAR30Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void P410ToAR30Row_Any_NEON(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _P410ToAR30Row_Any_NEON(
      y_buf,
      uv_buf,
      dst_ar30,
      yuvconstants,
      width,
    );
  }

  late final _P410ToAR30Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('P410ToAR30Row_Any_NEON');
  late final _P410ToAR30Row_Any_NEON = _P410ToAR30Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void I444ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_Any_MSA');
  late final _I444ToARGBRow_Any_MSA = _I444ToARGBRow_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I444ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I444ToARGBRow_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I444ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I444ToARGBRow_Any_MMI');
  late final _I444ToARGBRow_Any_MMI = _I444ToARGBRow_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_Any_MSA');
  late final _I422ToARGBRow_Any_MSA = _I422ToARGBRow_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGBRow_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGBRow_Any_MMI');
  late final _I422ToARGBRow_Any_MMI = _I422ToARGBRow_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGBARow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_Any_MSA');
  late final _I422ToRGBARow_Any_MSA = _I422ToRGBARow_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422AlphaToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_Any_MSA');
  late final _I422AlphaToARGBRow_Any_MSA =
      _I422AlphaToARGBRow_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToRGB24Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_Any_MSA');
  late final _I422ToRGB24Row_Any_MSA = _I422ToRGB24Row_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB565Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_Any_MSA');
  late final _I422ToRGB565Row_Any_MSA = _I422ToRGB565Row_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_Any_MSA');
  late final _I422ToARGB4444Row_Any_MSA =
      _I422ToARGB4444Row_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToARGB1555Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_Any_MSA');
  late final _I422ToARGB1555Row_Any_MSA =
      _I422ToARGB1555Row_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void NV12ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_Any_MSA');
  late final _NV12ToARGBRow_Any_MSA = _NV12ToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB565Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_Any_MSA');
  late final _NV12ToRGB565Row_Any_MSA = _NV12ToRGB565Row_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_Any_MSA');
  late final _NV21ToARGBRow_Any_MSA = _NV21ToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_Any_MSA');
  late final _YUY2ToARGBRow_Any_MSA = _YUY2ToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_Any_MSA(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_Any_MSA');
  late final _UYVYToARGBRow_Any_MSA = _UYVYToARGBRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToYRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _YUY2ToYRow_AVX2(
      src_yuy2,
      dst_y,
      width,
    );
  }

  late final _YUY2ToYRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_AVX2');
  late final _YUY2ToYRow_AVX2 = _YUY2ToYRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_AVX2(
      src_yuy2,
      stride_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_AVX2');
  late final _YUY2ToUVRow_AVX2 = _YUY2ToUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_AVX2(
      src_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_AVX2');
  late final _YUY2ToUV422Row_AVX2 = _YUY2ToUV422Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _YUY2ToYRow_SSE2(
      src_yuy2,
      dst_y,
      width,
    );
  }

  late final _YUY2ToYRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_SSE2');
  late final _YUY2ToYRow_SSE2 = _YUY2ToYRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_SSE2(
      src_yuy2,
      stride_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_SSE2');
  late final _YUY2ToUVRow_SSE2 = _YUY2ToUVRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_SSE2(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_SSE2(
      src_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_SSE2');
  late final _YUY2ToUV422Row_SSE2 = _YUY2ToUV422Row_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _YUY2ToYRow_NEON(
      src_yuy2,
      dst_y,
      width,
    );
  }

  late final _YUY2ToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_NEON');
  late final _YUY2ToYRow_NEON = _YUY2ToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_NEON(
      src_yuy2,
      stride_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_NEON');
  late final _YUY2ToUVRow_NEON = _YUY2ToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_NEON(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_NEON(
      src_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_NEON');
  late final _YUY2ToUV422Row_NEON = _YUY2ToUV422Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _YUY2ToYRow_MSA(
      src_yuy2,
      dst_y,
      width,
    );
  }

  late final _YUY2ToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_MSA');
  late final _YUY2ToYRow_MSA = _YUY2ToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _YUY2ToYRow_MMI(
      src_yuy2,
      dst_y,
      width,
    );
  }

  late final _YUY2ToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_MMI');
  late final _YUY2ToYRow_MMI = _YUY2ToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int src_stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_MSA(
      src_yuy2,
      src_stride_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_MSA');
  late final _YUY2ToUVRow_MSA = _YUY2ToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int src_stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_MMI(
      src_yuy2,
      src_stride_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_MMI');
  late final _YUY2ToUVRow_MMI = _YUY2ToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_MSA(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_MSA(
      src_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_MSA');
  late final _YUY2ToUV422Row_MSA = _YUY2ToUV422Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_MMI(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_MMI(
      src_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_MMI');
  late final _YUY2ToUV422Row_MMI = _YUY2ToUV422Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_C(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _YUY2ToYRow_C(
      src_yuy2,
      dst_y,
      width,
    );
  }

  late final _YUY2ToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_C');
  late final _YUY2ToYRow_C = _YUY2ToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int src_stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_C(
      src_yuy2,
      src_stride_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_C');
  late final _YUY2ToUVRow_C = _YUY2ToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_C(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_C(
      src_yuy2,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_C');
  late final _YUY2ToUV422Row_C = _YUY2ToUV422Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _YUY2ToYRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _YUY2ToYRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_Any_AVX2');
  late final _YUY2ToYRow_Any_AVX2 = _YUY2ToYRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_Any_AVX2(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_Any_AVX2');
  late final _YUY2ToUVRow_Any_AVX2 = _YUY2ToUVRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_Any_AVX2(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_Any_AVX2');
  late final _YUY2ToUV422Row_Any_AVX2 = _YUY2ToUV422Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _YUY2ToYRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _YUY2ToYRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_Any_SSE2');
  late final _YUY2ToYRow_Any_SSE2 = _YUY2ToYRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_Any_SSE2(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_Any_SSE2');
  late final _YUY2ToUVRow_Any_SSE2 = _YUY2ToUVRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_Any_SSE2(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_Any_SSE2');
  late final _YUY2ToUV422Row_Any_SSE2 = _YUY2ToUV422Row_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _YUY2ToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _YUY2ToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_Any_NEON');
  late final _YUY2ToYRow_Any_NEON = _YUY2ToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_Any_NEON');
  late final _YUY2ToUVRow_Any_NEON = _YUY2ToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_Any_NEON(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_Any_NEON');
  late final _YUY2ToUV422Row_Any_NEON = _YUY2ToUV422Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _YUY2ToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _YUY2ToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_Any_MSA');
  late final _YUY2ToYRow_Any_MSA = _YUY2ToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _YUY2ToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _YUY2ToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToYRow_Any_MMI');
  late final _YUY2ToYRow_Any_MMI = _YUY2ToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_Any_MSA');
  late final _YUY2ToUVRow_Any_MSA = _YUY2ToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('YUY2ToUVRow_Any_MMI');
  late final _YUY2ToUVRow_Any_MMI = _YUY2ToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_Any_MSA(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_Any_MSA');
  late final _YUY2ToUV422Row_Any_MSA = _YUY2ToUV422Row_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void YUY2ToUV422Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _YUY2ToUV422Row_Any_MMI(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _YUY2ToUV422Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('YUY2ToUV422Row_Any_MMI');
  late final _YUY2ToUV422Row_Any_MMI = _YUY2ToUV422Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _UYVYToYRow_AVX2(
      src_uyvy,
      dst_y,
      width,
    );
  }

  late final _UYVYToYRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_AVX2');
  late final _UYVYToYRow_AVX2 = _UYVYToYRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_AVX2(
      src_uyvy,
      stride_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_AVX2');
  late final _UYVYToUVRow_AVX2 = _UYVYToUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_AVX2(
      src_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_AVX2');
  late final _UYVYToUV422Row_AVX2 = _UYVYToUV422Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _UYVYToYRow_SSE2(
      src_uyvy,
      dst_y,
      width,
    );
  }

  late final _UYVYToYRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_SSE2');
  late final _UYVYToYRow_SSE2 = _UYVYToYRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_SSE2(
      src_uyvy,
      stride_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_SSE2');
  late final _UYVYToUVRow_SSE2 = _UYVYToUVRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_SSE2(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_SSE2(
      src_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_SSE2');
  late final _UYVYToUV422Row_SSE2 = _UYVYToUV422Row_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _UYVYToYRow_NEON(
      src_uyvy,
      dst_y,
      width,
    );
  }

  late final _UYVYToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_NEON');
  late final _UYVYToYRow_NEON = _UYVYToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_NEON(
      src_uyvy,
      stride_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_NEON');
  late final _UYVYToUVRow_NEON = _UYVYToUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_NEON(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_NEON(
      src_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_NEON');
  late final _UYVYToUV422Row_NEON = _UYVYToUV422Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _UYVYToYRow_MSA(
      src_uyvy,
      dst_y,
      width,
    );
  }

  late final _UYVYToYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_MSA');
  late final _UYVYToYRow_MSA = _UYVYToYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _UYVYToYRow_MMI(
      src_uyvy,
      dst_y,
      width,
    );
  }

  late final _UYVYToYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_MMI');
  late final _UYVYToYRow_MMI = _UYVYToYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_MSA(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int src_stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_MSA(
      src_uyvy,
      src_stride_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_MSA');
  late final _UYVYToUVRow_MSA = _UYVYToUVRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_MMI(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int src_stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_MMI(
      src_uyvy,
      src_stride_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_MMI');
  late final _UYVYToUVRow_MMI = _UYVYToUVRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_MSA(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_MSA(
      src_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_MSA');
  late final _UYVYToUV422Row_MSA = _UYVYToUV422Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_MMI(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_MMI(
      src_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_MMI');
  late final _UYVYToUV422Row_MMI = _UYVYToUV422Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_C(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _UYVYToYRow_C(
      src_uyvy,
      dst_y,
      width,
    );
  }

  late final _UYVYToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_C');
  late final _UYVYToYRow_C = _UYVYToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int src_stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_C(
      src_uyvy,
      src_stride_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_C');
  late final _UYVYToUVRow_C = _UYVYToUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_C(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_C(
      src_uyvy,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_C');
  late final _UYVYToUV422Row_C = _UYVYToUV422Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _UYVYToYRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _UYVYToYRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_Any_AVX2');
  late final _UYVYToYRow_Any_AVX2 = _UYVYToYRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_Any_AVX2(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_Any_AVX2');
  late final _UYVYToUVRow_Any_AVX2 = _UYVYToUVRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_Any_AVX2(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_Any_AVX2');
  late final _UYVYToUV422Row_Any_AVX2 = _UYVYToUV422Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _UYVYToYRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _UYVYToYRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_Any_SSE2');
  late final _UYVYToYRow_Any_SSE2 = _UYVYToYRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_Any_SSE2(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_Any_SSE2');
  late final _UYVYToUVRow_Any_SSE2 = _UYVYToUVRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_Any_SSE2(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_Any_SSE2');
  late final _UYVYToUV422Row_Any_SSE2 = _UYVYToUV422Row_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _UYVYToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _UYVYToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_Any_NEON');
  late final _UYVYToYRow_Any_NEON = _UYVYToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_Any_NEON');
  late final _UYVYToUVRow_Any_NEON = _UYVYToUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_Any_NEON(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_Any_NEON');
  late final _UYVYToUV422Row_Any_NEON = _UYVYToUV422Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _UYVYToYRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _UYVYToYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_Any_MSA');
  late final _UYVYToYRow_Any_MSA = _UYVYToYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _UYVYToYRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _UYVYToYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToYRow_Any_MMI');
  late final _UYVYToYRow_Any_MMI = _UYVYToYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_Any_MSA(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_Any_MSA');
  late final _UYVYToUVRow_Any_MSA = _UYVYToUVRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUVRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUVRow_Any_MMI(
      src_ptr,
      src_stride_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUVRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('UYVYToUVRow_Any_MMI');
  late final _UYVYToUVRow_Any_MMI = _UYVYToUVRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_Any_MSA(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_Any_MSA');
  late final _UYVYToUV422Row_Any_MSA = _UYVYToUV422Row_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void UYVYToUV422Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int width,
  ) {
    return _UYVYToUV422Row_Any_MMI(
      src_ptr,
      dst_u,
      dst_v,
      width,
    );
  }

  late final _UYVYToUV422Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('UYVYToUV422Row_Any_MMI');
  late final _UYVYToUV422Row_Any_MMI = _UYVYToUV422Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SwapUVRow_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int width,
  ) {
    return _SwapUVRow_C(
      src_uv,
      dst_vu,
      width,
    );
  }

  late final _SwapUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SwapUVRow_C');
  late final _SwapUVRow_C = _SwapUVRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SwapUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int width,
  ) {
    return _SwapUVRow_NEON(
      src_uv,
      dst_vu,
      width,
    );
  }

  late final _SwapUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SwapUVRow_NEON');
  late final _SwapUVRow_NEON = _SwapUVRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SwapUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SwapUVRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _SwapUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SwapUVRow_Any_NEON');
  late final _SwapUVRow_Any_NEON = _SwapUVRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SwapUVRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int width,
  ) {
    return _SwapUVRow_SSSE3(
      src_uv,
      dst_vu,
      width,
    );
  }

  late final _SwapUVRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SwapUVRow_SSSE3');
  late final _SwapUVRow_SSSE3 = _SwapUVRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SwapUVRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SwapUVRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _SwapUVRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SwapUVRow_Any_SSSE3');
  late final _SwapUVRow_Any_SSSE3 = _SwapUVRow_Any_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SwapUVRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int width,
  ) {
    return _SwapUVRow_AVX2(
      src_uv,
      dst_vu,
      width,
    );
  }

  late final _SwapUVRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SwapUVRow_AVX2');
  late final _SwapUVRow_AVX2 = _SwapUVRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SwapUVRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SwapUVRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _SwapUVRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SwapUVRow_Any_AVX2');
  late final _SwapUVRow_Any_AVX2 = _SwapUVRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToYRow_C(
    ffi.Pointer<ffi.Uint8> src_ayuv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _AYUVToYRow_C(
      src_ayuv,
      dst_y,
      width,
    );
  }

  late final _AYUVToYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AYUVToYRow_C');
  late final _AYUVToYRow_C = _AYUVToYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToUVRow_C(
    ffi.Pointer<ffi.Uint8> src_ayuv,
    int src_stride_ayuv,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _AYUVToUVRow_C(
      src_ayuv,
      src_stride_ayuv,
      dst_uv,
      width,
    );
  }

  late final _AYUVToUVRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('AYUVToUVRow_C');
  late final _AYUVToUVRow_C = _AYUVToUVRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToVURow_C(
    ffi.Pointer<ffi.Uint8> src_ayuv,
    int src_stride_ayuv,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int width,
  ) {
    return _AYUVToVURow_C(
      src_ayuv,
      src_stride_ayuv,
      dst_vu,
      width,
    );
  }

  late final _AYUVToVURow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('AYUVToVURow_C');
  late final _AYUVToVURow_C = _AYUVToVURow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_ayuv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _AYUVToYRow_NEON(
      src_ayuv,
      dst_y,
      width,
    );
  }

  late final _AYUVToYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AYUVToYRow_NEON');
  late final _AYUVToYRow_NEON = _AYUVToYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToUVRow_NEON(
    ffi.Pointer<ffi.Uint8> src_ayuv,
    int src_stride_ayuv,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int width,
  ) {
    return _AYUVToUVRow_NEON(
      src_ayuv,
      src_stride_ayuv,
      dst_uv,
      width,
    );
  }

  late final _AYUVToUVRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('AYUVToUVRow_NEON');
  late final _AYUVToUVRow_NEON = _AYUVToUVRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToVURow_NEON(
    ffi.Pointer<ffi.Uint8> src_ayuv,
    int src_stride_ayuv,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int width,
  ) {
    return _AYUVToVURow_NEON(
      src_ayuv,
      src_stride_ayuv,
      dst_vu,
      width,
    );
  }

  late final _AYUVToVURow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('AYUVToVURow_NEON');
  late final _AYUVToVURow_NEON = _AYUVToVURow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _AYUVToYRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _AYUVToYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('AYUVToYRow_Any_NEON');
  late final _AYUVToYRow_Any_NEON = _AYUVToYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToUVRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int width,
  ) {
    return _AYUVToUVRow_Any_NEON(
      src_ptr,
      src_stride,
      dst_vu,
      width,
    );
  }

  late final _AYUVToUVRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('AYUVToUVRow_Any_NEON');
  late final _AYUVToUVRow_Any_NEON = _AYUVToUVRow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void AYUVToVURow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int width,
  ) {
    return _AYUVToVURow_Any_NEON(
      src_ptr,
      src_stride,
      dst_vu,
      width,
    );
  }

  late final _AYUVToVURow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('AYUVToVURow_Any_NEON');
  late final _AYUVToVURow_Any_NEON = _AYUVToVURow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_frame,
    int width,
  ) {
    return _I422ToYUY2Row_C(
      src_y,
      src_u,
      src_v,
      dst_frame,
      width,
    );
  }

  late final _I422ToYUY2Row_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_C');
  late final _I422ToYUY2Row_C = _I422ToYUY2Row_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_C(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_frame,
    int width,
  ) {
    return _I422ToUYVYRow_C(
      src_y,
      src_u,
      src_v,
      dst_frame,
      width,
    );
  }

  late final _I422ToUYVYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_C');
  late final _I422ToUYVYRow_C = _I422ToUYVYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_SSE2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_yuy2,
    int width,
  ) {
    return _I422ToYUY2Row_SSE2(
      src_y,
      src_u,
      src_v,
      dst_yuy2,
      width,
    );
  }

  late final _I422ToYUY2Row_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_SSE2');
  late final _I422ToYUY2Row_SSE2 = _I422ToYUY2Row_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uyvy,
    int width,
  ) {
    return _I422ToUYVYRow_SSE2(
      src_y,
      src_u,
      src_v,
      dst_uyvy,
      width,
    );
  }

  late final _I422ToUYVYRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_SSE2');
  late final _I422ToUYVYRow_SSE2 = _I422ToUYVYRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToYUY2Row_Any_SSE2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToYUY2Row_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_Any_SSE2');
  late final _I422ToYUY2Row_Any_SSE2 = _I422ToYUY2Row_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToUYVYRow_Any_SSE2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToUYVYRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_Any_SSE2');
  late final _I422ToUYVYRow_Any_SSE2 = _I422ToUYVYRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_yuy2,
    int width,
  ) {
    return _I422ToYUY2Row_AVX2(
      src_y,
      src_u,
      src_v,
      dst_yuy2,
      width,
    );
  }

  late final _I422ToYUY2Row_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_AVX2');
  late final _I422ToYUY2Row_AVX2 = _I422ToYUY2Row_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uyvy,
    int width,
  ) {
    return _I422ToUYVYRow_AVX2(
      src_y,
      src_u,
      src_v,
      dst_uyvy,
      width,
    );
  }

  late final _I422ToUYVYRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_AVX2');
  late final _I422ToUYVYRow_AVX2 = _I422ToUYVYRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToYUY2Row_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToYUY2Row_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_Any_AVX2');
  late final _I422ToYUY2Row_Any_AVX2 = _I422ToYUY2Row_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToUYVYRow_Any_AVX2(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToUYVYRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_Any_AVX2');
  late final _I422ToUYVYRow_Any_AVX2 = _I422ToUYVYRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_yuy2,
    int width,
  ) {
    return _I422ToYUY2Row_NEON(
      src_y,
      src_u,
      src_v,
      dst_yuy2,
      width,
    );
  }

  late final _I422ToYUY2Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_NEON');
  late final _I422ToYUY2Row_NEON = _I422ToYUY2Row_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uyvy,
    int width,
  ) {
    return _I422ToUYVYRow_NEON(
      src_y,
      src_u,
      src_v,
      dst_uyvy,
      width,
    );
  }

  late final _I422ToUYVYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_NEON');
  late final _I422ToUYVYRow_NEON = _I422ToUYVYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToYUY2Row_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToYUY2Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_Any_NEON');
  late final _I422ToYUY2Row_Any_NEON = _I422ToYUY2Row_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToUYVYRow_Any_NEON(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToUYVYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_Any_NEON');
  late final _I422ToUYVYRow_Any_NEON = _I422ToUYVYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_yuy2,
    int width,
  ) {
    return _I422ToYUY2Row_MSA(
      src_y,
      src_u,
      src_v,
      dst_yuy2,
      width,
    );
  }

  late final _I422ToYUY2Row_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_MSA');
  late final _I422ToYUY2Row_MSA = _I422ToYUY2Row_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_yuy2,
    int width,
  ) {
    return _I422ToYUY2Row_MMI(
      src_y,
      src_u,
      src_v,
      dst_yuy2,
      width,
    );
  }

  late final _I422ToYUY2Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_MMI');
  late final _I422ToYUY2Row_MMI = _I422ToYUY2Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uyvy,
    int width,
  ) {
    return _I422ToUYVYRow_MSA(
      src_y,
      src_u,
      src_v,
      dst_uyvy,
      width,
    );
  }

  late final _I422ToUYVYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_MSA');
  late final _I422ToUYVYRow_MSA = _I422ToUYVYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_uyvy,
    int width,
  ) {
    return _I422ToUYVYRow_MMI(
      src_y,
      src_u,
      src_v,
      dst_uyvy,
      width,
    );
  }

  late final _I422ToUYVYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_MMI');
  late final _I422ToUYVYRow_MMI = _I422ToUYVYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToYUY2Row_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToYUY2Row_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_Any_MSA');
  late final _I422ToYUY2Row_Any_MSA = _I422ToYUY2Row_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToYUY2Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToYUY2Row_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToYUY2Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToYUY2Row_Any_MMI');
  late final _I422ToYUY2Row_Any_MMI = _I422ToYUY2Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToUYVYRow_Any_MSA(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToUYVYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_Any_MSA');
  late final _I422ToUYVYRow_Any_MSA = _I422ToUYVYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void I422ToUYVYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _I422ToUYVYRow_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      width,
    );
  }

  late final _I422ToUYVYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('I422ToUYVYRow_Any_MMI');
  late final _I422ToUYVYRow_Any_MMI = _I422ToUYVYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  /// Effects related row functions.
  void ARGBAttenuateRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAttenuateRow_C(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBAttenuateRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_C');
  late final _ARGBAttenuateRow_C = _ARGBAttenuateRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAttenuateRow_SSSE3(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBAttenuateRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_SSSE3');
  late final _ARGBAttenuateRow_SSSE3 = _ARGBAttenuateRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAttenuateRow_AVX2(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBAttenuateRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_AVX2');
  late final _ARGBAttenuateRow_AVX2 = _ARGBAttenuateRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAttenuateRow_NEON(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBAttenuateRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_NEON');
  late final _ARGBAttenuateRow_NEON = _ARGBAttenuateRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAttenuateRow_MSA(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBAttenuateRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_MSA');
  late final _ARGBAttenuateRow_MSA = _ARGBAttenuateRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBAttenuateRow_MMI(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBAttenuateRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_MMI');
  late final _ARGBAttenuateRow_MMI = _ARGBAttenuateRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAttenuateRow_Any_SSSE3(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAttenuateRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_Any_SSSE3');
  late final _ARGBAttenuateRow_Any_SSSE3 =
      _ARGBAttenuateRow_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAttenuateRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAttenuateRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_Any_AVX2');
  late final _ARGBAttenuateRow_Any_AVX2 =
      _ARGBAttenuateRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAttenuateRow_Any_NEON(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAttenuateRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_Any_NEON');
  late final _ARGBAttenuateRow_Any_NEON =
      _ARGBAttenuateRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAttenuateRow_Any_MSA(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAttenuateRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_Any_MSA');
  late final _ARGBAttenuateRow_Any_MSA =
      _ARGBAttenuateRow_Any_MSAPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBAttenuateRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBAttenuateRow_Any_MMI(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBAttenuateRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBAttenuateRow_Any_MMI');
  late final _ARGBAttenuateRow_Any_MMI =
      _ARGBAttenuateRow_Any_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  /// Inverse table for unattenuate, shared by C and SSE2.
  late final ffi.Pointer<ffi.Pointer<ffi.Uint32>> _fixed_invtbl8 =
      _lookup<ffi.Pointer<ffi.Uint32>>('fixed_invtbl8');

  ffi.Pointer<ffi.Uint32> get fixed_invtbl8 => _fixed_invtbl8.value;

  set fixed_invtbl8(ffi.Pointer<ffi.Uint32> value) =>
      _fixed_invtbl8.value = value;

  void ARGBUnattenuateRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBUnattenuateRow_C(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBUnattenuateRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBUnattenuateRow_C');
  late final _ARGBUnattenuateRow_C = _ARGBUnattenuateRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBUnattenuateRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBUnattenuateRow_SSE2(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBUnattenuateRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBUnattenuateRow_SSE2');
  late final _ARGBUnattenuateRow_SSE2 = _ARGBUnattenuateRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBUnattenuateRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBUnattenuateRow_AVX2(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBUnattenuateRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBUnattenuateRow_AVX2');
  late final _ARGBUnattenuateRow_AVX2 = _ARGBUnattenuateRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBUnattenuateRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBUnattenuateRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBUnattenuateRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBUnattenuateRow_Any_SSE2');
  late final _ARGBUnattenuateRow_Any_SSE2 =
      _ARGBUnattenuateRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBUnattenuateRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _ARGBUnattenuateRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      width,
    );
  }

  late final _ARGBUnattenuateRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBUnattenuateRow_Any_AVX2');
  late final _ARGBUnattenuateRow_Any_AVX2 =
      _ARGBUnattenuateRow_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBGrayRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBGrayRow_C(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBGrayRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBGrayRow_C');
  late final _ARGBGrayRow_C = _ARGBGrayRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBGrayRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBGrayRow_SSSE3(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBGrayRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBGrayRow_SSSE3');
  late final _ARGBGrayRow_SSSE3 = _ARGBGrayRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBGrayRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBGrayRow_NEON(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBGrayRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBGrayRow_NEON');
  late final _ARGBGrayRow_NEON = _ARGBGrayRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBGrayRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBGrayRow_MSA(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBGrayRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBGrayRow_MSA');
  late final _ARGBGrayRow_MSA = _ARGBGrayRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBGrayRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBGrayRow_MMI(
      src_argb,
      dst_argb,
      width,
    );
  }

  late final _ARGBGrayRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBGrayRow_MMI');
  late final _ARGBGrayRow_MMI = _ARGBGrayRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSepiaRow_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSepiaRow_C(
      dst_argb,
      width,
    );
  }

  late final _ARGBSepiaRow_CPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>(
      'ARGBSepiaRow_C');
  late final _ARGBSepiaRow_C = _ARGBSepiaRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSepiaRow_SSSE3(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSepiaRow_SSSE3(
      dst_argb,
      width,
    );
  }

  late final _ARGBSepiaRow_SSSE3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>(
      'ARGBSepiaRow_SSSE3');
  late final _ARGBSepiaRow_SSSE3 = _ARGBSepiaRow_SSSE3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSepiaRow_NEON(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSepiaRow_NEON(
      dst_argb,
      width,
    );
  }

  late final _ARGBSepiaRow_NEONPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>(
      'ARGBSepiaRow_NEON');
  late final _ARGBSepiaRow_NEON = _ARGBSepiaRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSepiaRow_MSA(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSepiaRow_MSA(
      dst_argb,
      width,
    );
  }

  late final _ARGBSepiaRow_MSAPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>(
      'ARGBSepiaRow_MSA');
  late final _ARGBSepiaRow_MSA = _ARGBSepiaRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBSepiaRow_MMI(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _ARGBSepiaRow_MMI(
      dst_argb,
      width,
    );
  }

  late final _ARGBSepiaRow_MMIPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>(
      'ARGBSepiaRow_MMI');
  late final _ARGBSepiaRow_MMI = _ARGBSepiaRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBColorMatrixRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Int8> matrix_argb,
    int width,
  ) {
    return _ARGBColorMatrixRow_C(
      src_argb,
      dst_argb,
      matrix_argb,
      width,
    );
  }

  late final _ARGBColorMatrixRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int8>, ffi.Int)>>('ARGBColorMatrixRow_C');
  late final _ARGBColorMatrixRow_C = _ARGBColorMatrixRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int8>, int)>();

  void ARGBColorMatrixRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Int8> matrix_argb,
    int width,
  ) {
    return _ARGBColorMatrixRow_SSSE3(
      src_argb,
      dst_argb,
      matrix_argb,
      width,
    );
  }

  late final _ARGBColorMatrixRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int8>, ffi.Int)>>('ARGBColorMatrixRow_SSSE3');
  late final _ARGBColorMatrixRow_SSSE3 =
      _ARGBColorMatrixRow_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int8>, int)>();

  void ARGBColorMatrixRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Int8> matrix_argb,
    int width,
  ) {
    return _ARGBColorMatrixRow_NEON(
      src_argb,
      dst_argb,
      matrix_argb,
      width,
    );
  }

  late final _ARGBColorMatrixRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int8>, ffi.Int)>>('ARGBColorMatrixRow_NEON');
  late final _ARGBColorMatrixRow_NEON = _ARGBColorMatrixRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int8>, int)>();

  void ARGBColorMatrixRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Int8> matrix_argb,
    int width,
  ) {
    return _ARGBColorMatrixRow_MSA(
      src_argb,
      dst_argb,
      matrix_argb,
      width,
    );
  }

  late final _ARGBColorMatrixRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int8>, ffi.Int)>>('ARGBColorMatrixRow_MSA');
  late final _ARGBColorMatrixRow_MSA = _ARGBColorMatrixRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int8>, int)>();

  void ARGBColorMatrixRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Int8> matrix_argb,
    int width,
  ) {
    return _ARGBColorMatrixRow_MMI(
      src_argb,
      dst_argb,
      matrix_argb,
      width,
    );
  }

  late final _ARGBColorMatrixRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int8>, ffi.Int)>>('ARGBColorMatrixRow_MMI');
  late final _ARGBColorMatrixRow_MMI = _ARGBColorMatrixRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int8>, int)>();

  void ARGBColorTableRow_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> table_argb,
    int width,
  ) {
    return _ARGBColorTableRow_C(
      dst_argb,
      table_argb,
      width,
    );
  }

  late final _ARGBColorTableRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBColorTableRow_C');
  late final _ARGBColorTableRow_C = _ARGBColorTableRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBColorTableRow_X86(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> table_argb,
    int width,
  ) {
    return _ARGBColorTableRow_X86(
      dst_argb,
      table_argb,
      width,
    );
  }

  late final _ARGBColorTableRow_X86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ARGBColorTableRow_X86');
  late final _ARGBColorTableRow_X86 = _ARGBColorTableRow_X86Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBColorTableRow_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> table_argb,
    int width,
  ) {
    return _RGBColorTableRow_C(
      dst_argb,
      table_argb,
      width,
    );
  }

  late final _RGBColorTableRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBColorTableRow_C');
  late final _RGBColorTableRow_C = _RGBColorTableRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void RGBColorTableRow_X86(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> table_argb,
    int width,
  ) {
    return _RGBColorTableRow_X86(
      dst_argb,
      table_argb,
      width,
    );
  }

  late final _RGBColorTableRow_X86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('RGBColorTableRow_X86');
  late final _RGBColorTableRow_X86 = _RGBColorTableRow_X86Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBQuantizeRow_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int scale,
    int interval_size,
    int interval_offset,
    int width,
  ) {
    return _ARGBQuantizeRow_C(
      dst_argb,
      scale,
      interval_size,
      interval_offset,
      width,
    );
  }

  late final _ARGBQuantizeRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('ARGBQuantizeRow_C');
  late final _ARGBQuantizeRow_C = _ARGBQuantizeRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  void ARGBQuantizeRow_SSE2(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int scale,
    int interval_size,
    int interval_offset,
    int width,
  ) {
    return _ARGBQuantizeRow_SSE2(
      dst_argb,
      scale,
      interval_size,
      interval_offset,
      width,
    );
  }

  late final _ARGBQuantizeRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('ARGBQuantizeRow_SSE2');
  late final _ARGBQuantizeRow_SSE2 = _ARGBQuantizeRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  void ARGBQuantizeRow_NEON(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int scale,
    int interval_size,
    int interval_offset,
    int width,
  ) {
    return _ARGBQuantizeRow_NEON(
      dst_argb,
      scale,
      interval_size,
      interval_offset,
      width,
    );
  }

  late final _ARGBQuantizeRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('ARGBQuantizeRow_NEON');
  late final _ARGBQuantizeRow_NEON = _ARGBQuantizeRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  void ARGBQuantizeRow_MSA(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int scale,
    int interval_size,
    int interval_offset,
    int width,
  ) {
    return _ARGBQuantizeRow_MSA(
      dst_argb,
      scale,
      interval_size,
      interval_offset,
      width,
    );
  }

  late final _ARGBQuantizeRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('ARGBQuantizeRow_MSA');
  late final _ARGBQuantizeRow_MSA = _ARGBQuantizeRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  void ARGBShadeRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
    int value,
  ) {
    return _ARGBShadeRow_C(
      src_argb,
      dst_argb,
      width,
      value,
    );
  }

  late final _ARGBShadeRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Uint32)>>('ARGBShadeRow_C');
  late final _ARGBShadeRow_C = _ARGBShadeRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBShadeRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
    int value,
  ) {
    return _ARGBShadeRow_SSE2(
      src_argb,
      dst_argb,
      width,
      value,
    );
  }

  late final _ARGBShadeRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Uint32)>>('ARGBShadeRow_SSE2');
  late final _ARGBShadeRow_SSE2 = _ARGBShadeRow_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBShadeRow_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
    int value,
  ) {
    return _ARGBShadeRow_NEON(
      src_argb,
      dst_argb,
      width,
      value,
    );
  }

  late final _ARGBShadeRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Uint32)>>('ARGBShadeRow_NEON');
  late final _ARGBShadeRow_NEON = _ARGBShadeRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBShadeRow_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
    int value,
  ) {
    return _ARGBShadeRow_MSA(
      src_argb,
      dst_argb,
      width,
      value,
    );
  }

  late final _ARGBShadeRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Uint32)>>('ARGBShadeRow_MSA');
  late final _ARGBShadeRow_MSA = _ARGBShadeRow_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ARGBShadeRow_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
    int value,
  ) {
    return _ARGBShadeRow_MMI(
      src_argb,
      dst_argb,
      width,
      value,
    );
  }

  late final _ARGBShadeRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Uint32)>>('ARGBShadeRow_MMI');
  late final _ARGBShadeRow_MMI = _ARGBShadeRow_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();

  /// Used for blur.
  void CumulativeSumToAverageRow_SSE2(
    ffi.Pointer<ffi.Int32> topleft,
    ffi.Pointer<ffi.Int32> botleft,
    int width,
    int area,
    ffi.Pointer<ffi.Uint8> dst,
    int count,
  ) {
    return _CumulativeSumToAverageRow_SSE2(
      topleft,
      botleft,
      width,
      area,
      dst,
      count,
    );
  }

  late final _CumulativeSumToAverageRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CumulativeSumToAverageRow_SSE2');
  late final _CumulativeSumToAverageRow_SSE2 =
      _CumulativeSumToAverageRow_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>, int,
              int, ffi.Pointer<ffi.Uint8>, int)>();

  void ComputeCumulativeSumRow_SSE2(
    ffi.Pointer<ffi.Uint8> row,
    ffi.Pointer<ffi.Int32> cumsum,
    ffi.Pointer<ffi.Int32> previous_cumsum,
    int width,
  ) {
    return _ComputeCumulativeSumRow_SSE2(
      row,
      cumsum,
      previous_cumsum,
      width,
    );
  }

  late final _ComputeCumulativeSumRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int)>>('ComputeCumulativeSumRow_SSE2');
  late final _ComputeCumulativeSumRow_SSE2 =
      _ComputeCumulativeSumRow_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, int)>();

  void ComputeCumulativeSumRow_MMI(
    ffi.Pointer<ffi.Uint8> row,
    ffi.Pointer<ffi.Int32> cumsum,
    ffi.Pointer<ffi.Int32> previous_cumsum,
    int width,
  ) {
    return _ComputeCumulativeSumRow_MMI(
      row,
      cumsum,
      previous_cumsum,
      width,
    );
  }

  late final _ComputeCumulativeSumRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, ffi.Int)>>('ComputeCumulativeSumRow_MMI');
  late final _ComputeCumulativeSumRow_MMI =
      _ComputeCumulativeSumRow_MMIPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, int)>();

  void CumulativeSumToAverageRow_C(
    ffi.Pointer<ffi.Int32> tl,
    ffi.Pointer<ffi.Int32> bl,
    int w,
    int area,
    ffi.Pointer<ffi.Uint8> dst,
    int count,
  ) {
    return _CumulativeSumToAverageRow_C(
      tl,
      bl,
      w,
      area,
      dst,
      count,
    );
  }

  late final _CumulativeSumToAverageRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('CumulativeSumToAverageRow_C');
  late final _CumulativeSumToAverageRow_C =
      _CumulativeSumToAverageRow_CPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>, int,
              int, ffi.Pointer<ffi.Uint8>, int)>();

  void ComputeCumulativeSumRow_C(
    ffi.Pointer<ffi.Uint8> row,
    ffi.Pointer<ffi.Int32> cumsum,
    ffi.Pointer<ffi.Int32> previous_cumsum,
    int width,
  ) {
    return _ComputeCumulativeSumRow_C(
      row,
      cumsum,
      previous_cumsum,
      width,
    );
  }

  late final _ComputeCumulativeSumRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, ffi.Int)>>('ComputeCumulativeSumRow_C');
  late final _ComputeCumulativeSumRow_C =
      _ComputeCumulativeSumRow_CPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, int)>();

  void ARGBAffineRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_argb_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Float> uv_dudv,
    int width,
  ) {
    return _ARGBAffineRow_C(
      src_argb,
      src_argb_stride,
      dst_argb,
      uv_dudv,
      width,
    );
  }

  late final _ARGBAffineRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('ARGBAffineRow_C');
  late final _ARGBAffineRow_C = _ARGBAffineRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Float>, int)>();

  void ARGBAffineRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_argb_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Float> src_dudv,
    int width,
  ) {
    return _ARGBAffineRow_SSE2(
      src_argb,
      src_argb_stride,
      dst_argb,
      src_dudv,
      width,
    );
  }

  late final _ARGBAffineRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('ARGBAffineRow_SSE2');
  late final _ARGBAffineRow_SSE2 = _ARGBAffineRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Float>, int)>();

  /// Used for I420Scale, ARGBScale, and ARGBInterpolate.
  void InterpolateRow_C(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_C(
      dst_ptr,
      src_ptr,
      src_stride,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_C');
  late final _InterpolateRow_C = _InterpolateRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_SSSE3(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int dst_width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_SSSE3(
      dst_ptr,
      src_ptr,
      src_stride,
      dst_width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_SSSE3');
  late final _InterpolateRow_SSSE3 = _InterpolateRow_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_AVX2(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int dst_width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_AVX2(
      dst_ptr,
      src_ptr,
      src_stride,
      dst_width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_AVX2');
  late final _InterpolateRow_AVX2 = _InterpolateRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_NEON(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int dst_width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_NEON(
      dst_ptr,
      src_ptr,
      src_stride,
      dst_width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_NEON');
  late final _InterpolateRow_NEON = _InterpolateRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_MSA(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_MSA(
      dst_ptr,
      src_ptr,
      src_stride,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_MSA');
  late final _InterpolateRow_MSA = _InterpolateRow_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_MMI(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_MMI(
      dst_ptr,
      src_ptr,
      src_stride,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_MMI');
  late final _InterpolateRow_MMI = _InterpolateRow_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_Any_NEON(
      dst_ptr,
      src_ptr,
      src_stride_ptr,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_Any_NEON');
  late final _InterpolateRow_Any_NEON = _InterpolateRow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_Any_SSSE3(
      dst_ptr,
      src_ptr,
      src_stride_ptr,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_Any_SSSE3');
  late final _InterpolateRow_Any_SSSE3 =
      _InterpolateRow_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_Any_AVX2(
      dst_ptr,
      src_ptr,
      src_stride_ptr,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_Any_AVX2');
  late final _InterpolateRow_Any_AVX2 = _InterpolateRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_Any_MSA(
      dst_ptr,
      src_ptr,
      src_stride_ptr,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_Any_MSA');
  late final _InterpolateRow_Any_MSA = _InterpolateRow_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride_ptr,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_Any_MMI(
      dst_ptr,
      src_ptr,
      src_stride_ptr,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_Any_MMI');
  late final _InterpolateRow_Any_MMI = _InterpolateRow_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void InterpolateRow_16_C(
    ffi.Pointer<ffi.Uint16> dst_ptr,
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    int width,
    int source_y_fraction,
  ) {
    return _InterpolateRow_16_C(
      dst_ptr,
      src_ptr,
      src_stride,
      width,
      source_y_fraction,
    );
  }

  late final _InterpolateRow_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ptrdiff_t, ffi.Int, ffi.Int)>>('InterpolateRow_16_C');
  late final _InterpolateRow_16_C = _InterpolateRow_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int, int)>();

  /// Sobel images.
  void SobelXRow_C(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> src_y2,
    ffi.Pointer<ffi.Uint8> dst_sobelx,
    int width,
  ) {
    return _SobelXRow_C(
      src_y0,
      src_y1,
      src_y2,
      dst_sobelx,
      width,
    );
  }

  late final _SobelXRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SobelXRow_C');
  late final _SobelXRow_C = _SobelXRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> src_y2,
    ffi.Pointer<ffi.Uint8> dst_sobelx,
    int width,
  ) {
    return _SobelXRow_SSE2(
      src_y0,
      src_y1,
      src_y2,
      dst_sobelx,
      width,
    );
  }

  late final _SobelXRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SobelXRow_SSE2');
  late final _SobelXRow_SSE2 = _SobelXRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> src_y2,
    ffi.Pointer<ffi.Uint8> dst_sobelx,
    int width,
  ) {
    return _SobelXRow_NEON(
      src_y0,
      src_y1,
      src_y2,
      dst_sobelx,
      width,
    );
  }

  late final _SobelXRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SobelXRow_NEON');
  late final _SobelXRow_NEON = _SobelXRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> src_y2,
    ffi.Pointer<ffi.Uint8> dst_sobelx,
    int width,
  ) {
    return _SobelXRow_MSA(
      src_y0,
      src_y1,
      src_y2,
      dst_sobelx,
      width,
    );
  }

  late final _SobelXRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SobelXRow_MSA');
  late final _SobelXRow_MSA = _SobelXRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> src_y2,
    ffi.Pointer<ffi.Uint8> dst_sobelx,
    int width,
  ) {
    return _SobelXRow_MMI(
      src_y0,
      src_y1,
      src_y2,
      dst_sobelx,
      width,
    );
  }

  late final _SobelXRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('SobelXRow_MMI');
  late final _SobelXRow_MMI = _SobelXRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void SobelYRow_C(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> dst_sobely,
    int width,
  ) {
    return _SobelYRow_C(
      src_y0,
      src_y1,
      dst_sobely,
      width,
    );
  }

  late final _SobelYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelYRow_C');
  late final _SobelYRow_C = _SobelYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelYRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> dst_sobely,
    int width,
  ) {
    return _SobelYRow_SSE2(
      src_y0,
      src_y1,
      dst_sobely,
      width,
    );
  }

  late final _SobelYRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelYRow_SSE2');
  late final _SobelYRow_SSE2 = _SobelYRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> dst_sobely,
    int width,
  ) {
    return _SobelYRow_NEON(
      src_y0,
      src_y1,
      dst_sobely,
      width,
    );
  }

  late final _SobelYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelYRow_NEON');
  late final _SobelYRow_NEON = _SobelYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> dst_sobely,
    int width,
  ) {
    return _SobelYRow_MSA(
      src_y0,
      src_y1,
      dst_sobely,
      width,
    );
  }

  late final _SobelYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelYRow_MSA');
  late final _SobelYRow_MSA = _SobelYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    ffi.Pointer<ffi.Uint8> dst_sobely,
    int width,
  ) {
    return _SobelYRow_MMI(
      src_y0,
      src_y1,
      dst_sobely,
      width,
    );
  }

  late final _SobelYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelYRow_MMI');
  late final _SobelYRow_MMI = _SobelYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_C(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelRow_C(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_C');
  late final _SobelRow_C = _SobelRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelRow_SSE2(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_SSE2');
  late final _SobelRow_SSE2 = _SobelRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_NEON(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelRow_NEON(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_NEON');
  late final _SobelRow_NEON = _SobelRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_MSA(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelRow_MSA(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_MSA');
  late final _SobelRow_MSA = _SobelRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_MMI(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelRow_MMI(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_MMI');
  late final _SobelRow_MMI = _SobelRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_C(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _SobelToPlaneRow_C(
      src_sobelx,
      src_sobely,
      dst_y,
      width,
    );
  }

  late final _SobelToPlaneRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_C');
  late final _SobelToPlaneRow_C = _SobelToPlaneRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _SobelToPlaneRow_SSE2(
      src_sobelx,
      src_sobely,
      dst_y,
      width,
    );
  }

  late final _SobelToPlaneRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_SSE2');
  late final _SobelToPlaneRow_SSE2 = _SobelToPlaneRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_NEON(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _SobelToPlaneRow_NEON(
      src_sobelx,
      src_sobely,
      dst_y,
      width,
    );
  }

  late final _SobelToPlaneRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_NEON');
  late final _SobelToPlaneRow_NEON = _SobelToPlaneRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_MSA(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _SobelToPlaneRow_MSA(
      src_sobelx,
      src_sobely,
      dst_y,
      width,
    );
  }

  late final _SobelToPlaneRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_MSA');
  late final _SobelToPlaneRow_MSA = _SobelToPlaneRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_MMI(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_y,
    int width,
  ) {
    return _SobelToPlaneRow_MMI(
      src_sobelx,
      src_sobely,
      dst_y,
      width,
    );
  }

  late final _SobelToPlaneRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_MMI');
  late final _SobelToPlaneRow_MMI = _SobelToPlaneRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_C(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelXYRow_C(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelXYRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_C');
  late final _SobelXYRow_C = _SobelXYRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelXYRow_SSE2(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelXYRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_SSE2');
  late final _SobelXYRow_SSE2 = _SobelXYRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_NEON(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelXYRow_NEON(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelXYRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_NEON');
  late final _SobelXYRow_NEON = _SobelXYRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_MSA(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelXYRow_MSA(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelXYRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_MSA');
  late final _SobelXYRow_MSA = _SobelXYRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_MMI(
    ffi.Pointer<ffi.Uint8> src_sobelx,
    ffi.Pointer<ffi.Uint8> src_sobely,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
  ) {
    return _SobelXYRow_MMI(
      src_sobelx,
      src_sobely,
      dst_argb,
      width,
    );
  }

  late final _SobelXYRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_MMI');
  late final _SobelXYRow_MMI = _SobelXYRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelRow_Any_SSE2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_Any_SSE2');
  late final _SobelRow_Any_SSE2 = _SobelRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_Any_NEON');
  late final _SobelRow_Any_NEON = _SobelRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_Any_MSA');
  late final _SobelRow_Any_MSA = _SobelRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelRow_Any_MMI');
  late final _SobelRow_Any_MMI = _SobelRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelToPlaneRow_Any_SSE2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelToPlaneRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_Any_SSE2');
  late final _SobelToPlaneRow_Any_SSE2 =
      _SobelToPlaneRow_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelToPlaneRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelToPlaneRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_Any_NEON');
  late final _SobelToPlaneRow_Any_NEON =
      _SobelToPlaneRow_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelToPlaneRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelToPlaneRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_Any_MSA');
  late final _SobelToPlaneRow_Any_MSA = _SobelToPlaneRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelToPlaneRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelToPlaneRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelToPlaneRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelToPlaneRow_Any_MMI');
  late final _SobelToPlaneRow_Any_MMI = _SobelToPlaneRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelXYRow_Any_SSE2(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelXYRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_Any_SSE2');
  late final _SobelXYRow_Any_SSE2 = _SobelXYRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelXYRow_Any_NEON(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelXYRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_Any_NEON');
  late final _SobelXYRow_Any_NEON = _SobelXYRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelXYRow_Any_MSA(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelXYRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_Any_MSA');
  late final _SobelXYRow_Any_MSA = _SobelXYRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void SobelXYRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int width,
  ) {
    return _SobelXYRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      width,
    );
  }

  late final _SobelXYRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('SobelXYRow_Any_MMI');
  late final _SobelXYRow_Any_MMI = _SobelXYRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBPolynomialRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Float> poly,
    int width,
  ) {
    return _ARGBPolynomialRow_C(
      src_argb,
      dst_argb,
      poly,
      width,
    );
  }

  late final _ARGBPolynomialRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Float>, ffi.Int)>>('ARGBPolynomialRow_C');
  late final _ARGBPolynomialRow_C = _ARGBPolynomialRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Float>, int)>();

  void ARGBPolynomialRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Float> poly,
    int width,
  ) {
    return _ARGBPolynomialRow_SSE2(
      src_argb,
      dst_argb,
      poly,
      width,
    );
  }

  late final _ARGBPolynomialRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Float>, ffi.Int)>>('ARGBPolynomialRow_SSE2');
  late final _ARGBPolynomialRow_SSE2 = _ARGBPolynomialRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Float>, int)>();

  void ARGBPolynomialRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Float> poly,
    int width,
  ) {
    return _ARGBPolynomialRow_AVX2(
      src_argb,
      dst_argb,
      poly,
      width,
    );
  }

  late final _ARGBPolynomialRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Float>, ffi.Int)>>('ARGBPolynomialRow_AVX2');
  late final _ARGBPolynomialRow_AVX2 = _ARGBPolynomialRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Float>, int)>();

  /// Scale and convert to half float.
  void HalfFloatRow_C(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloatRow_C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloatRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_C');
  late final _HalfFloatRow_C = _HalfFloatRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_SSE2(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloatRow_SSE2(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloatRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_SSE2');
  late final _HalfFloatRow_SSE2 = _HalfFloatRow_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_Any_SSE2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    double param,
    int width,
  ) {
    return _HalfFloatRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _HalfFloatRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_Any_SSE2');
  late final _HalfFloatRow_Any_SSE2 = _HalfFloatRow_Any_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_AVX2(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloatRow_AVX2(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloatRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_AVX2');
  late final _HalfFloatRow_AVX2 = _HalfFloatRow_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    double param,
    int width,
  ) {
    return _HalfFloatRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _HalfFloatRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_Any_AVX2');
  late final _HalfFloatRow_Any_AVX2 = _HalfFloatRow_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_F16C(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloatRow_F16C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloatRow_F16CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_F16C');
  late final _HalfFloatRow_F16C = _HalfFloatRow_F16CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_Any_F16C(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloatRow_Any_F16C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloatRow_Any_F16CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_Any_F16C');
  late final _HalfFloatRow_Any_F16C = _HalfFloatRow_Any_F16CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloat1Row_F16C(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloat1Row_F16C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloat1Row_F16CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloat1Row_F16C');
  late final _HalfFloat1Row_F16C = _HalfFloat1Row_F16CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloat1Row_Any_F16C(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloat1Row_Any_F16C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloat1Row_Any_F16CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloat1Row_Any_F16C');
  late final _HalfFloat1Row_Any_F16C = _HalfFloat1Row_Any_F16CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_NEON(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloatRow_NEON(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloatRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_NEON');
  late final _HalfFloatRow_NEON = _HalfFloatRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    double param,
    int width,
  ) {
    return _HalfFloatRow_Any_NEON(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _HalfFloatRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_Any_NEON');
  late final _HalfFloatRow_Any_NEON = _HalfFloatRow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloat1Row_NEON(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloat1Row_NEON(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloat1Row_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloat1Row_NEON');
  late final _HalfFloat1Row_NEON = _HalfFloat1Row_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloat1Row_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    double param,
    int width,
  ) {
    return _HalfFloat1Row_Any_NEON(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _HalfFloat1Row_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloat1Row_Any_NEON');
  late final _HalfFloat1Row_Any_NEON = _HalfFloat1Row_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_MSA(
    ffi.Pointer<ffi.Uint16> src,
    ffi.Pointer<ffi.Uint16> dst,
    double scale,
    int width,
  ) {
    return _HalfFloatRow_MSA(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _HalfFloatRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_MSA');
  late final _HalfFloatRow_MSA = _HalfFloatRow_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void HalfFloatRow_Any_MSA(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    double param,
    int width,
  ) {
    return _HalfFloatRow_Any_MSA(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _HalfFloatRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Float, ffi.Int)>>('HalfFloatRow_Any_MSA');
  late final _HalfFloatRow_Any_MSA = _HalfFloatRow_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, double, int)>();

  void ByteToFloatRow_C(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Float> dst,
    double scale,
    int width,
  ) {
    return _ByteToFloatRow_C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _ByteToFloatRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ByteToFloatRow_C');
  late final _ByteToFloatRow_C = _ByteToFloatRow_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>, double, int)>();

  void ByteToFloatRow_NEON(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Float> dst,
    double scale,
    int width,
  ) {
    return _ByteToFloatRow_NEON(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _ByteToFloatRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ByteToFloatRow_NEON');
  late final _ByteToFloatRow_NEON = _ByteToFloatRow_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>, double, int)>();

  void ByteToFloatRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Float> dst_ptr,
    double param,
    int width,
  ) {
    return _ByteToFloatRow_Any_NEON(
      src_ptr,
      dst_ptr,
      param,
      width,
    );
  }

  late final _ByteToFloatRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ByteToFloatRow_Any_NEON');
  late final _ByteToFloatRow_Any_NEON = _ByteToFloatRow_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>, double, int)>();

  void ARGBLumaColorTableRow_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
    ffi.Pointer<ffi.Uint8> luma,
    int lumacoeff,
  ) {
    return _ARGBLumaColorTableRow_C(
      src_argb,
      dst_argb,
      width,
      luma,
      lumacoeff,
    );
  }

  late final _ARGBLumaColorTableRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>>('ARGBLumaColorTableRow_C');
  late final _ARGBLumaColorTableRow_C = _ARGBLumaColorTableRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  void ARGBLumaColorTableRow_SSSE3(
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width,
    ffi.Pointer<ffi.Uint8> luma,
    int lumacoeff,
  ) {
    return _ARGBLumaColorTableRow_SSSE3(
      src_argb,
      dst_argb,
      width,
      luma,
      lumacoeff,
    );
  }

  late final _ARGBLumaColorTableRow_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>>('ARGBLumaColorTableRow_SSSE3');
  late final _ARGBLumaColorTableRow_SSSE3 =
      _ARGBLumaColorTableRow_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int)>();

  double ScaleMaxSamples_C(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Float> dst,
    double scale,
    int width,
  ) {
    return _ScaleMaxSamples_C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _ScaleMaxSamples_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ScaleMaxSamples_C');
  late final _ScaleMaxSamples_C = _ScaleMaxSamples_CPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, double, int)>();

  double ScaleMaxSamples_NEON(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Float> dst,
    double scale,
    int width,
  ) {
    return _ScaleMaxSamples_NEON(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _ScaleMaxSamples_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ScaleMaxSamples_NEON');
  late final _ScaleMaxSamples_NEON = _ScaleMaxSamples_NEONPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, double, int)>();

  double ScaleSumSamples_C(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Float> dst,
    double scale,
    int width,
  ) {
    return _ScaleSumSamples_C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _ScaleSumSamples_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ScaleSumSamples_C');
  late final _ScaleSumSamples_C = _ScaleSumSamples_CPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, double, int)>();

  double ScaleSumSamples_NEON(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Float> dst,
    double scale,
    int width,
  ) {
    return _ScaleSumSamples_NEON(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _ScaleSumSamples_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ScaleSumSamples_NEON');
  late final _ScaleSumSamples_NEON = _ScaleSumSamples_NEONPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, double, int)>();

  void ScaleSamples_C(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Float> dst,
    double scale,
    int width,
  ) {
    return _ScaleSamples_C(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _ScaleSamples_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ScaleSamples_C');
  late final _ScaleSamples_C = _ScaleSamples_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, double, int)>();

  void ScaleSamples_NEON(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Float> dst,
    double scale,
    int width,
  ) {
    return _ScaleSamples_NEON(
      src,
      dst,
      scale,
      width,
    );
  }

  late final _ScaleSamples_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ScaleSamples_NEON');
  late final _ScaleSamples_NEON = _ScaleSamples_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, double, int)>();

  void I210ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint16> src_y,
    ffi.Pointer<ffi.Uint16> src_u,
    ffi.Pointer<ffi.Uint16> src_v,
    ffi.Pointer<ffi.Uint8> rgb_buf,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToARGBRow_MMI(
      src_y,
      src_u,
      src_v,
      rgb_buf,
      yuvconstants,
      width,
    );
  }

  late final _I210ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToARGBRow_MMI');
  late final _I210ToARGBRow_MMI = _I210ToARGBRow_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGBARow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_MMI(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_MMI');
  late final _I422ToRGBARow_MMI = _I422ToRGBARow_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422AlphaToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> src_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_MMI(
      src_y,
      src_u,
      src_v,
      src_a,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_MMI');
  late final _I422AlphaToARGBRow_MMI = _I422AlphaToARGBRow_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB24Row_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_MMI(
      src_y,
      src_u,
      src_v,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_MMI');
  late final _I422ToRGB24Row_MMI = _I422ToRGB24Row_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB565Row_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_MMI(
      src_y,
      src_u,
      src_v,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_MMI');
  late final _I422ToRGB565Row_MMI = _I422ToRGB565Row_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_MMI(
      src_y,
      src_u,
      src_v,
      dst_argb4444,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_MMI');
  late final _I422ToARGB4444Row_MMI = _I422ToARGB4444Row_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB1555Row_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_u,
    ffi.Pointer<ffi.Uint8> src_v,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_MMI(
      src_y,
      src_u,
      src_v,
      dst_argb1555,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_MMI');
  late final _I422ToARGB1555Row_MMI = _I422ToARGB1555Row_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void NV12ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_MMI(
      src_y,
      src_uv,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_MMI');
  late final _NV12ToARGBRow_MMI = _NV12ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB565Row_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_MMI(
      src_y,
      src_uv,
      dst_rgb565,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_MMI');
  late final _NV12ToRGB565Row_MMI = _NV12ToRGB565Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_MMI(
      src_y,
      src_vu,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_MMI');
  late final _NV21ToARGBRow_MMI = _NV21ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_MMI(
      src_y,
      src_uv,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_MMI');
  late final _NV12ToRGB24Row_MMI = _NV12ToRGB24Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_MMI(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_MMI(
      src_y,
      src_vu,
      dst_rgb24,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_MMI');
  late final _NV21ToRGB24Row_MMI = _NV21ToRGB24Row_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_MMI(
      src_yuy2,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_MMI');
  late final _YUY2ToARGBRow_MMI = _YUY2ToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_MMI(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_MMI(
      src_uyvy,
      dst_argb,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_MMI');
  late final _UYVYToARGBRow_MMI = _UYVYToARGBRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void I210ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint16> y_buf,
    ffi.Pointer<ffi.Uint16> u_buf,
    ffi.Pointer<ffi.Uint16> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I210ToARGBRow_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I210ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I210ToARGBRow_Any_MMI');
  late final _I210ToARGBRow_Any_MMI = _I210ToARGBRow_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGBARow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGBARow_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGBARow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGBARow_Any_MMI');
  late final _I422ToRGBARow_Any_MMI = _I422ToRGBARow_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422AlphaToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> a_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422AlphaToARGBRow_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      a_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422AlphaToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422AlphaToARGBRow_Any_MMI');
  late final _I422AlphaToARGBRow_Any_MMI =
      _I422AlphaToARGBRow_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToRGB24Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB24Row_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB24Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB24Row_Any_MMI');
  late final _I422ToRGB24Row_Any_MMI = _I422ToRGB24Row_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToRGB565Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToRGB565Row_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToRGB565Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToRGB565Row_Any_MMI');
  late final _I422ToRGB565Row_Any_MMI = _I422ToRGB565Row_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>,
          int)>();

  void I422ToARGB4444Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB4444Row_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB4444Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB4444Row_Any_MMI');
  late final _I422ToARGB4444Row_Any_MMI =
      _I422ToARGB4444Row_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void I422ToARGB1555Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> u_buf,
    ffi.Pointer<ffi.Uint8> v_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _I422ToARGB1555Row_Any_MMI(
      y_buf,
      u_buf,
      v_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _I422ToARGB1555Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('I422ToARGB1555Row_Any_MMI');
  late final _I422ToARGB1555Row_Any_MMI =
      _I422ToARGB1555Row_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              int)>();

  void NV12ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToARGBRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToARGBRow_Any_MMI');
  late final _NV12ToARGBRow_Any_MMI = _NV12ToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB565Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB565Row_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB565Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB565Row_Any_MMI');
  late final _NV12ToRGB565Row_Any_MMI = _NV12ToRGB565Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToARGBRow_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToARGBRow_Any_MMI');
  late final _NV21ToARGBRow_Any_MMI = _NV21ToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV12ToRGB24Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV12ToRGB24Row_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV12ToRGB24Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV12ToRGB24Row_Any_MMI');
  late final _NV12ToRGB24Row_Any_MMI = _NV12ToRGB24Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void NV21ToRGB24Row_Any_MMI(
    ffi.Pointer<ffi.Uint8> y_buf,
    ffi.Pointer<ffi.Uint8> uv_buf,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _NV21ToRGB24Row_Any_MMI(
      y_buf,
      uv_buf,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _NV21ToRGB24Row_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>,
              ffi.Int)>>('NV21ToRGB24Row_Any_MMI');
  late final _NV21ToRGB24Row_Any_MMI = _NV21ToRGB24Row_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<YuvConstants>, int)>();

  void YUY2ToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _YUY2ToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _YUY2ToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('YUY2ToARGBRow_Any_MMI');
  late final _YUY2ToARGBRow_Any_MMI = _YUY2ToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void UYVYToARGBRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
  ) {
    return _UYVYToARGBRow_Any_MMI(
      src_ptr,
      dst_ptr,
      yuvconstants,
      width,
    );
  }

  late final _UYVYToARGBRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<YuvConstants>, ffi.Int)>>('UYVYToARGBRow_Any_MMI');
  late final _UYVYToARGBRow_Any_MMI = _UYVYToARGBRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<YuvConstants>, int)>();

  void GaussRow_F32_NEON(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Float> dst,
    int width,
  ) {
    return _GaussRow_F32_NEON(
      src,
      dst,
      width,
    );
  }

  late final _GaussRow_F32_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Int)>>('GaussRow_F32_NEON');
  late final _GaussRow_F32_NEON = _GaussRow_F32_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int)>();

  void GaussRow_F32_C(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Float> dst,
    int width,
  ) {
    return _GaussRow_F32_C(
      src,
      dst,
      width,
    );
  }

  late final _GaussRow_F32_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Int)>>('GaussRow_F32_C');
  late final _GaussRow_F32_C = _GaussRow_F32_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int)>();

  void GaussCol_F32_NEON(
    ffi.Pointer<ffi.Float> src0,
    ffi.Pointer<ffi.Float> src1,
    ffi.Pointer<ffi.Float> src2,
    ffi.Pointer<ffi.Float> src3,
    ffi.Pointer<ffi.Float> src4,
    ffi.Pointer<ffi.Float> dst,
    int width,
  ) {
    return _GaussCol_F32_NEON(
      src0,
      src1,
      src2,
      src3,
      src4,
      dst,
      width,
    );
  }

  late final _GaussCol_F32_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('GaussCol_F32_NEON');
  late final _GaussCol_F32_NEON = _GaussCol_F32_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int)>();

  void GaussCol_F32_C(
    ffi.Pointer<ffi.Float> src0,
    ffi.Pointer<ffi.Float> src1,
    ffi.Pointer<ffi.Float> src2,
    ffi.Pointer<ffi.Float> src3,
    ffi.Pointer<ffi.Float> src4,
    ffi.Pointer<ffi.Float> dst,
    int width,
  ) {
    return _GaussCol_F32_C(
      src0,
      src1,
      src2,
      src3,
      src4,
      dst,
      width,
    );
  }

  late final _GaussCol_F32_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('GaussCol_F32_C');
  late final _GaussCol_F32_C = _GaussCol_F32_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int)>();

  int ARGBScale(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _ARGBScale(
      src_argb,
      src_stride_argb,
      src_width,
      src_height,
      dst_argb,
      dst_stride_argb,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _ARGBScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('ARGBScale');
  late final _ARGBScale = _ARGBScalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  /// Clipped scale takes destination rectangle coordinates for clip values.
  int ARGBScaleClip(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int dst_width,
    int dst_height,
    int clip_x,
    int clip_y,
    int clip_width,
    int clip_height,
    int filtering,
  ) {
    return _ARGBScaleClip(
      src_argb,
      src_stride_argb,
      src_width,
      src_height,
      dst_argb,
      dst_stride_argb,
      dst_width,
      dst_height,
      clip_x,
      clip_y,
      clip_width,
      clip_height,
      filtering,
    );
  }

  late final _ARGBScaleClipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('ARGBScaleClip');
  late final _ARGBScaleClip = _ARGBScaleClipPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int, int, int, int, int)>();

  /// Scale with YUV conversion to ARGB and clipping.
  int YUVToARGBScaleClip(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    int src_fourcc,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int dst_fourcc,
    int dst_width,
    int dst_height,
    int clip_x,
    int clip_y,
    int clip_width,
    int clip_height,
    int filtering,
  ) {
    return _YUVToARGBScaleClip(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_fourcc,
      src_width,
      src_height,
      dst_argb,
      dst_stride_argb,
      dst_fourcc,
      dst_width,
      dst_height,
      clip_x,
      clip_y,
      clip_width,
      clip_height,
      filtering,
    );
  }

  late final _YUVToARGBScaleClipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Uint32,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Uint32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('YUVToARGBScaleClip');
  late final _YUVToARGBScaleClip = _YUVToARGBScaleClipPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int)>();

  /// Scale ARGB vertically with bilinear interpolation.
  void ScalePlaneVertical(
    int src_height,
    int dst_width,
    int dst_height,
    int src_stride,
    int dst_stride,
    ffi.Pointer<ffi.Uint8> src_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int x,
    int y,
    int dy,
    int bpp,
    int filtering,
  ) {
    return _ScalePlaneVertical(
      src_height,
      dst_width,
      dst_height,
      src_stride,
      dst_stride,
      src_argb,
      dst_argb,
      x,
      y,
      dy,
      bpp,
      filtering,
    );
  }

  late final _ScalePlaneVerticalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('ScalePlaneVertical');
  late final _ScalePlaneVertical = _ScalePlaneVerticalPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int, int, int, int, int)>();

  void ScalePlaneVertical_16(
    int src_height,
    int dst_width,
    int dst_height,
    int src_stride,
    int dst_stride,
    ffi.Pointer<ffi.Uint16> src_argb,
    ffi.Pointer<ffi.Uint16> dst_argb,
    int x,
    int y,
    int dy,
    int wpp,
    int filtering,
  ) {
    return _ScalePlaneVertical_16(
      src_height,
      dst_width,
      dst_height,
      src_stride,
      dst_stride,
      src_argb,
      dst_argb,
      x,
      y,
      dy,
      wpp,
      filtering,
    );
  }

  late final _ScalePlaneVertical_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('ScalePlaneVertical_16');
  late final _ScalePlaneVertical_16 = _ScalePlaneVertical_16Ptr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int, int, int, int)>();

  /// Simplify the filtering based on scale factors.
  int ScaleFilterReduce(
    int src_width,
    int src_height,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _ScaleFilterReduce(
      src_width,
      src_height,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _ScaleFilterReducePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int32)>>('ScaleFilterReduce');
  late final _ScaleFilterReduce =
      _ScaleFilterReducePtr.asFunction<int Function(int, int, int, int, int)>();

  /// Divide num by div and return as 16.16 fixed point result.
  int FixedDiv_C(
    int num,
    int div,
  ) {
    return _FixedDiv_C(
      num,
      div,
    );
  }

  late final _FixedDiv_CPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'FixedDiv_C');
  late final _FixedDiv_C = _FixedDiv_CPtr.asFunction<int Function(int, int)>();

  int FixedDiv_X86(
    int num,
    int div,
  ) {
    return _FixedDiv_X86(
      num,
      div,
    );
  }

  late final _FixedDiv_X86Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'FixedDiv_X86');
  late final _FixedDiv_X86 =
      _FixedDiv_X86Ptr.asFunction<int Function(int, int)>();

  int FixedDiv_MIPS(
    int num,
    int div,
  ) {
    return _FixedDiv_MIPS(
      num,
      div,
    );
  }

  late final _FixedDiv_MIPSPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'FixedDiv_MIPS');
  late final _FixedDiv_MIPS =
      _FixedDiv_MIPSPtr.asFunction<int Function(int, int)>();

  /// Divide num - 1 by div - 1 and return as 16.16 fixed point result.
  int FixedDiv1_C(
    int num,
    int div,
  ) {
    return _FixedDiv1_C(
      num,
      div,
    );
  }

  late final _FixedDiv1_CPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'FixedDiv1_C');
  late final _FixedDiv1_C =
      _FixedDiv1_CPtr.asFunction<int Function(int, int)>();

  int FixedDiv1_X86(
    int num,
    int div,
  ) {
    return _FixedDiv1_X86(
      num,
      div,
    );
  }

  late final _FixedDiv1_X86Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'FixedDiv1_X86');
  late final _FixedDiv1_X86 =
      _FixedDiv1_X86Ptr.asFunction<int Function(int, int)>();

  int FixedDiv1_MIPS(
    int num,
    int div,
  ) {
    return _FixedDiv1_MIPS(
      num,
      div,
    );
  }

  late final _FixedDiv1_MIPSPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'FixedDiv1_MIPS');
  late final _FixedDiv1_MIPS =
      _FixedDiv1_MIPSPtr.asFunction<int Function(int, int)>();

  /// Compute slope values for stepping.
  void ScaleSlope(
    int src_width,
    int src_height,
    int dst_width,
    int dst_height,
    int filtering,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> dx,
    ffi.Pointer<ffi.Int> dy,
  ) {
    return _ScaleSlope(
      src_width,
      src_height,
      dst_width,
      dst_height,
      filtering,
      x,
      y,
      dx,
      dy,
    );
  }

  late final _ScaleSlopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ScaleSlope');
  late final _ScaleSlope = _ScaleSlopePtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void ScaleRowDown2_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_C');
  late final _ScaleRowDown2_C = _ScaleRowDown2_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2_16_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown2_16_C');
  late final _ScaleRowDown2_16_C = _ScaleRowDown2_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown2Linear_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Linear_C');
  late final _ScaleRowDown2Linear_C = _ScaleRowDown2Linear_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_16_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown2Linear_16_C');
  late final _ScaleRowDown2Linear_16_C =
      _ScaleRowDown2Linear_16_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown2Box_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_C');
  late final _ScaleRowDown2Box_C = _ScaleRowDown2Box_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Odd_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Odd_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Odd_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Odd_C');
  late final _ScaleRowDown2Box_Odd_C = _ScaleRowDown2Box_Odd_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_16_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown2Box_16_C');
  late final _ScaleRowDown2Box_16_C = _ScaleRowDown2Box_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown4_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_C');
  late final _ScaleRowDown4_C = _ScaleRowDown4_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4_16_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown4_16_C');
  late final _ScaleRowDown4_16_C = _ScaleRowDown4_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown4Box_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_C');
  late final _ScaleRowDown4Box_C = _ScaleRowDown4Box_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_16_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown4Box_16_C');
  late final _ScaleRowDown4Box_16_C = _ScaleRowDown4Box_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown34_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown34_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown34_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_C');
  late final _ScaleRowDown34_C = _ScaleRowDown34_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown34_16_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown34_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown34_16_C');
  late final _ScaleRowDown34_16_C = _ScaleRowDown34_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown34_0_Box_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> d,
    int dst_width,
  ) {
    return _ScaleRowDown34_0_Box_C(
      src_ptr,
      src_stride,
      d,
      dst_width,
    );
  }

  late final _ScaleRowDown34_0_Box_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_0_Box_C');
  late final _ScaleRowDown34_0_Box_C = _ScaleRowDown34_0_Box_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_0_Box_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> d,
    int dst_width,
  ) {
    return _ScaleRowDown34_0_Box_16_C(
      src_ptr,
      src_stride,
      d,
      dst_width,
    );
  }

  late final _ScaleRowDown34_0_Box_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown34_0_Box_16_C');
  late final _ScaleRowDown34_0_Box_16_C =
      _ScaleRowDown34_0_Box_16_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown34_1_Box_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> d,
    int dst_width,
  ) {
    return _ScaleRowDown34_1_Box_C(
      src_ptr,
      src_stride,
      d,
      dst_width,
    );
  }

  late final _ScaleRowDown34_1_Box_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_1_Box_C');
  late final _ScaleRowDown34_1_Box_C = _ScaleRowDown34_1_Box_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_1_Box_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> d,
    int dst_width,
  ) {
    return _ScaleRowDown34_1_Box_16_C(
      src_ptr,
      src_stride,
      d,
      dst_width,
    );
  }

  late final _ScaleRowDown34_1_Box_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown34_1_Box_16_C');
  late final _ScaleRowDown34_1_Box_16_C =
      _ScaleRowDown34_1_Box_16_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Linear_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_C(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_C');
  late final _ScaleRowUp2_Linear_C = _ScaleRowUp2_Linear_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_C');
  late final _ScaleRowUp2_Bilinear_C = _ScaleRowUp2_Bilinear_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_16_C(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_16_C');
  late final _ScaleRowUp2_Linear_16_C = _ScaleRowUp2_Linear_16_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_16_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_16_C');
  late final _ScaleRowUp2_Bilinear_16_C =
      _ScaleRowUp2_Bilinear_16_CPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_Any_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_Any_C(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_Any_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_Any_C');
  late final _ScaleRowUp2_Linear_Any_C =
      _ScaleRowUp2_Linear_Any_CPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_Any_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_Any_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_Any_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_Any_C');
  late final _ScaleRowUp2_Bilinear_Any_C =
      _ScaleRowUp2_Bilinear_Any_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_16_Any_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_16_Any_C(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_16_Any_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_16_Any_C');
  late final _ScaleRowUp2_Linear_16_Any_C =
      _ScaleRowUp2_Linear_16_Any_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_16_Any_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_16_Any_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_16_Any_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_16_Any_C');
  late final _ScaleRowUp2_Bilinear_16_Any_C =
      _ScaleRowUp2_Bilinear_16_Any_CPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleCols_C(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleCols_C(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleCols_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleCols_C');
  late final _ScaleCols_C = _ScaleCols_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleCols_16_C(
    ffi.Pointer<ffi.Uint16> dst_ptr,
    ffi.Pointer<ffi.Uint16> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleCols_16_C(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleCols_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleCols_16_C');
  late final _ScaleCols_16_C = _ScaleCols_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int, int)>();

  void ScaleColsUp2_C(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int arg3,
    int arg4,
  ) {
    return _ScaleColsUp2_C(
      dst_ptr,
      src_ptr,
      dst_width,
      arg3,
      arg4,
    );
  }

  late final _ScaleColsUp2_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleColsUp2_C');
  late final _ScaleColsUp2_C = _ScaleColsUp2_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleColsUp2_16_C(
    ffi.Pointer<ffi.Uint16> dst_ptr,
    ffi.Pointer<ffi.Uint16> src_ptr,
    int dst_width,
    int arg3,
    int arg4,
  ) {
    return _ScaleColsUp2_16_C(
      dst_ptr,
      src_ptr,
      dst_width,
      arg3,
      arg4,
    );
  }

  late final _ScaleColsUp2_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleColsUp2_16_C');
  late final _ScaleColsUp2_16_C = _ScaleColsUp2_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int, int)>();

  void ScaleFilterCols_C(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleFilterCols_C(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleFilterCols_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols_C');
  late final _ScaleFilterCols_C = _ScaleFilterCols_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleFilterCols_16_C(
    ffi.Pointer<ffi.Uint16> dst_ptr,
    ffi.Pointer<ffi.Uint16> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleFilterCols_16_C(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleFilterCols_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols_16_C');
  late final _ScaleFilterCols_16_C = _ScaleFilterCols_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int, int)>();

  void ScaleFilterCols64_C(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x32,
    int dx,
  ) {
    return _ScaleFilterCols64_C(
      dst_ptr,
      src_ptr,
      dst_width,
      x32,
      dx,
    );
  }

  late final _ScaleFilterCols64_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols64_C');
  late final _ScaleFilterCols64_C = _ScaleFilterCols64_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleFilterCols64_16_C(
    ffi.Pointer<ffi.Uint16> dst_ptr,
    ffi.Pointer<ffi.Uint16> src_ptr,
    int dst_width,
    int x32,
    int dx,
  ) {
    return _ScaleFilterCols64_16_C(
      dst_ptr,
      src_ptr,
      dst_width,
      x32,
      dx,
    );
  }

  late final _ScaleFilterCols64_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols64_16_C');
  late final _ScaleFilterCols64_16_C = _ScaleFilterCols64_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int, int)>();

  void ScaleRowDown38_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown38_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown38_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_C');
  late final _ScaleRowDown38_C = _ScaleRowDown38_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown38_16_C(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown38_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown38_16_C');
  late final _ScaleRowDown38_16_C = _ScaleRowDown38_16_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown38_3_Box_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_3_Box_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_3_Box_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_3_Box_C');
  late final _ScaleRowDown38_3_Box_C = _ScaleRowDown38_3_Box_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_3_Box_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_3_Box_16_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_3_Box_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown38_3_Box_16_C');
  late final _ScaleRowDown38_3_Box_16_C =
      _ScaleRowDown38_3_Box_16_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown38_2_Box_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_2_Box_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_2_Box_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_2_Box_C');
  late final _ScaleRowDown38_2_Box_C = _ScaleRowDown38_2_Box_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_2_Box_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_2_Box_16_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_2_Box_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown38_2_Box_16_C');
  late final _ScaleRowDown38_2_Box_16_C =
      _ScaleRowDown38_2_Box_16_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleAddRow_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_C(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_C');
  late final _ScaleAddRow_C = _ScaleAddRow_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleAddRow_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint32> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_16_C(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint32>,
              ffi.Int)>>('ScaleAddRow_16_C');
  late final _ScaleAddRow_16_C = _ScaleAddRow_16_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint32>, int)>();

  void ScaleARGBRowDown2_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_C(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_C');
  late final _ScaleARGBRowDown2_C = _ScaleARGBRowDown2_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_C(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2Linear_C');
  late final _ScaleARGBRowDown2Linear_C =
      _ScaleARGBRowDown2Linear_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_C(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2Box_C');
  late final _ScaleARGBRowDown2Box_C = _ScaleARGBRowDown2Box_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_C(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDownEven_C');
  late final _ScaleARGBRowDownEven_C = _ScaleARGBRowDownEven_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_C(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_C(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDownEvenBox_C');
  late final _ScaleARGBRowDownEvenBox_C =
      _ScaleARGBRowDownEvenBox_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBCols_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBCols_C(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBCols_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols_C');
  late final _ScaleARGBCols_C = _ScaleARGBCols_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBCols64_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x32,
    int dx,
  ) {
    return _ScaleARGBCols64_C(
      dst_argb,
      src_argb,
      dst_width,
      x32,
      dx,
    );
  }

  late final _ScaleARGBCols64_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols64_C');
  late final _ScaleARGBCols64_C = _ScaleARGBCols64_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBColsUp2_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int arg3,
    int arg4,
  ) {
    return _ScaleARGBColsUp2_C(
      dst_argb,
      src_argb,
      dst_width,
      arg3,
      arg4,
    );
  }

  late final _ScaleARGBColsUp2_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBColsUp2_C');
  late final _ScaleARGBColsUp2_C = _ScaleARGBColsUp2_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBFilterCols_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBFilterCols_C(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBFilterCols_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBFilterCols_C');
  late final _ScaleARGBFilterCols_C = _ScaleARGBFilterCols_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBFilterCols64_C(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x32,
    int dx,
  ) {
    return _ScaleARGBFilterCols64_C(
      dst_argb,
      src_argb,
      dst_width,
      x32,
      dx,
    );
  }

  late final _ScaleARGBFilterCols64_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBFilterCols64_C');
  late final _ScaleARGBFilterCols64_C = _ScaleARGBFilterCols64_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleUVRowDown2_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_C(
      src_uv,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_C');
  late final _ScaleUVRowDown2_C = _ScaleUVRowDown2_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_C(
      src_uv,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Linear_C');
  late final _ScaleUVRowDown2Linear_C = _ScaleUVRowDown2Linear_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_C(
      src_uv,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_C');
  late final _ScaleUVRowDown2Box_C = _ScaleUVRowDown2Box_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_C(
      src_uv,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEven_C');
  late final _ScaleUVRowDownEven_C = _ScaleUVRowDownEven_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_C(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_C(
      src_uv,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEvenBox_C');
  late final _ScaleUVRowDownEvenBox_C = _ScaleUVRowDownEvenBox_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Linear_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_C(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_C');
  late final _ScaleUVRowUp2_Linear_C = _ScaleUVRowUp2_Linear_CPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Bilinear_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_C');
  late final _ScaleUVRowUp2_Bilinear_C =
      _ScaleUVRowUp2_Bilinear_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleUVRowUp2_Linear_Any_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_Any_C(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_Any_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_Any_C');
  late final _ScaleUVRowUp2_Linear_Any_C =
      _ScaleUVRowUp2_Linear_Any_CPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Bilinear_Any_C(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_Any_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_Any_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_Any_C');
  late final _ScaleUVRowUp2_Bilinear_Any_C =
      _ScaleUVRowUp2_Bilinear_Any_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleUVRowUp2_Linear_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_16_C(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_16_C');
  late final _ScaleUVRowUp2_Linear_16_C =
      _ScaleUVRowUp2_Linear_16_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleUVRowUp2_Bilinear_16_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_16_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_16_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_16_C');
  late final _ScaleUVRowUp2_Bilinear_16_C =
      _ScaleUVRowUp2_Bilinear_16_CPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleUVRowUp2_Linear_16_Any_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_16_Any_C(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_16_Any_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_16_Any_C');
  late final _ScaleUVRowUp2_Linear_16_Any_C =
      _ScaleUVRowUp2_Linear_16_Any_CPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleUVRowUp2_Bilinear_16_Any_C(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_16_Any_C(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_16_Any_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_16_Any_C');
  late final _ScaleUVRowUp2_Bilinear_16_Any_C =
      _ScaleUVRowUp2_Bilinear_16_Any_CPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleUVCols_C(
    ffi.Pointer<ffi.Uint8> dst_uv,
    ffi.Pointer<ffi.Uint8> src_uv,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleUVCols_C(
      dst_uv,
      src_uv,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleUVCols_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleUVCols_C');
  late final _ScaleUVCols_C = _ScaleUVCols_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleUVCols64_C(
    ffi.Pointer<ffi.Uint8> dst_uv,
    ffi.Pointer<ffi.Uint8> src_uv,
    int dst_width,
    int x32,
    int dx,
  ) {
    return _ScaleUVCols64_C(
      dst_uv,
      src_uv,
      dst_width,
      x32,
      dx,
    );
  }

  late final _ScaleUVCols64_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleUVCols64_C');
  late final _ScaleUVCols64_C = _ScaleUVCols64_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleUVColsUp2_C(
    ffi.Pointer<ffi.Uint8> dst_uv,
    ffi.Pointer<ffi.Uint8> src_uv,
    int dst_width,
    int arg3,
    int arg4,
  ) {
    return _ScaleUVColsUp2_C(
      dst_uv,
      src_uv,
      dst_width,
      arg3,
      arg4,
    );
  }

  late final _ScaleUVColsUp2_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleUVColsUp2_C');
  late final _ScaleUVColsUp2_C = _ScaleUVColsUp2_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleUVFilterCols_C(
    ffi.Pointer<ffi.Uint8> dst_uv,
    ffi.Pointer<ffi.Uint8> src_uv,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleUVFilterCols_C(
      dst_uv,
      src_uv,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleUVFilterCols_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleUVFilterCols_C');
  late final _ScaleUVFilterCols_C = _ScaleUVFilterCols_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleUVFilterCols64_C(
    ffi.Pointer<ffi.Uint8> dst_uv,
    ffi.Pointer<ffi.Uint8> src_uv,
    int dst_width,
    int x32,
    int dx,
  ) {
    return _ScaleUVFilterCols64_C(
      dst_uv,
      src_uv,
      dst_width,
      x32,
      dx,
    );
  }

  late final _ScaleUVFilterCols64_CPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleUVFilterCols64_C');
  late final _ScaleUVFilterCols64_C = _ScaleUVFilterCols64_CPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Specialized scalers for x86.
  void ScaleRowDown2_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_SSSE3');
  late final _ScaleRowDown2_SSSE3 = _ScaleRowDown2_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Linear_SSSE3');
  late final _ScaleRowDown2Linear_SSSE3 =
      _ScaleRowDown2Linear_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_SSSE3');
  late final _ScaleRowDown2Box_SSSE3 = _ScaleRowDown2Box_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_AVX2');
  late final _ScaleRowDown2_AVX2 = _ScaleRowDown2_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Linear_AVX2');
  late final _ScaleRowDown2Linear_AVX2 =
      _ScaleRowDown2Linear_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_AVX2');
  late final _ScaleRowDown2Box_AVX2 = _ScaleRowDown2Box_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_SSSE3');
  late final _ScaleRowDown4_SSSE3 = _ScaleRowDown4_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_SSSE3');
  late final _ScaleRowDown4Box_SSSE3 = _ScaleRowDown4Box_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_AVX2');
  late final _ScaleRowDown4_AVX2 = _ScaleRowDown4_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_AVX2');
  late final _ScaleRowDown4Box_AVX2 = _ScaleRowDown4Box_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_SSSE3');
  late final _ScaleRowDown34_SSSE3 = _ScaleRowDown34_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_1_Box_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_1_Box_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_1_Box_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_1_Box_SSSE3');
  late final _ScaleRowDown34_1_Box_SSSE3 =
      _ScaleRowDown34_1_Box_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_0_Box_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_0_Box_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_0_Box_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_0_Box_SSSE3');
  late final _ScaleRowDown34_0_Box_SSSE3 =
      _ScaleRowDown34_0_Box_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_SSSE3');
  late final _ScaleRowDown38_SSSE3 = _ScaleRowDown38_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_3_Box_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_3_Box_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_3_Box_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_3_Box_SSSE3');
  late final _ScaleRowDown38_3_Box_SSSE3 =
      _ScaleRowDown38_3_Box_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_2_Box_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_2_Box_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_2_Box_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_2_Box_SSSE3');
  late final _ScaleRowDown38_2_Box_SSSE3 =
      _ScaleRowDown38_2_Box_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Linear_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_SSE2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_SSE2');
  late final _ScaleRowUp2_Linear_SSE2 = _ScaleRowUp2_Linear_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_SSE2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_SSE2');
  late final _ScaleRowUp2_Bilinear_SSE2 =
      _ScaleRowUp2_Bilinear_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_12_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_12_SSSE3(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_12_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_12_SSSE3');
  late final _ScaleRowUp2_Linear_12_SSSE3 =
      _ScaleRowUp2_Linear_12_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_12_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_12_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_12_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_12_SSSE3');
  late final _ScaleRowUp2_Bilinear_12_SSSE3 =
      _ScaleRowUp2_Bilinear_12_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_16_SSE2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_16_SSE2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_16_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_16_SSE2');
  late final _ScaleRowUp2_Linear_16_SSE2 =
      _ScaleRowUp2_Linear_16_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_16_SSE2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_16_SSE2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_16_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_16_SSE2');
  late final _ScaleRowUp2_Bilinear_16_SSE2 =
      _ScaleRowUp2_Bilinear_16_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_SSSE3(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_SSSE3');
  late final _ScaleRowUp2_Linear_SSSE3 =
      _ScaleRowUp2_Linear_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_SSSE3');
  late final _ScaleRowUp2_Bilinear_SSSE3 =
      _ScaleRowUp2_Bilinear_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_AVX2');
  late final _ScaleRowUp2_Linear_AVX2 = _ScaleRowUp2_Linear_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_AVX2');
  late final _ScaleRowUp2_Bilinear_AVX2 =
      _ScaleRowUp2_Bilinear_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_12_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_12_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_12_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_12_AVX2');
  late final _ScaleRowUp2_Linear_12_AVX2 =
      _ScaleRowUp2_Linear_12_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_12_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_12_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_12_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_12_AVX2');
  late final _ScaleRowUp2_Bilinear_12_AVX2 =
      _ScaleRowUp2_Bilinear_12_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_16_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_16_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_16_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_16_AVX2');
  late final _ScaleRowUp2_Linear_16_AVX2 =
      _ScaleRowUp2_Linear_16_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_16_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_16_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_16_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_16_AVX2');
  late final _ScaleRowUp2_Bilinear_16_AVX2 =
      _ScaleRowUp2_Bilinear_16_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_Any_SSE2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_Any_SSE2');
  late final _ScaleRowUp2_Linear_Any_SSE2 =
      _ScaleRowUp2_Linear_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_Any_SSE2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_Any_SSE2');
  late final _ScaleRowUp2_Bilinear_Any_SSE2 =
      _ScaleRowUp2_Bilinear_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_12_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_12_Any_SSSE3(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_12_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_12_Any_SSSE3');
  late final _ScaleRowUp2_Linear_12_Any_SSSE3 =
      _ScaleRowUp2_Linear_12_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_12_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_12_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_12_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_12_Any_SSSE3');
  late final _ScaleRowUp2_Bilinear_12_Any_SSSE3 =
      _ScaleRowUp2_Bilinear_12_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_16_Any_SSE2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_16_Any_SSE2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_16_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_16_Any_SSE2');
  late final _ScaleRowUp2_Linear_16_Any_SSE2 =
      _ScaleRowUp2_Linear_16_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_16_Any_SSSE3(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_16_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_16_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_16_Any_SSSE3');
  late final _ScaleRowUp2_Bilinear_16_Any_SSSE3 =
      _ScaleRowUp2_Bilinear_16_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_Any_SSSE3(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_Any_SSSE3');
  late final _ScaleRowUp2_Linear_Any_SSSE3 =
      _ScaleRowUp2_Linear_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_Any_SSSE3');
  late final _ScaleRowUp2_Bilinear_Any_SSSE3 =
      _ScaleRowUp2_Bilinear_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_Any_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_Any_AVX2');
  late final _ScaleRowUp2_Linear_Any_AVX2 =
      _ScaleRowUp2_Linear_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_Any_AVX2');
  late final _ScaleRowUp2_Bilinear_Any_AVX2 =
      _ScaleRowUp2_Bilinear_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_12_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_12_Any_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_12_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_12_Any_AVX2');
  late final _ScaleRowUp2_Linear_12_Any_AVX2 =
      _ScaleRowUp2_Linear_12_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_12_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_12_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_12_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_12_Any_AVX2');
  late final _ScaleRowUp2_Bilinear_12_Any_AVX2 =
      _ScaleRowUp2_Bilinear_12_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_16_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_16_Any_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_16_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_16_Any_AVX2');
  late final _ScaleRowUp2_Linear_16_Any_AVX2 =
      _ScaleRowUp2_Linear_16_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_16_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_16_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_16_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_16_Any_AVX2');
  late final _ScaleRowUp2_Bilinear_16_Any_AVX2 =
      _ScaleRowUp2_Bilinear_16_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowDown2_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_Any_SSSE3');
  late final _ScaleRowDown2_Any_SSSE3 = _ScaleRowDown2_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown2Linear_Any_SSSE3');
  late final _ScaleRowDown2Linear_Any_SSSE3 =
      _ScaleRowDown2Linear_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Any_SSSE3');
  late final _ScaleRowDown2Box_Any_SSSE3 =
      _ScaleRowDown2Box_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Odd_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Odd_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Odd_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Odd_SSSE3');
  late final _ScaleRowDown2Box_Odd_SSSE3 =
      _ScaleRowDown2Box_Odd_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_Any_AVX2');
  late final _ScaleRowDown2_Any_AVX2 = _ScaleRowDown2_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown2Linear_Any_AVX2');
  late final _ScaleRowDown2Linear_Any_AVX2 =
      _ScaleRowDown2Linear_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Any_AVX2');
  late final _ScaleRowDown2Box_Any_AVX2 =
      _ScaleRowDown2Box_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Odd_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Odd_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Odd_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Odd_AVX2');
  late final _ScaleRowDown2Box_Odd_AVX2 =
      _ScaleRowDown2Box_Odd_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_Any_SSSE3');
  late final _ScaleRowDown4_Any_SSSE3 = _ScaleRowDown4_Any_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_Any_SSSE3');
  late final _ScaleRowDown4Box_Any_SSSE3 =
      _ScaleRowDown4Box_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_Any_AVX2');
  late final _ScaleRowDown4_Any_AVX2 = _ScaleRowDown4_Any_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_Any_AVX2');
  late final _ScaleRowDown4Box_Any_AVX2 =
      _ScaleRowDown4Box_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_Any_SSSE3');
  late final _ScaleRowDown34_Any_SSSE3 =
      _ScaleRowDown34_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_1_Box_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_1_Box_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_1_Box_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown34_1_Box_Any_SSSE3');
  late final _ScaleRowDown34_1_Box_Any_SSSE3 =
      _ScaleRowDown34_1_Box_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_0_Box_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_0_Box_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_0_Box_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown34_0_Box_Any_SSSE3');
  late final _ScaleRowDown34_0_Box_Any_SSSE3 =
      _ScaleRowDown34_0_Box_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_Any_SSSE3');
  late final _ScaleRowDown38_Any_SSSE3 =
      _ScaleRowDown38_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_3_Box_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_3_Box_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_3_Box_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown38_3_Box_Any_SSSE3');
  late final _ScaleRowDown38_3_Box_Any_SSSE3 =
      _ScaleRowDown38_3_Box_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_2_Box_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_2_Box_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_2_Box_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown38_2_Box_Any_SSSE3');
  late final _ScaleRowDown38_2_Box_Any_SSSE3 =
      _ScaleRowDown38_2_Box_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleAddRow_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_SSE2(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_SSE2');
  late final _ScaleAddRow_SSE2 = _ScaleAddRow_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleAddRow_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_AVX2(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_AVX2');
  late final _ScaleAddRow_AVX2 = _ScaleAddRow_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleAddRow_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_Any_SSE2(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_Any_SSE2');
  late final _ScaleAddRow_Any_SSE2 = _ScaleAddRow_Any_SSE2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleAddRow_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_Any_AVX2(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_Any_AVX2');
  late final _ScaleAddRow_Any_AVX2 = _ScaleAddRow_Any_AVX2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleFilterCols_SSSE3(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleFilterCols_SSSE3(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleFilterCols_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols_SSSE3');
  late final _ScaleFilterCols_SSSE3 = _ScaleFilterCols_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleColsUp2_SSE2(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleColsUp2_SSE2(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleColsUp2_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleColsUp2_SSE2');
  late final _ScaleColsUp2_SSE2 = _ScaleColsUp2_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// ARGB Column functions
  void ScaleARGBCols_SSE2(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBCols_SSE2(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBCols_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols_SSE2');
  late final _ScaleARGBCols_SSE2 = _ScaleARGBCols_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBFilterCols_SSSE3(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBFilterCols_SSSE3(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBFilterCols_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBFilterCols_SSSE3');
  late final _ScaleARGBFilterCols_SSSE3 =
      _ScaleARGBFilterCols_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBColsUp2_SSE2(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBColsUp2_SSE2(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBColsUp2_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBColsUp2_SSE2');
  late final _ScaleARGBColsUp2_SSE2 = _ScaleARGBColsUp2_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBFilterCols_NEON(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBFilterCols_NEON(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBFilterCols_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBFilterCols_NEON');
  late final _ScaleARGBFilterCols_NEON =
      _ScaleARGBFilterCols_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBCols_NEON(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBCols_NEON(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBCols_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols_NEON');
  late final _ScaleARGBCols_NEON = _ScaleARGBCols_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBFilterCols_Any_NEON(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBFilterCols_Any_NEON(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBFilterCols_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBFilterCols_Any_NEON');
  late final _ScaleARGBFilterCols_Any_NEON =
      _ScaleARGBFilterCols_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBCols_Any_NEON(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBCols_Any_NEON(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBCols_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols_Any_NEON');
  late final _ScaleARGBCols_Any_NEON = _ScaleARGBCols_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBFilterCols_MSA(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBFilterCols_MSA(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBFilterCols_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBFilterCols_MSA');
  late final _ScaleARGBFilterCols_MSA = _ScaleARGBFilterCols_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBCols_MSA(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBCols_MSA(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBCols_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols_MSA');
  late final _ScaleARGBCols_MSA = _ScaleARGBCols_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBFilterCols_Any_MSA(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBFilterCols_Any_MSA(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBFilterCols_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBFilterCols_Any_MSA');
  late final _ScaleARGBFilterCols_Any_MSA =
      _ScaleARGBFilterCols_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBCols_Any_MSA(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBCols_Any_MSA(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBCols_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols_Any_MSA');
  late final _ScaleARGBCols_Any_MSA = _ScaleARGBCols_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBCols_MMI(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBCols_MMI(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBCols_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols_MMI');
  late final _ScaleARGBCols_MMI = _ScaleARGBCols_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleARGBCols_Any_MMI(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBCols_Any_MMI(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBCols_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBCols_Any_MMI');
  late final _ScaleARGBCols_Any_MMI = _ScaleARGBCols_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// ARGB Row functions
  void ScaleARGBRowDown2_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_SSE2(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_SSE2');
  late final _ScaleARGBRowDown2_SSE2 = _ScaleARGBRowDown2_SSE2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_SSE2(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Linear_SSE2');
  late final _ScaleARGBRowDown2Linear_SSE2 =
      _ScaleARGBRowDown2Linear_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_SSE2(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2Box_SSE2');
  late final _ScaleARGBRowDown2Box_SSE2 =
      _ScaleARGBRowDown2Box_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_NEON(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_NEON');
  late final _ScaleARGBRowDown2_NEON = _ScaleARGBRowDown2_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_NEON(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Linear_NEON');
  late final _ScaleARGBRowDown2Linear_NEON =
      _ScaleARGBRowDown2Linear_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_NEON(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2Box_NEON');
  late final _ScaleARGBRowDown2Box_NEON =
      _ScaleARGBRowDown2Box_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_MSA(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_MSA');
  late final _ScaleARGBRowDown2_MSA = _ScaleARGBRowDown2_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_MSA(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2Linear_MSA');
  late final _ScaleARGBRowDown2Linear_MSA =
      _ScaleARGBRowDown2Linear_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_MSA(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2Box_MSA');
  late final _ScaleARGBRowDown2Box_MSA =
      _ScaleARGBRowDown2Box_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_MMI(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_MMI');
  late final _ScaleARGBRowDown2_MMI = _ScaleARGBRowDown2_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_MMI(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2Linear_MMI');
  late final _ScaleARGBRowDown2Linear_MMI =
      _ScaleARGBRowDown2Linear_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_MMI(
      src_argb,
      src_stride,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2Box_MMI');
  late final _ScaleARGBRowDown2Box_MMI =
      _ScaleARGBRowDown2Box_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_Any_SSE2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_Any_SSE2');
  late final _ScaleARGBRowDown2_Any_SSE2 =
      _ScaleARGBRowDown2_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_Any_SSE2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Linear_Any_SSE2');
  late final _ScaleARGBRowDown2Linear_Any_SSE2 =
      _ScaleARGBRowDown2Linear_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_Any_SSE2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Box_Any_SSE2');
  late final _ScaleARGBRowDown2Box_Any_SSE2 =
      _ScaleARGBRowDown2Box_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_Any_NEON');
  late final _ScaleARGBRowDown2_Any_NEON =
      _ScaleARGBRowDown2_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Linear_Any_NEON');
  late final _ScaleARGBRowDown2Linear_Any_NEON =
      _ScaleARGBRowDown2Linear_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Box_Any_NEON');
  late final _ScaleARGBRowDown2Box_Any_NEON =
      _ScaleARGBRowDown2Box_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_Any_MSA');
  late final _ScaleARGBRowDown2_Any_MSA =
      _ScaleARGBRowDown2_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Linear_Any_MSA');
  late final _ScaleARGBRowDown2Linear_Any_MSA =
      _ScaleARGBRowDown2Linear_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Box_Any_MSA');
  late final _ScaleARGBRowDown2Box_Any_MSA =
      _ScaleARGBRowDown2Box_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDown2_Any_MMI');
  late final _ScaleARGBRowDown2_Any_MMI =
      _ScaleARGBRowDown2_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Linear_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Linear_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Linear_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Linear_Any_MMI');
  late final _ScaleARGBRowDown2Linear_Any_MMI =
      _ScaleARGBRowDown2Linear_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDown2Box_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDown2Box_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDown2Box_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDown2Box_Any_MMI');
  late final _ScaleARGBRowDown2Box_Any_MMI =
      _ScaleARGBRowDown2Box_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_SSE2(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDownEven_SSE2');
  late final _ScaleARGBRowDownEven_SSE2 =
      _ScaleARGBRowDownEven_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_SSE2(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_SSE2(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEvenBox_SSE2');
  late final _ScaleARGBRowDownEvenBox_SSE2 =
      _ScaleARGBRowDownEvenBox_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_NEON(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDownEven_NEON');
  late final _ScaleARGBRowDownEven_NEON =
      _ScaleARGBRowDownEven_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_NEON(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_NEON(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEvenBox_NEON');
  late final _ScaleARGBRowDownEvenBox_NEON =
      _ScaleARGBRowDownEvenBox_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_MSA(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDownEven_MSA');
  late final _ScaleARGBRowDownEven_MSA =
      _ScaleARGBRowDownEven_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_MSA(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_MSA(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDownEvenBox_MSA');
  late final _ScaleARGBRowDownEvenBox_MSA =
      _ScaleARGBRowDownEvenBox_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_MMI(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDownEven_MMI');
  late final _ScaleARGBRowDownEven_MMI =
      _ScaleARGBRowDownEven_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_MMI(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_MMI(
      src_argb,
      src_stride,
      src_stepx,
      dst_argb,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleARGBRowDownEvenBox_MMI');
  late final _ScaleARGBRowDownEvenBox_MMI =
      _ScaleARGBRowDownEvenBox_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_Any_SSE2(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEven_Any_SSE2');
  late final _ScaleARGBRowDownEven_Any_SSE2 =
      _ScaleARGBRowDownEven_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_Any_SSE2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_Any_SSE2(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEvenBox_Any_SSE2');
  late final _ScaleARGBRowDownEvenBox_Any_SSE2 =
      _ScaleARGBRowDownEvenBox_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_Any_NEON(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEven_Any_NEON');
  late final _ScaleARGBRowDownEven_Any_NEON =
      _ScaleARGBRowDownEven_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_Any_NEON(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEvenBox_Any_NEON');
  late final _ScaleARGBRowDownEvenBox_Any_NEON =
      _ScaleARGBRowDownEvenBox_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_Any_MSA(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEven_Any_MSA');
  late final _ScaleARGBRowDownEven_Any_MSA =
      _ScaleARGBRowDownEven_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_Any_MSA(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEvenBox_Any_MSA');
  late final _ScaleARGBRowDownEvenBox_Any_MSA =
      _ScaleARGBRowDownEvenBox_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEven_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEven_Any_MMI(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEven_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEven_Any_MMI');
  late final _ScaleARGBRowDownEven_Any_MMI =
      _ScaleARGBRowDownEven_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleARGBRowDownEvenBox_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleARGBRowDownEvenBox_Any_MMI(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleARGBRowDownEvenBox_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleARGBRowDownEvenBox_Any_MMI');
  late final _ScaleARGBRowDownEvenBox_Any_MMI =
      _ScaleARGBRowDownEvenBox_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// UV Row functions
  void ScaleUVRowDown2_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_SSSE3(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_SSSE3');
  late final _ScaleUVRowDown2_SSSE3 = _ScaleUVRowDown2_SSSE3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_SSSE3(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Linear_SSSE3');
  late final _ScaleUVRowDown2Linear_SSSE3 =
      _ScaleUVRowDown2Linear_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_SSSE3(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_SSSE3');
  late final _ScaleUVRowDown2Box_SSSE3 =
      _ScaleUVRowDown2Box_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_AVX2(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_AVX2');
  late final _ScaleUVRowDown2Box_AVX2 = _ScaleUVRowDown2Box_AVX2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_NEON(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_NEON');
  late final _ScaleUVRowDown2_NEON = _ScaleUVRowDown2_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_NEON(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Linear_NEON');
  late final _ScaleUVRowDown2Linear_NEON =
      _ScaleUVRowDown2Linear_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_NEON(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_NEON');
  late final _ScaleUVRowDown2Box_NEON = _ScaleUVRowDown2Box_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_MSA(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_MSA');
  late final _ScaleUVRowDown2_MSA = _ScaleUVRowDown2_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_MSA(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Linear_MSA');
  late final _ScaleUVRowDown2Linear_MSA =
      _ScaleUVRowDown2Linear_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_MSA(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_MSA');
  late final _ScaleUVRowDown2Box_MSA = _ScaleUVRowDown2Box_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_MMI(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_MMI');
  late final _ScaleUVRowDown2_MMI = _ScaleUVRowDown2_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_MMI(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Linear_MMI');
  late final _ScaleUVRowDown2Linear_MMI =
      _ScaleUVRowDown2Linear_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_MMI(
      src_ptr,
      src_stride,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_MMI');
  late final _ScaleUVRowDown2Box_MMI = _ScaleUVRowDown2Box_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_Any_SSSE3');
  late final _ScaleUVRowDown2_Any_SSSE3 =
      _ScaleUVRowDown2_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDown2Linear_Any_SSSE3');
  late final _ScaleUVRowDown2Linear_Any_SSSE3 =
      _ScaleUVRowDown2Linear_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDown2Box_Any_SSSE3');
  late final _ScaleUVRowDown2Box_Any_SSSE3 =
      _ScaleUVRowDown2Box_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_Any_AVX2');
  late final _ScaleUVRowDown2Box_Any_AVX2 =
      _ScaleUVRowDown2Box_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_Any_NEON');
  late final _ScaleUVRowDown2_Any_NEON =
      _ScaleUVRowDown2_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDown2Linear_Any_NEON');
  late final _ScaleUVRowDown2Linear_Any_NEON =
      _ScaleUVRowDown2Linear_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_Any_NEON');
  late final _ScaleUVRowDown2Box_Any_NEON =
      _ScaleUVRowDown2Box_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_Any_MSA');
  late final _ScaleUVRowDown2_Any_MSA = _ScaleUVRowDown2_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDown2Linear_Any_MSA');
  late final _ScaleUVRowDown2Linear_Any_MSA =
      _ScaleUVRowDown2Linear_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_Any_MSA');
  late final _ScaleUVRowDown2Box_Any_MSA =
      _ScaleUVRowDown2Box_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2_Any_MMI');
  late final _ScaleUVRowDown2_Any_MMI = _ScaleUVRowDown2_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Linear_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Linear_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Linear_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDown2Linear_Any_MMI');
  late final _ScaleUVRowDown2Linear_Any_MMI =
      _ScaleUVRowDown2Linear_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDown2Box_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDown2Box_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDown2Box_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDown2Box_Any_MMI');
  late final _ScaleUVRowDown2Box_Any_MMI =
      _ScaleUVRowDown2Box_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_SSSE3(
      src_ptr,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEven_SSSE3');
  late final _ScaleUVRowDownEven_SSSE3 =
      _ScaleUVRowDownEven_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_SSSE3(
      src_ptr,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEvenBox_SSSE3');
  late final _ScaleUVRowDownEvenBox_SSSE3 =
      _ScaleUVRowDownEvenBox_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_NEON(
      src_ptr,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEven_NEON');
  late final _ScaleUVRowDownEven_NEON = _ScaleUVRowDownEven_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_NEON(
      src_ptr,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEvenBox_NEON');
  late final _ScaleUVRowDownEvenBox_NEON =
      _ScaleUVRowDownEvenBox_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_MSA(
      src_ptr,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEven_MSA');
  late final _ScaleUVRowDownEven_MSA = _ScaleUVRowDownEven_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_MSA(
      src_ptr,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEvenBox_MSA');
  late final _ScaleUVRowDownEvenBox_MSA =
      _ScaleUVRowDownEvenBox_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_MMI(
      src_ptr,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEven_MMI');
  late final _ScaleUVRowDownEven_MMI = _ScaleUVRowDownEven_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_MMI(
      src_ptr,
      src_stride,
      src_stepx,
      dst_uv,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEvenBox_MMI');
  late final _ScaleUVRowDownEvenBox_MMI =
      _ScaleUVRowDownEvenBox_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_Any_SSSE3(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDownEven_Any_SSSE3');
  late final _ScaleUVRowDownEven_Any_SSSE3 =
      _ScaleUVRowDownEven_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_Any_SSSE3(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDownEvenBox_Any_SSSE3');
  late final _ScaleUVRowDownEvenBox_Any_SSSE3 =
      _ScaleUVRowDownEvenBox_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_Any_NEON(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEven_Any_NEON');
  late final _ScaleUVRowDownEven_Any_NEON =
      _ScaleUVRowDownEven_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_Any_NEON(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDownEvenBox_Any_NEON');
  late final _ScaleUVRowDownEvenBox_Any_NEON =
      _ScaleUVRowDownEvenBox_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_Any_MSA(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEven_Any_MSA');
  late final _ScaleUVRowDownEven_Any_MSA =
      _ScaleUVRowDownEven_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_Any_MSA(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDownEvenBox_Any_MSA');
  late final _ScaleUVRowDownEvenBox_Any_MSA =
      _ScaleUVRowDownEvenBox_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEven_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDownEven_Any_MMI(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEven_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleUVRowDownEven_Any_MMI');
  late final _ScaleUVRowDownEven_Any_MMI =
      _ScaleUVRowDownEven_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowDownEvenBox_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    int src_stepx,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowDownEvenBox_Any_MMI(
      src_ptr,
      src_stride,
      src_stepx,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowDownEvenBox_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowDownEvenBox_Any_MMI');
  late final _ScaleUVRowDownEvenBox_Any_MMI =
      _ScaleUVRowDownEvenBox_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Linear_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_SSSE3(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_SSSE3');
  late final _ScaleUVRowUp2_Linear_SSSE3 =
      _ScaleUVRowUp2_Linear_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Bilinear_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_SSSE3');
  late final _ScaleUVRowUp2_Bilinear_SSSE3 =
      _ScaleUVRowUp2_Bilinear_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleUVRowUp2_Linear_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_Any_SSSE3(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_Any_SSSE3');
  late final _ScaleUVRowUp2_Linear_Any_SSSE3 =
      _ScaleUVRowUp2_Linear_Any_SSSE3Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Bilinear_Any_SSSE3(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_Any_SSSE3(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_Any_SSSE3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_Any_SSSE3');
  late final _ScaleUVRowUp2_Bilinear_Any_SSSE3 =
      _ScaleUVRowUp2_Bilinear_Any_SSSE3Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleUVRowUp2_Linear_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_AVX2');
  late final _ScaleUVRowUp2_Linear_AVX2 =
      _ScaleUVRowUp2_Linear_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Bilinear_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_AVX2');
  late final _ScaleUVRowUp2_Bilinear_AVX2 =
      _ScaleUVRowUp2_Bilinear_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleUVRowUp2_Linear_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_Any_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_Any_AVX2');
  late final _ScaleUVRowUp2_Linear_Any_AVX2 =
      _ScaleUVRowUp2_Linear_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Bilinear_Any_AVX2(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_Any_AVX2');
  late final _ScaleUVRowUp2_Bilinear_Any_AVX2 =
      _ScaleUVRowUp2_Bilinear_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleUVRowUp2_Linear_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_NEON');
  late final _ScaleUVRowUp2_Linear_NEON =
      _ScaleUVRowUp2_Linear_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Bilinear_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_NEON');
  late final _ScaleUVRowUp2_Bilinear_NEON =
      _ScaleUVRowUp2_Bilinear_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleUVRowUp2_Linear_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_Any_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_Any_NEON');
  late final _ScaleUVRowUp2_Linear_Any_NEON =
      _ScaleUVRowUp2_Linear_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleUVRowUp2_Bilinear_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_Any_NEON');
  late final _ScaleUVRowUp2_Bilinear_Any_NEON =
      _ScaleUVRowUp2_Bilinear_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleUVRowUp2_Linear_16_SSE2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_16_SSE2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_16_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_16_SSE2');
  late final _ScaleUVRowUp2_Linear_16_SSE2 =
      _ScaleUVRowUp2_Linear_16_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleUVRowUp2_Bilinear_16_SSE2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_16_SSE2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_16_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_16_SSE2');
  late final _ScaleUVRowUp2_Bilinear_16_SSE2 =
      _ScaleUVRowUp2_Bilinear_16_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleUVRowUp2_Linear_16_Any_SSE2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_16_Any_SSE2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_16_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_16_Any_SSE2');
  late final _ScaleUVRowUp2_Linear_16_Any_SSE2 =
      _ScaleUVRowUp2_Linear_16_Any_SSE2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleUVRowUp2_Bilinear_16_Any_SSE2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_16_Any_SSE2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_16_Any_SSE2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_16_Any_SSE2');
  late final _ScaleUVRowUp2_Bilinear_16_Any_SSE2 =
      _ScaleUVRowUp2_Bilinear_16_Any_SSE2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleUVRowUp2_Linear_16_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_16_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_16_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_16_AVX2');
  late final _ScaleUVRowUp2_Linear_16_AVX2 =
      _ScaleUVRowUp2_Linear_16_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleUVRowUp2_Bilinear_16_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_16_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_16_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_16_AVX2');
  late final _ScaleUVRowUp2_Bilinear_16_AVX2 =
      _ScaleUVRowUp2_Bilinear_16_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleUVRowUp2_Linear_16_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_16_Any_AVX2(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_16_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_16_Any_AVX2');
  late final _ScaleUVRowUp2_Linear_16_Any_AVX2 =
      _ScaleUVRowUp2_Linear_16_Any_AVX2Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleUVRowUp2_Bilinear_16_Any_AVX2(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_16_Any_AVX2(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_16_Any_AVX2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_16_Any_AVX2');
  late final _ScaleUVRowUp2_Bilinear_16_Any_AVX2 =
      _ScaleUVRowUp2_Bilinear_16_Any_AVX2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleUVRowUp2_Linear_16_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_16_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_16_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_16_NEON');
  late final _ScaleUVRowUp2_Linear_16_NEON =
      _ScaleUVRowUp2_Linear_16_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleUVRowUp2_Bilinear_16_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_16_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_16_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_16_NEON');
  late final _ScaleUVRowUp2_Bilinear_16_NEON =
      _ScaleUVRowUp2_Bilinear_16_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleUVRowUp2_Linear_16_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Linear_16_Any_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Linear_16_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleUVRowUp2_Linear_16_Any_NEON');
  late final _ScaleUVRowUp2_Linear_16_Any_NEON =
      _ScaleUVRowUp2_Linear_16_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleUVRowUp2_Bilinear_16_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleUVRowUp2_Bilinear_16_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleUVRowUp2_Bilinear_16_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleUVRowUp2_Bilinear_16_Any_NEON');
  late final _ScaleUVRowUp2_Bilinear_16_Any_NEON =
      _ScaleUVRowUp2_Bilinear_16_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  /// Note - not static due to reuse in convert for 444 to 420.
  void ScaleRowDown2_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2_NEON(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_NEON');
  late final _ScaleRowDown2_NEON = _ScaleRowDown2_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_NEON(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Linear_NEON');
  late final _ScaleRowDown2Linear_NEON =
      _ScaleRowDown2Linear_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_NEON(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_NEON');
  late final _ScaleRowDown2Box_NEON = _ScaleRowDown2Box_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_NEON');
  late final _ScaleRowDown4_NEON = _ScaleRowDown4_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_NEON');
  late final _ScaleRowDown4Box_NEON = _ScaleRowDown4Box_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Down scale from 4 to 3 pixels. Use the neon multilane read/write
  /// to load up the every 4th pixel into a 4 different registers.
  /// Point samples 32 pixels to 24 pixels.
  void ScaleRowDown34_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_NEON');
  late final _ScaleRowDown34_NEON = _ScaleRowDown34_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_0_Box_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_0_Box_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_0_Box_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_0_Box_NEON');
  late final _ScaleRowDown34_0_Box_NEON =
      _ScaleRowDown34_0_Box_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_1_Box_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_1_Box_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_1_Box_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_1_Box_NEON');
  late final _ScaleRowDown34_1_Box_NEON =
      _ScaleRowDown34_1_Box_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// 32 -> 12
  void ScaleRowDown38_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_NEON');
  late final _ScaleRowDown38_NEON = _ScaleRowDown38_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// 32x3 -> 12x1
  void ScaleRowDown38_3_Box_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_3_Box_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_3_Box_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_3_Box_NEON');
  late final _ScaleRowDown38_3_Box_NEON =
      _ScaleRowDown38_3_Box_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// 32x2 -> 12x1
  void ScaleRowDown38_2_Box_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_2_Box_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_2_Box_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_2_Box_NEON');
  late final _ScaleRowDown38_2_Box_NEON =
      _ScaleRowDown38_2_Box_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_Any_NEON');
  late final _ScaleRowDown2_Any_NEON = _ScaleRowDown2_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown2Linear_Any_NEON');
  late final _ScaleRowDown2Linear_Any_NEON =
      _ScaleRowDown2Linear_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Any_NEON');
  late final _ScaleRowDown2Box_Any_NEON =
      _ScaleRowDown2Box_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Odd_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Odd_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Odd_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Odd_NEON');
  late final _ScaleRowDown2Box_Odd_NEON =
      _ScaleRowDown2Box_Odd_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_Any_NEON');
  late final _ScaleRowDown4_Any_NEON = _ScaleRowDown4_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_Any_NEON');
  late final _ScaleRowDown4Box_Any_NEON =
      _ScaleRowDown4Box_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_Any_NEON');
  late final _ScaleRowDown34_Any_NEON = _ScaleRowDown34_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_0_Box_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_0_Box_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_0_Box_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown34_0_Box_Any_NEON');
  late final _ScaleRowDown34_0_Box_Any_NEON =
      _ScaleRowDown34_0_Box_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_1_Box_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_1_Box_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_1_Box_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown34_1_Box_Any_NEON');
  late final _ScaleRowDown34_1_Box_Any_NEON =
      _ScaleRowDown34_1_Box_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// 32 -> 12
  void ScaleRowDown38_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_Any_NEON');
  late final _ScaleRowDown38_Any_NEON = _ScaleRowDown38_Any_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// 32x3 -> 12x1
  void ScaleRowDown38_3_Box_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_3_Box_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_3_Box_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown38_3_Box_Any_NEON');
  late final _ScaleRowDown38_3_Box_Any_NEON =
      _ScaleRowDown38_3_Box_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// 32x2 -> 12x1
  void ScaleRowDown38_2_Box_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_2_Box_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_2_Box_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown38_2_Box_Any_NEON');
  late final _ScaleRowDown38_2_Box_Any_NEON =
      _ScaleRowDown38_2_Box_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Linear_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_NEON');
  late final _ScaleRowUp2_Linear_NEON = _ScaleRowUp2_Linear_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_NEON');
  late final _ScaleRowUp2_Bilinear_NEON =
      _ScaleRowUp2_Bilinear_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_12_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_12_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_12_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_12_NEON');
  late final _ScaleRowUp2_Linear_12_NEON =
      _ScaleRowUp2_Linear_12_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_12_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_12_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_12_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_12_NEON');
  late final _ScaleRowUp2_Bilinear_12_NEON =
      _ScaleRowUp2_Bilinear_12_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_16_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_16_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_16_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_16_NEON');
  late final _ScaleRowUp2_Linear_16_NEON =
      _ScaleRowUp2_Linear_16_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_16_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_16_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_16_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_16_NEON');
  late final _ScaleRowUp2_Bilinear_16_NEON =
      _ScaleRowUp2_Bilinear_16_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_Any_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowUp2_Linear_Any_NEON');
  late final _ScaleRowUp2_Linear_Any_NEON =
      _ScaleRowUp2_Linear_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowUp2_Bilinear_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_Any_NEON');
  late final _ScaleRowUp2_Bilinear_Any_NEON =
      _ScaleRowUp2_Bilinear_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void ScaleRowUp2_Linear_12_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_12_Any_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_12_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_12_Any_NEON');
  late final _ScaleRowUp2_Linear_12_Any_NEON =
      _ScaleRowUp2_Linear_12_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_12_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_12_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_12_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_12_Any_NEON');
  late final _ScaleRowUp2_Bilinear_12_Any_NEON =
      _ScaleRowUp2_Bilinear_12_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleRowUp2_Linear_16_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowUp2_Linear_16_Any_NEON(
      src_ptr,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Linear_16_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleRowUp2_Linear_16_Any_NEON');
  late final _ScaleRowUp2_Linear_16_Any_NEON =
      _ScaleRowUp2_Linear_16_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowUp2_Bilinear_16_Any_NEON(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int dst_stride,
    int dst_width,
  ) {
    return _ScaleRowUp2_Bilinear_16_Any_NEON(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_stride,
      dst_width,
    );
  }

  late final _ScaleRowUp2_Bilinear_16_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint16>,
              ptrdiff_t,
              ffi.Int)>>('ScaleRowUp2_Bilinear_16_Any_NEON');
  late final _ScaleRowUp2_Bilinear_16_Any_NEON =
      _ScaleRowUp2_Bilinear_16_Any_NEONPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  void ScaleAddRow_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_NEON(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_NEON');
  late final _ScaleAddRow_NEON = _ScaleAddRow_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleAddRow_Any_NEON(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_Any_NEON(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_Any_NEON');
  late final _ScaleAddRow_Any_NEON = _ScaleAddRow_Any_NEONPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleFilterCols_NEON(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleFilterCols_NEON(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleFilterCols_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols_NEON');
  late final _ScaleFilterCols_NEON = _ScaleFilterCols_NEONPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleFilterCols_Any_NEON(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleFilterCols_Any_NEON(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleFilterCols_Any_NEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols_Any_NEON');
  late final _ScaleFilterCols_Any_NEON =
      _ScaleFilterCols_Any_NEONPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleRowDown2_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2_MSA(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_MSA');
  late final _ScaleRowDown2_MSA = _ScaleRowDown2_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_MSA(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Linear_MSA');
  late final _ScaleRowDown2Linear_MSA = _ScaleRowDown2Linear_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_MSA(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_MSA');
  late final _ScaleRowDown2Box_MSA = _ScaleRowDown2Box_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4_MSA(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_MSA');
  late final _ScaleRowDown4_MSA = _ScaleRowDown4_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_MSA(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_MSA');
  late final _ScaleRowDown4Box_MSA = _ScaleRowDown4Box_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown38_MSA(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown38_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_MSA');
  late final _ScaleRowDown38_MSA = _ScaleRowDown38_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_2_Box_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_2_Box_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_2_Box_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_2_Box_MSA');
  late final _ScaleRowDown38_2_Box_MSA =
      _ScaleRowDown38_2_Box_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_3_Box_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_3_Box_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_3_Box_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_3_Box_MSA');
  late final _ScaleRowDown38_3_Box_MSA =
      _ScaleRowDown38_3_Box_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleAddRow_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_MSA(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_MSA');
  late final _ScaleAddRow_MSA = _ScaleAddRow_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleFilterCols_MSA(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleFilterCols_MSA(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleFilterCols_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols_MSA');
  late final _ScaleFilterCols_MSA = _ScaleFilterCols_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleRowDown34_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown34_MSA(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown34_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_MSA');
  late final _ScaleRowDown34_MSA = _ScaleRowDown34_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown34_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown34_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_MMI');
  late final _ScaleRowDown34_MMI = _ScaleRowDown34_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_0_Box_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> d,
    int dst_width,
  ) {
    return _ScaleRowDown34_0_Box_MSA(
      src_ptr,
      src_stride,
      d,
      dst_width,
    );
  }

  late final _ScaleRowDown34_0_Box_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_0_Box_MSA');
  late final _ScaleRowDown34_0_Box_MSA =
      _ScaleRowDown34_0_Box_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_1_Box_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> d,
    int dst_width,
  ) {
    return _ScaleRowDown34_1_Box_MSA(
      src_ptr,
      src_stride,
      d,
      dst_width,
    );
  }

  late final _ScaleRowDown34_1_Box_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_1_Box_MSA');
  late final _ScaleRowDown34_1_Box_MSA =
      _ScaleRowDown34_1_Box_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_Any_MSA');
  late final _ScaleRowDown2_Any_MSA = _ScaleRowDown2_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Linear_Any_MSA');
  late final _ScaleRowDown2Linear_Any_MSA =
      _ScaleRowDown2Linear_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Any_MSA');
  late final _ScaleRowDown2Box_Any_MSA =
      _ScaleRowDown2Box_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_Any_MSA');
  late final _ScaleRowDown4_Any_MSA = _ScaleRowDown4_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_Any_MSA');
  late final _ScaleRowDown4Box_Any_MSA =
      _ScaleRowDown4Box_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown38_Any_MSA');
  late final _ScaleRowDown38_Any_MSA = _ScaleRowDown38_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_2_Box_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_2_Box_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_2_Box_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown38_2_Box_Any_MSA');
  late final _ScaleRowDown38_2_Box_Any_MSA =
      _ScaleRowDown38_2_Box_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown38_3_Box_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown38_3_Box_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown38_3_Box_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown38_3_Box_Any_MSA');
  late final _ScaleRowDown38_3_Box_Any_MSA =
      _ScaleRowDown38_3_Box_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleAddRow_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_Any_MSA(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_Any_MSA');
  late final _ScaleAddRow_Any_MSA = _ScaleAddRow_Any_MSAPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleFilterCols_Any_MSA(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleFilterCols_Any_MSA(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleFilterCols_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleFilterCols_Any_MSA');
  late final _ScaleFilterCols_Any_MSA = _ScaleFilterCols_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleRowDown34_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_Any_MSA');
  late final _ScaleRowDown34_Any_MSA = _ScaleRowDown34_Any_MSAPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown34_Any_MMI');
  late final _ScaleRowDown34_Any_MMI = _ScaleRowDown34_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_0_Box_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_0_Box_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_0_Box_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown34_0_Box_Any_MSA');
  late final _ScaleRowDown34_0_Box_Any_MSA =
      _ScaleRowDown34_0_Box_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown34_1_Box_Any_MSA(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown34_1_Box_Any_MSA(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown34_1_Box_Any_MSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ptrdiff_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('ScaleRowDown34_1_Box_Any_MSA');
  late final _ScaleRowDown34_1_Box_Any_MSA =
      _ScaleRowDown34_1_Box_Any_MSAPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_MMI');
  late final _ScaleRowDown2_MMI = _ScaleRowDown2_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2_16_MMI(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2_16_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2_16_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown2_16_MMI');
  late final _ScaleRowDown2_16_MMI = _ScaleRowDown2_16_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown2Linear_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Linear_MMI');
  late final _ScaleRowDown2Linear_MMI = _ScaleRowDown2Linear_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_16_MMI(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_16_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_16_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown2Linear_16_MMI');
  late final _ScaleRowDown2Linear_16_MMI =
      _ScaleRowDown2Linear_16_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown2Box_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_MMI');
  late final _ScaleRowDown2Box_MMI = _ScaleRowDown2Box_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_16_MMI(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_16_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_16_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown2Box_16_MMI');
  late final _ScaleRowDown2Box_16_MMI = _ScaleRowDown2Box_16_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown2Box_Odd_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Odd_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Odd_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Odd_MMI');
  late final _ScaleRowDown2Box_Odd_MMI =
      _ScaleRowDown2Box_Odd_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_MMI');
  late final _ScaleRowDown4_MMI = _ScaleRowDown4_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_16_MMI(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4_16_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4_16_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown4_16_MMI');
  late final _ScaleRowDown4_16_MMI = _ScaleRowDown4_16_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleRowDown4Box_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_MMI');
  late final _ScaleRowDown4Box_MMI = _ScaleRowDown4Box_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_16_MMI(
    ffi.Pointer<ffi.Uint16> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_16_MMI(
      src_ptr,
      src_stride,
      dst,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_16_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ptrdiff_t,
              ffi.Pointer<ffi.Uint16>, ffi.Int)>>('ScaleRowDown4Box_16_MMI');
  late final _ScaleRowDown4Box_16_MMI = _ScaleRowDown4Box_16_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleAddRow_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_MMI(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_MMI');
  late final _ScaleAddRow_MMI = _ScaleAddRow_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  void ScaleAddRow_16_MMI(
    ffi.Pointer<ffi.Uint16> src_ptr,
    ffi.Pointer<ffi.Uint32> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_16_MMI(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_16_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint32>,
              ffi.Int)>>('ScaleAddRow_16_MMI');
  late final _ScaleAddRow_16_MMI = _ScaleAddRow_16_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint32>, int)>();

  void ScaleColsUp2_MMI(
    ffi.Pointer<ffi.Uint8> dst_ptr,
    ffi.Pointer<ffi.Uint8> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleColsUp2_MMI(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleColsUp2_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleColsUp2_MMI');
  late final _ScaleColsUp2_MMI = _ScaleColsUp2_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleColsUp2_16_MMI(
    ffi.Pointer<ffi.Uint16> dst_ptr,
    ffi.Pointer<ffi.Uint16> src_ptr,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleColsUp2_16_MMI(
      dst_ptr,
      src_ptr,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleColsUp2_16_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleColsUp2_16_MMI');
  late final _ScaleColsUp2_16_MMI = _ScaleColsUp2_16_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>, int, int, int)>();

  void ScaleARGBColsUp2_MMI(
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Pointer<ffi.Uint8> src_argb,
    int dst_width,
    int x,
    int dx,
  ) {
    return _ScaleARGBColsUp2_MMI(
      dst_argb,
      src_argb,
      dst_width,
      x,
      dx,
    );
  }

  late final _ScaleARGBColsUp2_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('ScaleARGBColsUp2_MMI');
  late final _ScaleARGBColsUp2_MMI = _ScaleARGBColsUp2_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void ScaleRowDown2_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2_Any_MMI');
  late final _ScaleRowDown2_Any_MMI = _ScaleRowDown2_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Linear_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Linear_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Linear_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Linear_Any_MMI');
  late final _ScaleRowDown2Linear_Any_MMI =
      _ScaleRowDown2Linear_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown2Box_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown2Box_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown2Box_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown2Box_Any_MMI');
  late final _ScaleRowDown2Box_Any_MMI =
      _ScaleRowDown2Box_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4_Any_MMI');
  late final _ScaleRowDown4_Any_MMI = _ScaleRowDown4_Any_MMIPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleRowDown4Box_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_ptr,
    int dst_width,
  ) {
    return _ScaleRowDown4Box_Any_MMI(
      src_ptr,
      src_stride,
      dst_ptr,
      dst_width,
    );
  }

  late final _ScaleRowDown4Box_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ptrdiff_t,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('ScaleRowDown4Box_Any_MMI');
  late final _ScaleRowDown4Box_Any_MMI =
      _ScaleRowDown4Box_Any_MMIPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void ScaleAddRow_Any_MMI(
    ffi.Pointer<ffi.Uint8> src_ptr,
    ffi.Pointer<ffi.Uint16> dst_ptr,
    int src_width,
  ) {
    return _ScaleAddRow_Any_MMI(
      src_ptr,
      dst_ptr,
      src_width,
    );
  }

  late final _ScaleAddRow_Any_MMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>,
              ffi.Int)>>('ScaleAddRow_Any_MMI');
  late final _ScaleAddRow_Any_MMI = _ScaleAddRow_Any_MMIPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>, int)>();

  int UVScale(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _UVScale(
      src_uv,
      src_stride_uv,
      src_width,
      src_height,
      dst_uv,
      dst_stride_uv,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _UVScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('UVScale');
  late final _UVScale = _UVScalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  /// Scale a 16 bit UV image.
  /// This function is currently incomplete, it can't handle all cases.
  int UVScale_16(
    ffi.Pointer<ffi.Uint16> src_uv,
    int src_stride_uv,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int dst_stride_uv,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _UVScale_16(
      src_uv,
      src_stride_uv,
      src_width,
      src_height,
      dst_uv,
      dst_stride_uv,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _UVScale_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('UVScale_16');
  late final _UVScale_16 = _UVScale_16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, int, int,
          ffi.Pointer<ffi.Uint16>, int, int, int, int)>();

  /// Converts fourcc aliases into canonical ones.
  int CanonicalFourCC(
    int fourcc,
  ) {
    return _CanonicalFourCC(
      fourcc,
    );
  }

  late final _CanonicalFourCCPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'CanonicalFourCC');
  late final _CanonicalFourCC =
      _CanonicalFourCCPtr.asFunction<int Function(int)>();

  /// BT.601
  late final ffi.Pointer<YuvConstants> _kYuvI601Constants =
      _lookup<YuvConstants>('kYuvI601Constants');

  YuvConstants get kYuvI601Constants => _kYuvI601Constants.ref;

  /// BT.601 full
  late final ffi.Pointer<YuvConstants> _kYuvJPEGConstants =
      _lookup<YuvConstants>('kYuvJPEGConstants');

  YuvConstants get kYuvJPEGConstants => _kYuvJPEGConstants.ref;

  /// BT.709
  late final ffi.Pointer<YuvConstants> _kYuvH709Constants =
      _lookup<YuvConstants>('kYuvH709Constants');

  YuvConstants get kYuvH709Constants => _kYuvH709Constants.ref;

  /// BT.709 full
  late final ffi.Pointer<YuvConstants> _kYuvF709Constants =
      _lookup<YuvConstants>('kYuvF709Constants');

  YuvConstants get kYuvF709Constants => _kYuvF709Constants.ref;

  /// BT.2020
  late final ffi.Pointer<YuvConstants> _kYuv2020Constants =
      _lookup<YuvConstants>('kYuv2020Constants');

  YuvConstants get kYuv2020Constants => _kYuv2020Constants.ref;

  /// BT.2020 full
  late final ffi.Pointer<YuvConstants> _kYuvV2020Constants =
      _lookup<YuvConstants>('kYuvV2020Constants');

  YuvConstants get kYuvV2020Constants => _kYuvV2020Constants.ref;

  /// BT.601
  late final ffi.Pointer<YuvConstants> _kYvuI601Constants =
      _lookup<YuvConstants>('kYvuI601Constants');

  YuvConstants get kYvuI601Constants => _kYvuI601Constants.ref;

  /// BT.601 full
  late final ffi.Pointer<YuvConstants> _kYvuJPEGConstants =
      _lookup<YuvConstants>('kYvuJPEGConstants');

  YuvConstants get kYvuJPEGConstants => _kYvuJPEGConstants.ref;

  /// BT.709
  late final ffi.Pointer<YuvConstants> _kYvuH709Constants =
      _lookup<YuvConstants>('kYvuH709Constants');

  YuvConstants get kYvuH709Constants => _kYvuH709Constants.ref;

  /// BT.709 full
  late final ffi.Pointer<YuvConstants> _kYvuF709Constants =
      _lookup<YuvConstants>('kYvuF709Constants');

  YuvConstants get kYvuF709Constants => _kYvuF709Constants.ref;

  /// BT.2020
  late final ffi.Pointer<YuvConstants> _kYvu2020Constants =
      _lookup<YuvConstants>('kYvu2020Constants');

  YuvConstants get kYvu2020Constants => _kYvu2020Constants.ref;

  /// BT.2020 full
  late final ffi.Pointer<YuvConstants> _kYvuV2020Constants =
      _lookup<YuvConstants>('kYvuV2020Constants');

  YuvConstants get kYvuV2020Constants => _kYvuV2020Constants.ref;

  /// Convert I420 to ARGB.
  int I420ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _I420ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _I420ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToARGB');
  late final _I420ToARGB = _I420ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I420 to ABGR.
  int I420ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _I420ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _I420ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToABGR');
  late final _I420ToABGR = _I420ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert J420 to ARGB.
  int J420ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _J420ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _J420ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J420ToARGB');
  late final _J420ToARGB = _J420ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert J420 to ABGR.
  int J420ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _J420ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _J420ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J420ToABGR');
  late final _J420ToABGR = _J420ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H420 to ARGB.
  int H420ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _H420ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _H420ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H420ToARGB');
  late final _H420ToARGB = _H420ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H420 to ABGR.
  int H420ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _H420ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _H420ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H420ToABGR');
  late final _H420ToABGR = _H420ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U420 to ARGB.
  int U420ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _U420ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _U420ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U420ToARGB');
  late final _U420ToARGB = _U420ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U420 to ABGR.
  int U420ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _U420ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _U420ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U420ToABGR');
  late final _U420ToABGR = _U420ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I422 to ARGB.
  int I422ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _I422ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _I422ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToARGB');
  late final _I422ToARGB = _I422ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I422 to ABGR.
  int I422ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _I422ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _I422ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToABGR');
  late final _I422ToABGR = _I422ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert J422 to ARGB.
  int J422ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _J422ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _J422ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J422ToARGB');
  late final _J422ToARGB = _J422ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert J422 to ABGR.
  int J422ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _J422ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _J422ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J422ToABGR');
  late final _J422ToABGR = _J422ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H422 to ARGB.
  int H422ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _H422ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _H422ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H422ToARGB');
  late final _H422ToARGB = _H422ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H422 to ABGR.
  int H422ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _H422ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _H422ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H422ToABGR');
  late final _H422ToABGR = _H422ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U422 to ARGB.
  int U422ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _U422ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _U422ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U422ToARGB');
  late final _U422ToARGB = _U422ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U422 to ABGR.
  int U422ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _U422ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _U422ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U422ToABGR');
  late final _U422ToABGR = _U422ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I444 to ARGB.
  int I444ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _I444ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _I444ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444ToARGB');
  late final _I444ToARGB = _I444ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I444 to ABGR.
  int I444ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _I444ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _I444ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444ToABGR');
  late final _I444ToABGR = _I444ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert J444 to ARGB.
  int J444ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _J444ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _J444ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J444ToARGB');
  late final _J444ToARGB = _J444ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert J444 to ABGR.
  int J444ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _J444ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _J444ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J444ToABGR');
  late final _J444ToABGR = _J444ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H444 to ARGB.
  int H444ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _H444ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _H444ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H444ToARGB');
  late final _H444ToARGB = _H444ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H444 to ABGR.
  int H444ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _H444ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _H444ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H444ToABGR');
  late final _H444ToABGR = _H444ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U444 to ARGB.
  int U444ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _U444ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _U444ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U444ToARGB');
  late final _U444ToARGB = _U444ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U444 to ABGR.
  int U444ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _U444ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _U444ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U444ToABGR');
  late final _U444ToABGR = _U444ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I010 to ARGB.
  int I010ToARGB(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _I010ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _I010ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010ToARGB');
  late final _I010ToARGB = _I010ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I010 to ABGR.
  int I010ToABGR(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _I010ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _I010ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010ToABGR');
  late final _I010ToABGR = _I010ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H010 to ARGB.
  int H010ToARGB(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _H010ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _H010ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H010ToARGB');
  late final _H010ToARGB = _H010ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H010 to ABGR.
  int H010ToABGR(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _H010ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _H010ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H010ToABGR');
  late final _H010ToABGR = _H010ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U010 to ARGB.
  int U010ToARGB(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _U010ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _U010ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U010ToARGB');
  late final _U010ToARGB = _U010ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U010 to ABGR.
  int U010ToABGR(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _U010ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _U010ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U010ToABGR');
  late final _U010ToABGR = _U010ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I210 to ARGB.
  int I210ToARGB(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _I210ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _I210ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210ToARGB');
  late final _I210ToARGB = _I210ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I210 to ABGR.
  int I210ToABGR(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _I210ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _I210ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210ToABGR');
  late final _I210ToABGR = _I210ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H210 to ARGB.
  int H210ToARGB(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _H210ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _H210ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H210ToARGB');
  late final _H210ToARGB = _H210ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H210 to ABGR.
  int H210ToABGR(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _H210ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _H210ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H210ToABGR');
  late final _H210ToABGR = _H210ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U210 to ARGB.
  int U210ToARGB(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _U210ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _U210ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U210ToARGB');
  late final _U210ToARGB = _U210ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U210 to ABGR.
  int U210ToABGR(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _U210ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _U210ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U210ToABGR');
  late final _U210ToABGR = _U210ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I420 with Alpha to preattenuated ARGB.
  int I420AlphaToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
    int attenuate,
  ) {
    return _I420AlphaToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      width,
      height,
      attenuate,
    );
  }

  late final _I420AlphaToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420AlphaToARGB');
  late final _I420AlphaToARGB = _I420AlphaToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Convert I420 with Alpha to preattenuated ABGR.
  int I420AlphaToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
    int attenuate,
  ) {
    return _I420AlphaToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
      attenuate,
    );
  }

  late final _I420AlphaToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420AlphaToABGR');
  late final _I420AlphaToABGR = _I420AlphaToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Convert I422 with Alpha to preattenuated ARGB.
  int I422AlphaToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
    int attenuate,
  ) {
    return _I422AlphaToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      width,
      height,
      attenuate,
    );
  }

  late final _I422AlphaToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422AlphaToARGB');
  late final _I422AlphaToARGB = _I422AlphaToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Convert I422 with Alpha to preattenuated ABGR.
  int I422AlphaToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
    int attenuate,
  ) {
    return _I422AlphaToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
      attenuate,
    );
  }

  late final _I422AlphaToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422AlphaToABGR');
  late final _I422AlphaToABGR = _I422AlphaToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Convert I444 with Alpha to preattenuated ARGB.
  int I444AlphaToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
    int attenuate,
  ) {
    return _I444AlphaToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      width,
      height,
      attenuate,
    );
  }

  late final _I444AlphaToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444AlphaToARGB');
  late final _I444AlphaToARGB = _I444AlphaToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Convert I444 with Alpha to preattenuated ABGR.
  int I444AlphaToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
    int attenuate,
  ) {
    return _I444AlphaToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
      attenuate,
    );
  }

  late final _I444AlphaToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444AlphaToABGR');
  late final _I444AlphaToABGR = _I444AlphaToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Convert I400 (grey) to ARGB.  Reverse of ARGBToI400.
  int I400ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _I400ToARGB(
      src_y,
      src_stride_y,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _I400ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I400ToARGB');
  late final _I400ToARGB = _I400ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert J400 (jpeg grey) to ARGB.
  int J400ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _J400ToARGB(
      src_y,
      src_stride_y,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _J400ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J400ToARGB');
  late final _J400ToARGB = _J400ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert NV12 to ARGB.
  int NV12ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _NV12ToARGB(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _NV12ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12ToARGB');
  late final _NV12ToARGB = _NV12ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV21 to ARGB.
  int NV21ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _NV21ToARGB(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _NV21ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV21ToARGB');
  late final _NV21ToARGB = _NV21ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV12 to ABGR.
  int NV12ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _NV12ToABGR(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _NV12ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12ToABGR');
  late final _NV12ToABGR = _NV12ToABGRPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV21 to ABGR.
  int NV21ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _NV21ToABGR(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _NV21ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV21ToABGR');
  late final _NV21ToABGR = _NV21ToABGRPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV12 to RGB24.
  int NV12ToRGB24(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    int width,
    int height,
  ) {
    return _NV12ToRGB24(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_rgb24,
      dst_stride_rgb24,
      width,
      height,
    );
  }

  late final _NV12ToRGB24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12ToRGB24');
  late final _NV12ToRGB24 = _NV12ToRGB24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV21 to RGB24.
  int NV21ToRGB24(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    int width,
    int height,
  ) {
    return _NV21ToRGB24(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_rgb24,
      dst_stride_rgb24,
      width,
      height,
    );
  }

  late final _NV21ToRGB24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV21ToRGB24');
  late final _NV21ToRGB24 = _NV21ToRGB24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV21 to YUV24.
  int NV21ToYUV24(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_yuv24,
    int dst_stride_yuv24,
    int width,
    int height,
  ) {
    return _NV21ToYUV24(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_yuv24,
      dst_stride_yuv24,
      width,
      height,
    );
  }

  late final _NV21ToYUV24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV21ToYUV24');
  late final _NV21ToYUV24 = _NV21ToYUV24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV12 to RAW.
  int NV12ToRAW(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_raw,
    int dst_stride_raw,
    int width,
    int height,
  ) {
    return _NV12ToRAW(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_raw,
      dst_stride_raw,
      width,
      height,
    );
  }

  late final _NV12ToRAWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12ToRAW');
  late final _NV12ToRAW = _NV12ToRAWPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV21 to RAW.
  int NV21ToRAW(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_raw,
    int dst_stride_raw,
    int width,
    int height,
  ) {
    return _NV21ToRAW(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_raw,
      dst_stride_raw,
      width,
      height,
    );
  }

  late final _NV21ToRAWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV21ToRAW');
  late final _NV21ToRAW = _NV21ToRAWPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert YUY2 to ARGB.
  int YUY2ToARGB(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int src_stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _YUY2ToARGB(
      src_yuy2,
      src_stride_yuy2,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _YUY2ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('YUY2ToARGB');
  late final _YUY2ToARGB = _YUY2ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert UYVY to ARGB.
  int UYVYToARGB(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int src_stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _UYVYToARGB(
      src_uyvy,
      src_stride_uyvy,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _UYVYToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('UYVYToARGB');
  late final _UYVYToARGB = _UYVYToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert I010 to AR30.
  int I010ToAR30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _I010ToAR30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _I010ToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010ToAR30');
  late final _I010ToAR30 = _I010ToAR30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H010 to AR30.
  int H010ToAR30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _H010ToAR30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _H010ToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H010ToAR30');
  late final _H010ToAR30 = _H010ToAR30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I010 to AB30.
  int I010ToAB30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _I010ToAB30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _I010ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010ToAB30');
  late final _I010ToAB30 = _I010ToAB30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H010 to AB30.
  int H010ToAB30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _H010ToAB30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _H010ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H010ToAB30');
  late final _H010ToAB30 = _H010ToAB30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U010 to AR30.
  int U010ToAR30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _U010ToAR30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _U010ToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U010ToAR30');
  late final _U010ToAR30 = _U010ToAR30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U010 to AB30.
  int U010ToAB30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _U010ToAB30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _U010ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U010ToAB30');
  late final _U010ToAB30 = _U010ToAB30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I210 to AR30.
  int I210ToAR30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _I210ToAR30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _I210ToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210ToAR30');
  late final _I210ToAR30 = _I210ToAR30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I210 to AB30.
  int I210ToAB30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _I210ToAB30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _I210ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210ToAB30');
  late final _I210ToAB30 = _I210ToAB30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H210 to AR30.
  int H210ToAR30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _H210ToAR30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _H210ToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H210ToAR30');
  late final _H210ToAR30 = _H210ToAR30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H210 to AB30.
  int H210ToAB30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _H210ToAB30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _H210ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H210ToAB30');
  late final _H210ToAB30 = _H210ToAB30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U210 to AR30.
  int U210ToAR30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _U210ToAR30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _U210ToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U210ToAR30');
  late final _U210ToAR30 = _U210ToAR30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert U210 to AB30.
  int U210ToAB30(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _U210ToAB30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _U210ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('U210ToAB30');
  late final _U210ToAB30 = _U210ToAB30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// BGRA little endian (argb in memory) to ARGB.
  int BGRAToARGB(
    ffi.Pointer<ffi.Uint8> src_bgra,
    int src_stride_bgra,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _BGRAToARGB(
      src_bgra,
      src_stride_bgra,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _BGRAToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('BGRAToARGB');
  late final _BGRAToARGB = _BGRAToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// ABGR little endian (rgba in memory) to ARGB.
  int ABGRToARGB(
    ffi.Pointer<ffi.Uint8> src_abgr,
    int src_stride_abgr,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ABGRToARGB(
      src_abgr,
      src_stride_abgr,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ABGRToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ABGRToARGB');
  late final _ABGRToARGB = _ABGRToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGBA little endian (abgr in memory) to ARGB.
  int RGBAToARGB(
    ffi.Pointer<ffi.Uint8> src_rgba,
    int src_stride_rgba,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _RGBAToARGB(
      src_rgba,
      src_stride_rgba,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _RGBAToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGBAToARGB');
  late final _RGBAToARGB = _RGBAToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGB little endian (bgr in memory) to ARGB.
  int RGB24ToARGB(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    int src_stride_rgb24,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _RGB24ToARGB(
      src_rgb24,
      src_stride_rgb24,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _RGB24ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGB24ToARGB');
  late final _RGB24ToARGB = _RGB24ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGB big endian (rgb in memory) to ARGB.
  int RAWToARGB(
    ffi.Pointer<ffi.Uint8> src_raw,
    int src_stride_raw,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _RAWToARGB(
      src_raw,
      src_stride_raw,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _RAWToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('RAWToARGB');
  late final _RAWToARGB = _RAWToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGB big endian (rgb in memory) to RGBA.
  int RAWToRGBA(
    ffi.Pointer<ffi.Uint8> src_raw,
    int src_stride_raw,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int dst_stride_rgba,
    int width,
    int height,
  ) {
    return _RAWToRGBA(
      src_raw,
      src_stride_raw,
      dst_rgba,
      dst_stride_rgba,
      width,
      height,
    );
  }

  late final _RAWToRGBAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('RAWToRGBA');
  late final _RAWToRGBA = _RAWToRGBAPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGB16 (RGBP fourcc) little endian to ARGB.
  int RGB565ToARGB(
    ffi.Pointer<ffi.Uint8> src_rgb565,
    int src_stride_rgb565,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _RGB565ToARGB(
      src_rgb565,
      src_stride_rgb565,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _RGB565ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGB565ToARGB');
  late final _RGB565ToARGB = _RGB565ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGB15 (RGBO fourcc) little endian to ARGB.
  int ARGB1555ToARGB(
    ffi.Pointer<ffi.Uint8> src_argb1555,
    int src_stride_argb1555,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGB1555ToARGB(
      src_argb1555,
      src_stride_argb1555,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGB1555ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGB1555ToARGB');
  late final _ARGB1555ToARGB = _ARGB1555ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGB12 (R444 fourcc) little endian to ARGB.
  int ARGB4444ToARGB(
    ffi.Pointer<ffi.Uint8> src_argb4444,
    int src_stride_argb4444,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGB4444ToARGB(
      src_argb4444,
      src_stride_argb4444,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGB4444ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGB4444ToARGB');
  late final _ARGB4444ToARGB = _ARGB4444ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert AR30 To ARGB.
  int AR30ToARGB(
    ffi.Pointer<ffi.Uint8> src_ar30,
    int src_stride_ar30,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _AR30ToARGB(
      src_ar30,
      src_stride_ar30,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _AR30ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('AR30ToARGB');
  late final _AR30ToARGB = _AR30ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert AR30 To ABGR.
  int AR30ToABGR(
    ffi.Pointer<ffi.Uint8> src_ar30,
    int src_stride_ar30,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _AR30ToABGR(
      src_ar30,
      src_stride_ar30,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _AR30ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('AR30ToABGR');
  late final _AR30ToABGR = _AR30ToABGRPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert AR30 To AB30.
  int AR30ToAB30(
    ffi.Pointer<ffi.Uint8> src_ar30,
    int src_stride_ar30,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _AR30ToAB30(
      src_ar30,
      src_stride_ar30,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _AR30ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('AR30ToAB30');
  late final _AR30ToAB30 = _AR30ToAB30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert AR64 to ARGB.
  int AR64ToARGB(
    ffi.Pointer<ffi.Uint16> src_ar64,
    int src_stride_ar64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _AR64ToARGB(
      src_ar64,
      src_stride_ar64,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _AR64ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('AR64ToARGB');
  late final _AR64ToARGB = _AR64ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert AB64 to ARGB.
  int AB64ToARGB(
    ffi.Pointer<ffi.Uint16> src_ab64,
    int src_stride_ab64,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _AB64ToARGB(
      src_ab64,
      src_stride_ab64,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _AB64ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('AB64ToARGB');
  late final _AB64ToARGB = _AB64ToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert AR64 To AB64.
  int AR64ToAB64(
    ffi.Pointer<ffi.Uint16> src_ar64,
    int src_stride_ar64,
    ffi.Pointer<ffi.Uint16> dst_ab64,
    int dst_stride_ab64,
    int width,
    int height,
  ) {
    return _AR64ToAB64(
      src_ar64,
      src_stride_ar64,
      dst_ab64,
      dst_stride_ab64,
      width,
      height,
    );
  }

  late final _AR64ToAB64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('AR64ToAB64');
  late final _AR64ToAB64 = _AR64ToAB64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          int, int)>();

  /// src_width/height provided by capture
  /// dst_width/height for clipping determine final size.
  int MJPGToARGB(
    ffi.Pointer<ffi.Uint8> sample,
    int sample_size,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int src_width,
    int src_height,
    int dst_width,
    int dst_height,
  ) {
    return _MJPGToARGB(
      sample,
      sample_size,
      dst_argb,
      dst_stride_argb,
      src_width,
      src_height,
      dst_width,
      dst_height,
    );
  }

  late final _MJPGToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MJPGToARGB');
  late final _MJPGToARGB = _MJPGToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int, int)>();

  /// Convert Android420 to ARGB.
  int Android420ToARGB(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    int src_pixel_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _Android420ToARGB(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_pixel_stride_uv,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _Android420ToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('Android420ToARGB');
  late final _Android420ToARGB = _Android420ToARGBPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert Android420 to ABGR.
  int Android420ToABGR(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    int src_pixel_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_abgr,
    int dst_stride_abgr,
    int width,
    int height,
  ) {
    return _Android420ToABGR(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_pixel_stride_uv,
      dst_abgr,
      dst_stride_abgr,
      width,
      height,
    );
  }

  late final _Android420ToABGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('Android420ToABGR');
  late final _Android420ToABGR = _Android420ToABGRPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert NV12 to RGB565.
  int NV12ToRGB565(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    int width,
    int height,
  ) {
    return _NV12ToRGB565(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_rgb565,
      dst_stride_rgb565,
      width,
      height,
    );
  }

  late final _NV12ToRGB565Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12ToRGB565');
  late final _NV12ToRGB565 = _NV12ToRGB565Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert I422 to BGRA.
  int I422ToBGRA(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_bgra,
    int dst_stride_bgra,
    int width,
    int height,
  ) {
    return _I422ToBGRA(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_bgra,
      dst_stride_bgra,
      width,
      height,
    );
  }

  late final _I422ToBGRAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToBGRA');
  late final _I422ToBGRA = _I422ToBGRAPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I422 to RGBA.
  int I422ToRGBA(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int dst_stride_rgba,
    int width,
    int height,
  ) {
    return _I422ToRGBA(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgba,
      dst_stride_rgba,
      width,
      height,
    );
  }

  late final _I422ToRGBAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToRGBA');
  late final _I422ToRGBA = _I422ToRGBAPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToBGRA(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_bgra,
    int dst_stride_bgra,
    int width,
    int height,
  ) {
    return _I420ToBGRA(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_bgra,
      dst_stride_bgra,
      width,
      height,
    );
  }

  late final _I420ToBGRAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToBGRA');
  late final _I420ToBGRA = _I420ToBGRAPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToRGBA(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int dst_stride_rgba,
    int width,
    int height,
  ) {
    return _I420ToRGBA(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgba,
      dst_stride_rgba,
      width,
      height,
    );
  }

  late final _I420ToRGBAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToRGBA');
  late final _I420ToRGBA = _I420ToRGBAPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToRGB24(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    int width,
    int height,
  ) {
    return _I420ToRGB24(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb24,
      dst_stride_rgb24,
      width,
      height,
    );
  }

  late final _I420ToRGB24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToRGB24');
  late final _I420ToRGB24 = _I420ToRGB24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToRAW(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_raw,
    int dst_stride_raw,
    int width,
    int height,
  ) {
    return _I420ToRAW(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_raw,
      dst_stride_raw,
      width,
      height,
    );
  }

  late final _I420ToRAWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToRAW');
  late final _I420ToRAW = _I420ToRAWPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int H420ToRGB24(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    int width,
    int height,
  ) {
    return _H420ToRGB24(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb24,
      dst_stride_rgb24,
      width,
      height,
    );
  }

  late final _H420ToRGB24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H420ToRGB24');
  late final _H420ToRGB24 = _H420ToRGB24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int H420ToRAW(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_raw,
    int dst_stride_raw,
    int width,
    int height,
  ) {
    return _H420ToRAW(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_raw,
      dst_stride_raw,
      width,
      height,
    );
  }

  late final _H420ToRAWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H420ToRAW');
  late final _H420ToRAW = _H420ToRAWPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int J420ToRGB24(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    int width,
    int height,
  ) {
    return _J420ToRGB24(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb24,
      dst_stride_rgb24,
      width,
      height,
    );
  }

  late final _J420ToRGB24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J420ToRGB24');
  late final _J420ToRGB24 = _J420ToRGB24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int J420ToRAW(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_raw,
    int dst_stride_raw,
    int width,
    int height,
  ) {
    return _J420ToRAW(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_raw,
      dst_stride_raw,
      width,
      height,
    );
  }

  late final _J420ToRAWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J420ToRAW');
  late final _J420ToRAW = _J420ToRAWPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToRGB565(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    int width,
    int height,
  ) {
    return _I420ToRGB565(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb565,
      dst_stride_rgb565,
      width,
      height,
    );
  }

  late final _I420ToRGB565Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToRGB565');
  late final _I420ToRGB565 = _I420ToRGB565Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int J420ToRGB565(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    int width,
    int height,
  ) {
    return _J420ToRGB565(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb565,
      dst_stride_rgb565,
      width,
      height,
    );
  }

  late final _J420ToRGB565Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('J420ToRGB565');
  late final _J420ToRGB565 = _J420ToRGB565Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int H420ToRGB565(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    int width,
    int height,
  ) {
    return _H420ToRGB565(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb565,
      dst_stride_rgb565,
      width,
      height,
    );
  }

  late final _H420ToRGB565Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H420ToRGB565');
  late final _H420ToRGB565 = _H420ToRGB565Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I422ToRGB565(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    int width,
    int height,
  ) {
    return _I422ToRGB565(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb565,
      dst_stride_rgb565,
      width,
      height,
    );
  }

  late final _I422ToRGB565Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToRGB565');
  late final _I422ToRGB565 = _I422ToRGB565Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I420 To RGB565 with 4x4 dither matrix (16 bytes).
  /// Values in dither matrix from 0 to 7 recommended.
  /// The order of the dither matrix is first byte is upper left.
  int I420ToRGB565Dither(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    ffi.Pointer<ffi.Uint8> dither4x4,
    int width,
    int height,
  ) {
    return _I420ToRGB565Dither(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb565,
      dst_stride_rgb565,
      dither4x4,
      width,
      height,
    );
  }

  late final _I420ToRGB565DitherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('I420ToRGB565Dither');
  late final _I420ToRGB565Dither = _I420ToRGB565DitherPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int)>();

  int I420ToARGB1555(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb1555,
    int dst_stride_argb1555,
    int width,
    int height,
  ) {
    return _I420ToARGB1555(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb1555,
      dst_stride_argb1555,
      width,
      height,
    );
  }

  late final _I420ToARGB1555Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToARGB1555');
  late final _I420ToARGB1555 = _I420ToARGB1555Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToARGB4444(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb4444,
    int dst_stride_argb4444,
    int width,
    int height,
  ) {
    return _I420ToARGB4444(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb4444,
      dst_stride_argb4444,
      width,
      height,
    );
  }

  late final _I420ToARGB4444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToARGB4444');
  late final _I420ToARGB4444 = _I420ToARGB4444Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I420 to AR30.
  int I420ToAR30(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _I420ToAR30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _I420ToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToAR30');
  late final _I420ToAR30 = _I420ToAR30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I420 to AB30.
  int I420ToAB30(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _I420ToAB30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _I420ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToAB30');
  late final _I420ToAB30 = _I420ToAB30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H420 to AR30.
  int H420ToAR30(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
  ) {
    return _H420ToAR30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
    );
  }

  late final _H420ToAR30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H420ToAR30');
  late final _H420ToAR30 = _H420ToAR30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert H420 to AB30.
  int H420ToAB30(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ab30,
    int dst_stride_ab30,
    int width,
    int height,
  ) {
    return _H420ToAB30(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ab30,
      dst_stride_ab30,
      width,
      height,
    );
  }

  late final _H420ToAB30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('H420ToAB30');
  late final _H420ToAB30 = _H420ToAB30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I420 to ARGB with matrix.
  int I420ToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I420ToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I420ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I420ToARGBMatrix');
  late final _I420ToARGBMatrix = _I420ToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert I422 to ARGB with matrix.
  int I422ToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I422ToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I422ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I422ToARGBMatrix');
  late final _I422ToARGBMatrix = _I422ToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert I444 to ARGB with matrix.
  int I444ToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I444ToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I444ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I444ToARGBMatrix');
  late final _I444ToARGBMatrix = _I444ToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert 10 bit 420 YUV to ARGB with matrix.
  int I010ToAR30Matrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I010ToAR30Matrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I010ToAR30MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I010ToAR30Matrix');
  late final _I010ToAR30Matrix = _I010ToAR30MatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert 10 bit 420 YUV to ARGB with matrix.
  int I210ToAR30Matrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I210ToAR30Matrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I210ToAR30MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I210ToAR30Matrix');
  late final _I210ToAR30Matrix = _I210ToAR30MatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert 10 bit 444 YUV to ARGB with matrix.
  int I410ToAR30Matrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I410ToAR30Matrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I410ToAR30MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I410ToAR30Matrix');
  late final _I410ToAR30Matrix = _I410ToAR30MatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert 10 bit YUV to ARGB with matrix.
  int I010ToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I010ToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I010ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I010ToARGBMatrix');
  late final _I010ToARGBMatrix = _I010ToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// multiply 12 bit yuv into high bits to allow any number of bits.
  int I012ToAR30Matrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I012ToAR30Matrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I012ToAR30MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I012ToAR30Matrix');
  late final _I012ToAR30Matrix = _I012ToAR30MatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert 12 bit YUV to ARGB with matrix.
  int I012ToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I012ToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I012ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I012ToARGBMatrix');
  late final _I012ToARGBMatrix = _I012ToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert 10 bit 422 YUV to ARGB with matrix.
  int I210ToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I210ToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I210ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I210ToARGBMatrix');
  late final _I210ToARGBMatrix = _I210ToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert 10 bit 444 YUV to ARGB with matrix.
  int I410ToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I410ToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I410ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I410ToARGBMatrix');
  late final _I410ToARGBMatrix = _I410ToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert P010 to ARGB with matrix.
  int P010ToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _P010ToARGBMatrix(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _P010ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('P010ToARGBMatrix');
  late final _P010ToARGBMatrix = _P010ToARGBMatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert P210 to ARGB with matrix.
  int P210ToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _P210ToARGBMatrix(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _P210ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('P210ToARGBMatrix');
  late final _P210ToARGBMatrix = _P210ToARGBMatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert P010 to AR30 with matrix.
  int P010ToAR30Matrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _P010ToAR30Matrix(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_ar30,
      dst_stride_ar30,
      yuvconstants,
      width,
      height,
    );
  }

  late final _P010ToAR30MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('P010ToAR30Matrix');
  late final _P010ToAR30Matrix = _P010ToAR30MatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert P210 to AR30 with matrix.
  int P210ToAR30Matrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _P210ToAR30Matrix(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_ar30,
      dst_stride_ar30,
      yuvconstants,
      width,
      height,
    );
  }

  late final _P210ToAR30MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('P210ToAR30Matrix');
  late final _P210ToAR30Matrix = _P210ToAR30MatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert I420 with Alpha to preattenuated ARGB with matrix.
  int I420AlphaToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
    int attenuate,
  ) {
    return _I420AlphaToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
      attenuate,
    );
  }

  late final _I420AlphaToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420AlphaToARGBMatrix');
  late final _I420AlphaToARGBMatrix = _I420AlphaToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int,
          int)>();

  /// Convert I422 with Alpha to preattenuated ARGB with matrix.
  int I422AlphaToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
    int attenuate,
  ) {
    return _I422AlphaToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
      attenuate,
    );
  }

  late final _I422AlphaToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422AlphaToARGBMatrix');
  late final _I422AlphaToARGBMatrix = _I422AlphaToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int,
          int)>();

  /// Convert I444 with Alpha to preattenuated ARGB with matrix.
  int I444AlphaToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
    int attenuate,
  ) {
    return _I444AlphaToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
      attenuate,
    );
  }

  late final _I444AlphaToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444AlphaToARGBMatrix');
  late final _I444AlphaToARGBMatrix = _I444AlphaToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int,
          int)>();

  /// Convert I010 with Alpha to preattenuated ARGB with matrix.
  int I010AlphaToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
    int attenuate,
  ) {
    return _I010AlphaToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
      attenuate,
    );
  }

  late final _I010AlphaToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I010AlphaToARGBMatrix');
  late final _I010AlphaToARGBMatrix = _I010AlphaToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int,
          int)>();

  /// Convert I210 with Alpha to preattenuated ARGB with matrix.
  int I210AlphaToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
    int attenuate,
  ) {
    return _I210AlphaToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
      attenuate,
    );
  }

  late final _I210AlphaToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I210AlphaToARGBMatrix');
  late final _I210AlphaToARGBMatrix = _I210AlphaToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int,
          int)>();

  /// Convert I410 with Alpha to preattenuated ARGB with matrix.
  int I410AlphaToARGBMatrix(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
    int attenuate,
  ) {
    return _I410AlphaToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
      attenuate,
    );
  }

  late final _I410AlphaToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I410AlphaToARGBMatrix');
  late final _I410AlphaToARGBMatrix = _I410AlphaToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int,
          int)>();

  /// Convert NV12 to ARGB with matrix.
  int NV12ToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _NV12ToARGBMatrix(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _NV12ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('NV12ToARGBMatrix');
  late final _NV12ToARGBMatrix = _NV12ToARGBMatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert NV21 to ARGB with matrix.
  int NV21ToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _NV21ToARGBMatrix(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _NV21ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('NV21ToARGBMatrix');
  late final _NV21ToARGBMatrix = _NV21ToARGBMatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert NV12 to RGB565 with matrix.
  int NV12ToRGB565Matrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _NV12ToRGB565Matrix(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_rgb565,
      dst_stride_rgb565,
      yuvconstants,
      width,
      height,
    );
  }

  late final _NV12ToRGB565MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('NV12ToRGB565Matrix');
  late final _NV12ToRGB565Matrix = _NV12ToRGB565MatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert NV12 to RGB24 with matrix.
  int NV12ToRGB24Matrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _NV12ToRGB24Matrix(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_rgb24,
      dst_stride_rgb24,
      yuvconstants,
      width,
      height,
    );
  }

  late final _NV12ToRGB24MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('NV12ToRGB24Matrix');
  late final _NV12ToRGB24Matrix = _NV12ToRGB24MatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert NV21 to RGB24 with matrix.
  int NV21ToRGB24Matrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _NV21ToRGB24Matrix(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_rgb24,
      dst_stride_rgb24,
      yuvconstants,
      width,
      height,
    );
  }

  late final _NV21ToRGB24MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('NV21ToRGB24Matrix');
  late final _NV21ToRGB24Matrix = _NV21ToRGB24MatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert Android420 to ARGB with matrix.
  int Android420ToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    int src_pixel_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _Android420ToARGBMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_pixel_stride_uv,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _Android420ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('Android420ToARGBMatrix');
  late final _Android420ToARGBMatrix = _Android420ToARGBMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert I422 to RGBA with matrix.
  int I422ToRGBAMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int dst_stride_rgba,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I422ToRGBAMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgba,
      dst_stride_rgba,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I422ToRGBAMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I422ToRGBAMatrix');
  late final _I422ToRGBAMatrix = _I422ToRGBAMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert I422 to RGBA with matrix.
  int I420ToRGBAMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgba,
    int dst_stride_rgba,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I420ToRGBAMatrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgba,
      dst_stride_rgba,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I420ToRGBAMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I420ToRGBAMatrix');
  late final _I420ToRGBAMatrix = _I420ToRGBAMatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert I420 to RGB24 with matrix.
  int I420ToRGB24Matrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I420ToRGB24Matrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb24,
      dst_stride_rgb24,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I420ToRGB24MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I420ToRGB24Matrix');
  late final _I420ToRGB24Matrix = _I420ToRGB24MatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert I420 to RGB565 with specified color matrix.
  int I420ToRGB565Matrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_rgb565,
    int dst_stride_rgb565,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I420ToRGB565Matrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_rgb565,
      dst_stride_rgb565,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I420ToRGB565MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I420ToRGB565Matrix');
  late final _I420ToRGB565Matrix = _I420ToRGB565MatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert I420 to AR30 with matrix.
  int I420ToAR30Matrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I420ToAR30Matrix(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_ar30,
      dst_stride_ar30,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I420ToAR30MatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I420ToAR30Matrix');
  late final _I420ToAR30Matrix = _I420ToAR30MatrixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<YuvConstants>,
          int,
          int)>();

  /// Convert I400 (grey) to ARGB.  Reverse of ARGBToI400.
  int I400ToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<YuvConstants> yuvconstants,
    int width,
    int height,
  ) {
    return _I400ToARGBMatrix(
      src_y,
      src_stride_y,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _I400ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<YuvConstants>,
              ffi.Int,
              ffi.Int)>>('I400ToARGBMatrix');
  late final _I400ToARGBMatrix = _I400ToARGBMatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<YuvConstants>, int, int)>();

  /// Convert camera sample to ARGB with cropping, rotation and vertical flip.
  /// "sample_size" is needed to parse MJPG.
  /// "dst_stride_argb" number of bytes in a row of the dst_argb plane.
  /// Normally this would be the same as dst_width, with recommended alignment
  /// to 16 bytes for better efficiency.
  /// If rotation of 90 or 270 is used, stride is affected. The caller should
  /// allocate the I420 buffer according to rotation.
  /// "dst_stride_u" number of bytes in a row of the dst_u plane.
  /// Normally this would be the same as (dst_width + 1) / 2, with
  /// recommended alignment to 16 bytes for better efficiency.
  /// If rotation of 90 or 270 is used, stride is affected.
  /// "crop_x" and "crop_y" are starting position for cropping.
  /// To center, crop_x = (src_width - dst_width) / 2
  /// crop_y = (src_height - dst_height) / 2
  /// "src_width" / "src_height" is size of src_frame in pixels.
  /// "src_height" can be negative indicating a vertically flipped image source.
  /// "crop_width" / "crop_height" is the size to crop the src to.
  /// Must be less than or equal to src_width/src_height
  /// Cropping parameters are pre-rotation.
  /// "rotation" can be 0, 90, 180 or 270.
  /// "fourcc" is a fourcc. ie 'I420', 'YUY2'
  /// Returns 0 for successful; -1 for invalid parameter. Non-zero for failure.
  int ConvertToARGB(
    ffi.Pointer<ffi.Uint8> sample,
    int sample_size,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int crop_x,
    int crop_y,
    int src_width,
    int src_height,
    int crop_width,
    int crop_height,
    int rotation,
    int fourcc,
  ) {
    return _ConvertToARGB(
      sample,
      sample_size,
      dst_argb,
      dst_stride_argb,
      crop_x,
      crop_y,
      src_width,
      src_height,
      crop_width,
      crop_height,
      rotation,
      fourcc,
    );
  }

  late final _ConvertToARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32,
              ffi.Uint32)>>('ConvertToARGB');
  late final _ConvertToARGB = _ConvertToARGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int, int, int, int, int, int)>();

  int I420ToI010(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I420ToI010(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I420ToI010Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToI010');
  late final _I420ToI010 = _I420ToI010Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  int I420ToI012(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I420ToI012(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I420ToI012Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToI012');
  late final _I420ToI012 = _I420ToI012Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int)>();

  int I420ToI422(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I420ToI422(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I420ToI422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToI422');
  late final _I420ToI422 = _I420ToI422Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Copy to I400. Source can be I420, I422, I444, I400, NV12 or NV21.
  int I400Copy(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _I400Copy(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _I400CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('I400Copy');
  late final _I400Copy = _I400CopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  int I420ToNV12(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _I420ToNV12(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _I420ToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToNV12');
  late final _I420ToNV12 = _I420ToNV12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToNV21(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _I420ToNV21(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _I420ToNV21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToNV21');
  late final _I420ToNV21 = _I420ToNV21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToYUY2(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_yuy2,
    int dst_stride_yuy2,
    int width,
    int height,
  ) {
    return _I420ToYUY2(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_yuy2,
      dst_stride_yuy2,
      width,
      height,
    );
  }

  late final _I420ToYUY2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToYUY2');
  late final _I420ToYUY2 = _I420ToYUY2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I420ToUYVY(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_uyvy,
    int dst_stride_uyvy,
    int width,
    int height,
  ) {
    return _I420ToUYVY(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uyvy,
      dst_stride_uyvy,
      width,
      height,
    );
  }

  late final _I420ToUYVYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToUYVY');
  late final _I420ToUYVY = _I420ToUYVYPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I420 to specified format.
  /// "dst_sample_stride" is bytes in a row for the destination. Pass 0 if the
  /// buffer has contiguous rows. Can be negative. A multiple of 16 is optimal.
  int ConvertFromI420(
    ffi.Pointer<ffi.Uint8> y,
    int y_stride,
    ffi.Pointer<ffi.Uint8> u,
    int u_stride,
    ffi.Pointer<ffi.Uint8> v,
    int v_stride,
    ffi.Pointer<ffi.Uint8> dst_sample,
    int dst_sample_stride,
    int width,
    int height,
    int fourcc,
  ) {
    return _ConvertFromI420(
      y,
      y_stride,
      u,
      u_stride,
      v,
      v_stride,
      dst_sample,
      dst_sample_stride,
      width,
      height,
      fourcc,
    );
  }

  late final _ConvertFromI420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Uint32)>>('ConvertFromI420');
  late final _ConvertFromI420 = _ConvertFromI420Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Copy a plane of data.
  void CopyPlane(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _CopyPlane(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _CopyPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('CopyPlane');
  late final _CopyPlane = _CopyPlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  void CopyPlane_16(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _CopyPlane_16(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _CopyPlane_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('CopyPlane_16');
  late final _CopyPlane_16 = _CopyPlane_16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          int, int)>();

  void Convert16To8Plane(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int scale,
    int width,
    int height,
  ) {
    return _Convert16To8Plane(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      scale,
      width,
      height,
    );
  }

  late final _Convert16To8PlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('Convert16To8Plane');
  late final _Convert16To8Plane = _Convert16To8PlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int)>();

  void Convert8To16Plane(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    int scale,
    int width,
    int height,
  ) {
    return _Convert8To16Plane(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      scale,
      width,
      height,
    );
  }

  late final _Convert8To16PlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('Convert8To16Plane');
  late final _Convert8To16Plane = _Convert8To16PlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint16>, int,
          int, int, int)>();

  /// Set a plane of data to a 32 bit value.
  void SetPlane(
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
    int value,
  ) {
    return _SetPlane(
      dst_y,
      dst_stride_y,
      width,
      height,
      value,
    );
  }

  late final _SetPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Uint32)>>('SetPlane');
  late final _SetPlane = _SetPlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  /// Split interleaved UV plane into separate U and V planes.
  void SplitUVPlane(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _SplitUVPlane(
      src_uv,
      src_stride_uv,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _SplitUVPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('SplitUVPlane');
  late final _SplitUVPlane = _SplitUVPlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Merge separate U and V planes into one interleaved UV plane.
  void MergeUVPlane(
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _MergeUVPlane(
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _MergeUVPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MergeUVPlane');
  late final _MergeUVPlane = _MergeUVPlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Split interleaved msb UV plane into separate lsb U and V planes.
  void SplitUVPlane_16(
    ffi.Pointer<ffi.Uint16> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int width,
    int height,
    int depth,
  ) {
    return _SplitUVPlane_16(
      src_uv,
      src_stride_uv,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
      depth,
    );
  }

  late final _SplitUVPlane_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('SplitUVPlane_16');
  late final _SplitUVPlane_16 = _SplitUVPlane_16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          ffi.Pointer<ffi.Uint16>, int, int, int, int)>();

  /// Merge separate lsb U and V planes into one interleaved msb UV plane.
  void MergeUVPlane_16(
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint16> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
    int depth,
  ) {
    return _MergeUVPlane_16(
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uv,
      dst_stride_uv,
      width,
      height,
      depth,
    );
  }

  late final _MergeUVPlane_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MergeUVPlane_16');
  late final _MergeUVPlane_16 = _MergeUVPlane_16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          ffi.Pointer<ffi.Uint16>, int, int, int, int)>();

  /// Convert lsb plane to msb plane
  void ConvertToMSBPlane_16(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    int width,
    int height,
    int depth,
  ) {
    return _ConvertToMSBPlane_16(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      width,
      height,
      depth,
    );
  }

  late final _ConvertToMSBPlane_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ConvertToMSBPlane_16');
  late final _ConvertToMSBPlane_16 = _ConvertToMSBPlane_16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          int, int, int)>();

  /// Convert msb plane to lsb plane
  void ConvertToLSBPlane_16(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    int width,
    int height,
    int depth,
  ) {
    return _ConvertToLSBPlane_16(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      width,
      height,
      depth,
    );
  }

  late final _ConvertToLSBPlane_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ConvertToLSBPlane_16');
  late final _ConvertToLSBPlane_16 = _ConvertToLSBPlane_16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          int, int, int)>();

  /// Scale U and V to half width and height and merge into interleaved UV plane.
  /// width and height are source size, allowing odd sizes.
  /// Use for converting I444 or I422 to NV12.
  void HalfMergeUVPlane(
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _HalfMergeUVPlane(
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _HalfMergeUVPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('HalfMergeUVPlane');
  late final _HalfMergeUVPlane = _HalfMergeUVPlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Swap U and V channels in interleaved UV plane.
  void SwapUVPlane(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _SwapUVPlane(
      src_uv,
      src_stride_uv,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _SwapUVPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('SwapUVPlane');
  late final _SwapUVPlane = _SwapUVPlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Split interleaved RGB plane into separate R, G and B planes.
  void SplitRGBPlane(
    ffi.Pointer<ffi.Uint8> src_rgb,
    int src_stride_rgb,
    ffi.Pointer<ffi.Uint8> dst_r,
    int dst_stride_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    int dst_stride_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int dst_stride_b,
    int width,
    int height,
  ) {
    return _SplitRGBPlane(
      src_rgb,
      src_stride_rgb,
      dst_r,
      dst_stride_r,
      dst_g,
      dst_stride_g,
      dst_b,
      dst_stride_b,
      width,
      height,
    );
  }

  late final _SplitRGBPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('SplitRGBPlane');
  late final _SplitRGBPlane = _SplitRGBPlanePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Merge separate R, G and B planes into one interleaved RGB plane.
  void MergeRGBPlane(
    ffi.Pointer<ffi.Uint8> src_r,
    int src_stride_r,
    ffi.Pointer<ffi.Uint8> src_g,
    int src_stride_g,
    ffi.Pointer<ffi.Uint8> src_b,
    int src_stride_b,
    ffi.Pointer<ffi.Uint8> dst_rgb,
    int dst_stride_rgb,
    int width,
    int height,
  ) {
    return _MergeRGBPlane(
      src_r,
      src_stride_r,
      src_g,
      src_stride_g,
      src_b,
      src_stride_b,
      dst_rgb,
      dst_stride_rgb,
      width,
      height,
    );
  }

  late final _MergeRGBPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MergeRGBPlane');
  late final _MergeRGBPlane = _MergeRGBPlanePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Split interleaved ARGB plane into separate R, G, B and A planes.
  /// dst_a can be NULL to discard alpha plane.
  void SplitARGBPlane(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_r,
    int dst_stride_r,
    ffi.Pointer<ffi.Uint8> dst_g,
    int dst_stride_g,
    ffi.Pointer<ffi.Uint8> dst_b,
    int dst_stride_b,
    ffi.Pointer<ffi.Uint8> dst_a,
    int dst_stride_a,
    int width,
    int height,
  ) {
    return _SplitARGBPlane(
      src_argb,
      src_stride_argb,
      dst_r,
      dst_stride_r,
      dst_g,
      dst_stride_g,
      dst_b,
      dst_stride_b,
      dst_a,
      dst_stride_a,
      width,
      height,
    );
  }

  late final _SplitARGBPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('SplitARGBPlane');
  late final _SplitARGBPlane = _SplitARGBPlanePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Merge separate R, G, B and A planes into one interleaved ARGB plane.
  /// src_a can be NULL to fill opaque value to alpha.
  void MergeARGBPlane(
    ffi.Pointer<ffi.Uint8> src_r,
    int src_stride_r,
    ffi.Pointer<ffi.Uint8> src_g,
    int src_stride_g,
    ffi.Pointer<ffi.Uint8> src_b,
    int src_stride_b,
    ffi.Pointer<ffi.Uint8> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _MergeARGBPlane(
      src_r,
      src_stride_r,
      src_g,
      src_stride_g,
      src_b,
      src_stride_b,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _MergeARGBPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MergeARGBPlane');
  late final _MergeARGBPlane = _MergeARGBPlanePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Merge separate 'depth' bit R, G and B planes stored in lsb
  /// into one interleaved XR30 plane.
  /// depth should in range [10, 16]
  void MergeXR30Plane(
    ffi.Pointer<ffi.Uint16> src_r,
    int src_stride_r,
    ffi.Pointer<ffi.Uint16> src_g,
    int src_stride_g,
    ffi.Pointer<ffi.Uint16> src_b,
    int src_stride_b,
    ffi.Pointer<ffi.Uint8> dst_ar30,
    int dst_stride_ar30,
    int width,
    int height,
    int depth,
  ) {
    return _MergeXR30Plane(
      src_r,
      src_stride_r,
      src_g,
      src_stride_g,
      src_b,
      src_stride_b,
      dst_ar30,
      dst_stride_ar30,
      width,
      height,
      depth,
    );
  }

  late final _MergeXR30PlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MergeXR30Plane');
  late final _MergeXR30Plane = _MergeXR30PlanePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Merge separate 'depth' bit R, G, B and A planes stored in lsb
  /// into one interleaved AR64 plane.
  /// src_a can be NULL to fill opaque value to alpha.
  /// depth should in range [1, 16]
  void MergeAR64Plane(
    ffi.Pointer<ffi.Uint16> src_r,
    int src_stride_r,
    ffi.Pointer<ffi.Uint16> src_g,
    int src_stride_g,
    ffi.Pointer<ffi.Uint16> src_b,
    int src_stride_b,
    ffi.Pointer<ffi.Uint16> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int dst_stride_ar64,
    int width,
    int height,
    int depth,
  ) {
    return _MergeAR64Plane(
      src_r,
      src_stride_r,
      src_g,
      src_stride_g,
      src_b,
      src_stride_b,
      src_a,
      src_stride_a,
      dst_ar64,
      dst_stride_ar64,
      width,
      height,
      depth,
    );
  }

  late final _MergeAR64PlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MergeAR64Plane');
  late final _MergeAR64Plane = _MergeAR64PlanePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          int)>();

  /// Merge separate 'depth' bit R, G, B and A planes stored in lsb
  /// into one interleaved ARGB plane.
  /// src_a can be NULL to fill opaque value to alpha.
  /// depth should in range [8, 16]
  void MergeARGB16To8Plane(
    ffi.Pointer<ffi.Uint16> src_r,
    int src_stride_r,
    ffi.Pointer<ffi.Uint16> src_g,
    int src_stride_g,
    ffi.Pointer<ffi.Uint16> src_b,
    int src_stride_b,
    ffi.Pointer<ffi.Uint16> src_a,
    int src_stride_a,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
    int depth,
  ) {
    return _MergeARGB16To8Plane(
      src_r,
      src_stride_r,
      src_g,
      src_stride_g,
      src_b,
      src_stride_b,
      src_a,
      src_stride_a,
      dst_argb,
      dst_stride_argb,
      width,
      height,
      depth,
    );
  }

  late final _MergeARGB16To8PlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MergeARGB16To8Plane');
  late final _MergeARGB16To8Plane = _MergeARGB16To8PlanePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Copy I400.  Supports inverting.
  int I400ToI400(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _I400ToI400(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _I400ToI400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I400ToI400');
  late final _I400ToI400 = _I400ToI400Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  int I422Copy(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I422Copy(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I422CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422Copy');
  late final _I422Copy = _I422CopyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int I444Copy(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I444Copy(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I444CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I444Copy');
  late final _I444Copy = _I444CopyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Copy NV12. Supports inverting.
  int NV12Copy(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _NV12Copy(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _NV12CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12Copy');
  late final _NV12Copy = _NV12CopyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Copy NV21. Supports inverting.
  int NV21Copy(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_vu,
    int dst_stride_vu,
    int width,
    int height,
  ) {
    return _NV21Copy(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_y,
      dst_stride_y,
      dst_vu,
      dst_stride_vu,
      width,
      height,
    );
  }

  late final _NV21CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV21Copy');
  late final _NV21Copy = _NV21CopyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert YUY2 to I422.
  int YUY2ToI422(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int src_stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _YUY2ToI422(
      src_yuy2,
      src_stride_yuy2,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _YUY2ToI422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('YUY2ToI422');
  late final _YUY2ToI422 = _YUY2ToI422Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert UYVY to I422.
  int UYVYToI422(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int src_stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _UYVYToI422(
      src_uyvy,
      src_stride_uyvy,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _UYVYToI422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('UYVYToI422');
  late final _UYVYToI422 = _UYVYToI422Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int YUY2ToNV12(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int src_stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _YUY2ToNV12(
      src_yuy2,
      src_stride_yuy2,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _YUY2ToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('YUY2ToNV12');
  late final _YUY2ToNV12 = _YUY2ToNV12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  int UYVYToNV12(
    ffi.Pointer<ffi.Uint8> src_uyvy,
    int src_stride_uyvy,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _UYVYToNV12(
      src_uyvy,
      src_stride_uyvy,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _UYVYToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('UYVYToNV12');
  late final _UYVYToNV12 = _UYVYToNV12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert NV21 to NV12.
  int NV21ToNV12(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_vu,
    int src_stride_vu,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _NV21ToNV12(
      src_y,
      src_stride_y,
      src_vu,
      src_stride_vu,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _NV21ToNV12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV21ToNV12');
  late final _NV21ToNV12 = _NV21ToNV12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  int YUY2ToY(
    ffi.Pointer<ffi.Uint8> src_yuy2,
    int src_stride_yuy2,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _YUY2ToY(
      src_yuy2,
      src_stride_yuy2,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _YUY2ToYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('YUY2ToY');
  late final _YUY2ToY = _YUY2ToYPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert I420 to I400. (calls CopyPlane ignoring u/v).
  int I420ToI400(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _I420ToI400(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _I420ToI400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420ToI400');
  late final _I420ToI400 = _I420ToI400Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// I420 mirror.
  int I420Mirror(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I420Mirror(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I420MirrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420Mirror');
  late final _I420Mirror = _I420MirrorPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// I400 mirror.  A single plane is mirrored horizontally.
  /// Pass negative height to achieve 180 degree rotation.
  int I400Mirror(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _I400Mirror(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _I400MirrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I400Mirror');
  late final _I400Mirror = _I400MirrorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// NV12 mirror.
  int NV12Mirror(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _NV12Mirror(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _NV12MirrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('NV12Mirror');
  late final _NV12Mirror = _NV12MirrorPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// ARGB mirror.
  int ARGBMirror(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBMirror(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBMirrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBMirror');
  late final _ARGBMirror = _ARGBMirrorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// RGB24 mirror.
  int RGB24Mirror(
    ffi.Pointer<ffi.Uint8> src_rgb24,
    int src_stride_rgb24,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    int width,
    int height,
  ) {
    return _RGB24Mirror(
      src_rgb24,
      src_stride_rgb24,
      dst_rgb24,
      dst_stride_rgb24,
      width,
      height,
    );
  }

  late final _RGB24MirrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGB24Mirror');
  late final _RGB24Mirror = _RGB24MirrorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Mirror a plane of data.
  void MirrorPlane(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _MirrorPlane(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _MirrorPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MirrorPlane');
  late final _MirrorPlane = _MirrorPlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Mirror a plane of UV data.
  void MirrorUVPlane(
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int width,
    int height,
  ) {
    return _MirrorUVPlane(
      src_uv,
      src_stride_uv,
      dst_uv,
      dst_stride_uv,
      width,
      height,
    );
  }

  late final _MirrorUVPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('MirrorUVPlane');
  late final _MirrorUVPlane = _MirrorUVPlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  int RAWToRGB24(
    ffi.Pointer<ffi.Uint8> src_raw,
    int src_stride_raw,
    ffi.Pointer<ffi.Uint8> dst_rgb24,
    int dst_stride_rgb24,
    int width,
    int height,
  ) {
    return _RAWToRGB24(
      src_raw,
      src_stride_raw,
      dst_rgb24,
      dst_stride_rgb24,
      width,
      height,
    );
  }

  late final _RAWToRGB24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RAWToRGB24');
  late final _RAWToRGB24 = _RAWToRGB24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Draw a rectangle into I420.
  int I420Rect(
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int x,
    int y,
    int width,
    int height,
    int value_y,
    int value_u,
    int value_v,
  ) {
    return _I420Rect(
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      x,
      y,
      width,
      height,
      value_y,
      value_u,
      value_v,
    );
  }

  late final _I420RectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420Rect');
  late final _I420Rect = _I420RectPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int, int, int, int, int)>();

  /// Draw a rectangle into ARGB.
  int ARGBRect(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int dst_x,
    int dst_y,
    int width,
    int height,
    int value,
  ) {
    return _ARGBRect(
      dst_argb,
      dst_stride_argb,
      dst_x,
      dst_y,
      width,
      height,
      value,
    );
  }

  late final _ARGBRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Uint32)>>('ARGBRect');
  late final _ARGBRect = _ARGBRectPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int, int, int, int)>();

  /// Convert ARGB to gray scale ARGB.
  int ARGBGrayTo(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBGrayTo(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBGrayToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBGrayTo');
  late final _ARGBGrayTo = _ARGBGrayToPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Make a rectangle of ARGB gray scale.
  int ARGBGray(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int dst_x,
    int dst_y,
    int width,
    int height,
  ) {
    return _ARGBGray(
      dst_argb,
      dst_stride_argb,
      dst_x,
      dst_y,
      width,
      height,
    );
  }

  late final _ARGBGrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('ARGBGray');
  late final _ARGBGray = _ARGBGrayPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int, int, int)>();

  /// Make a rectangle of ARGB Sepia tone.
  int ARGBSepia(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int dst_x,
    int dst_y,
    int width,
    int height,
  ) {
    return _ARGBSepia(
      dst_argb,
      dst_stride_argb,
      dst_x,
      dst_y,
      width,
      height,
    );
  }

  late final _ARGBSepiaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('ARGBSepia');
  late final _ARGBSepia = _ARGBSepiaPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int, int, int)>();

  /// Apply a matrix rotation to each ARGB pixel.
  /// matrix_argb is 4 signed ARGB values. -128 to 127 representing -2 to 2.
  /// The first 4 coefficients apply to B, G, R, A and produce B of the output.
  /// The next 4 coefficients apply to B, G, R, A and produce G of the output.
  /// The next 4 coefficients apply to B, G, R, A and produce R of the output.
  /// The last 4 coefficients apply to B, G, R, A and produce A of the output.
  int ARGBColorMatrix(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Int8> matrix_argb,
    int width,
    int height,
  ) {
    return _ARGBColorMatrix(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      matrix_argb,
      width,
      height,
    );
  }

  late final _ARGBColorMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Int8>,
              ffi.Int,
              ffi.Int)>>('ARGBColorMatrix');
  late final _ARGBColorMatrix = _ARGBColorMatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Int8>, int, int)>();

  /// Deprecated. Use ARGBColorMatrix instead.
  /// Apply a matrix rotation to each ARGB pixel.
  /// matrix_argb is 3 signed ARGB values. -128 to 127 representing -1 to 1.
  /// The first 4 coefficients apply to B, G, R, A and produce B of the output.
  /// The next 4 coefficients apply to B, G, R, A and produce G of the output.
  /// The last 4 coefficients apply to B, G, R, A and produce R of the output.
  int RGBColorMatrix(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Int8> matrix_rgb,
    int dst_x,
    int dst_y,
    int width,
    int height,
  ) {
    return _RGBColorMatrix(
      dst_argb,
      dst_stride_argb,
      matrix_rgb,
      dst_x,
      dst_y,
      width,
      height,
    );
  }

  late final _RGBColorMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Int8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGBColorMatrix');
  late final _RGBColorMatrix = _RGBColorMatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Int8>, int, int,
          int, int)>();

  /// Apply a color table each ARGB pixel.
  /// Table contains 256 ARGB values.
  int ARGBColorTable(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Uint8> table_argb,
    int dst_x,
    int dst_y,
    int width,
    int height,
  ) {
    return _ARGBColorTable(
      dst_argb,
      dst_stride_argb,
      table_argb,
      dst_x,
      dst_y,
      width,
      height,
    );
  }

  late final _ARGBColorTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBColorTable');
  late final _ARGBColorTable = _ARGBColorTablePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int)>();

  /// Apply a color table each ARGB pixel but preserve destination alpha.
  /// Table contains 256 ARGB values.
  int RGBColorTable(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Uint8> table_argb,
    int dst_x,
    int dst_y,
    int width,
    int height,
  ) {
    return _RGBColorTable(
      dst_argb,
      dst_stride_argb,
      table_argb,
      dst_x,
      dst_y,
      width,
      height,
    );
  }

  late final _RGBColorTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RGBColorTable');
  late final _RGBColorTable = _RGBColorTablePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int)>();

  /// Apply a luma/color table each ARGB pixel but preserve destination alpha.
  /// Table contains 32768 values indexed by [Y][C] where 7 it 7 bit luma from
  /// RGB (YJ style) and C is an 8 bit color component (R, G or B).
  int ARGBLumaColorTable(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Uint8> luma,
    int width,
    int height,
  ) {
    return _ARGBLumaColorTable(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      luma,
      width,
      height,
    );
  }

  late final _ARGBLumaColorTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('ARGBLumaColorTable');
  late final _ARGBLumaColorTable = _ARGBLumaColorTablePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int)>();

  /// Apply a 3 term polynomial to ARGB values.
  /// poly points to a 4x4 matrix.  The first row is constants.  The 2nd row is
  /// coefficients for b, g, r and a.  The 3rd row is coefficients for b squared,
  /// g squared, r squared and a squared.  The 4rd row is coefficients for b to
  /// the 3, g to the 3, r to the 3 and a to the 3.  The values are summed and
  /// result clamped to 0 to 255.
  /// A polynomial approximation can be dirived using software such as 'R'.
  int ARGBPolynomial(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Float> poly,
    int width,
    int height,
  ) {
    return _ARGBPolynomial(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      poly,
      width,
      height,
    );
  }

  late final _ARGBPolynomialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('ARGBPolynomial');
  late final _ARGBPolynomial = _ARGBPolynomialPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Float>, int, int)>();

  /// Convert plane of 16 bit shorts to half floats.
  /// Source values are multiplied by scale before storing as half float.
  int HalfFloatPlane(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    double scale,
    int width,
    int height,
  ) {
    return _HalfFloatPlane(
      src_y,
      src_stride_y,
      dst_y,
      dst_stride_y,
      scale,
      width,
      height,
    );
  }

  late final _HalfFloatPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Float,
              ffi.Int,
              ffi.Int)>>('HalfFloatPlane');
  late final _HalfFloatPlane = _HalfFloatPlanePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          double, int, int)>();

  /// Convert a buffer of bytes to floats, scale the values and store as floats.
  int ByteToFloat(
    ffi.Pointer<ffi.Uint8> src_y,
    ffi.Pointer<ffi.Float> dst_y,
    double scale,
    int width,
  ) {
    return _ByteToFloat(
      src_y,
      dst_y,
      scale,
      width,
    );
  }

  late final _ByteToFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>,
              ffi.Float, ffi.Int)>>('ByteToFloat');
  late final _ByteToFloat = _ByteToFloatPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>, double, int)>();

  /// Quantize a rectangle of ARGB. Alpha unaffected.
  /// scale is a 16 bit fractional fixed point scaler between 0 and 65535.
  /// interval_size should be a value between 1 and 255.
  /// interval_offset should be a value between 0 and 255.
  int ARGBQuantize(
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int scale,
    int interval_size,
    int interval_offset,
    int dst_x,
    int dst_y,
    int width,
    int height,
  ) {
    return _ARGBQuantize(
      dst_argb,
      dst_stride_argb,
      scale,
      interval_size,
      interval_offset,
      dst_x,
      dst_y,
      width,
      height,
    );
  }

  late final _ARGBQuantizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('ARGBQuantize');
  late final _ARGBQuantize = _ARGBQuantizePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, int, int, int, int, int, int, int, int)>();

  /// Copy Alpha channel of ARGB to alpha of ARGB.
  int ARGBCopyAlpha(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBCopyAlpha(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBCopyAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBCopyAlpha');
  late final _ARGBCopyAlpha = _ARGBCopyAlphaPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Extract the alpha channel from ARGB.
  int ARGBExtractAlpha(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_a,
    int dst_stride_a,
    int width,
    int height,
  ) {
    return _ARGBExtractAlpha(
      src_argb,
      src_stride_argb,
      dst_a,
      dst_stride_a,
      width,
      height,
    );
  }

  late final _ARGBExtractAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBExtractAlpha');
  late final _ARGBExtractAlpha = _ARGBExtractAlphaPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Copy Y channel to Alpha of ARGB.
  int ARGBCopyYToAlpha(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBCopyYToAlpha(
      src_y,
      src_stride_y,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBCopyYToAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBCopyYToAlpha');
  late final _ARGBCopyYToAlpha = _ARGBCopyYToAlphaPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Get function to Alpha Blend ARGB pixels and store to destination.
  ARGBBlendRow GetARGBBlend() {
    return _GetARGBBlend();
  }

  late final _GetARGBBlendPtr =
      _lookup<ffi.NativeFunction<ARGBBlendRow Function()>>('GetARGBBlend');
  late final _GetARGBBlend =
      _GetARGBBlendPtr.asFunction<ARGBBlendRow Function()>();

  /// Alpha Blend ARGB images and store to destination.
  /// Source is pre-multiplied by alpha using ARGBAttenuate.
  /// Alpha of destination is set to 255.
  int ARGBBlend(
    ffi.Pointer<ffi.Uint8> src_argb0,
    int src_stride_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    int src_stride_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBBlend(
      src_argb0,
      src_stride_argb0,
      src_argb1,
      src_stride_argb1,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBBlendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBBlend');
  late final _ARGBBlend = _ARGBBlendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Alpha Blend plane and store to destination.
  /// Source is not pre-multiplied by alpha.
  int BlendPlane(
    ffi.Pointer<ffi.Uint8> src_y0,
    int src_stride_y0,
    ffi.Pointer<ffi.Uint8> src_y1,
    int src_stride_y1,
    ffi.Pointer<ffi.Uint8> alpha,
    int alpha_stride,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _BlendPlane(
      src_y0,
      src_stride_y0,
      src_y1,
      src_stride_y1,
      alpha,
      alpha_stride,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _BlendPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('BlendPlane');
  late final _BlendPlane = _BlendPlanePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Alpha Blend YUV images and store to destination.
  /// Source is not pre-multiplied by alpha.
  /// Alpha is full width x height and subsampled to half size to apply to UV.
  int I420Blend(
    ffi.Pointer<ffi.Uint8> src_y0,
    int src_stride_y0,
    ffi.Pointer<ffi.Uint8> src_u0,
    int src_stride_u0,
    ffi.Pointer<ffi.Uint8> src_v0,
    int src_stride_v0,
    ffi.Pointer<ffi.Uint8> src_y1,
    int src_stride_y1,
    ffi.Pointer<ffi.Uint8> src_u1,
    int src_stride_u1,
    ffi.Pointer<ffi.Uint8> src_v1,
    int src_stride_v1,
    ffi.Pointer<ffi.Uint8> alpha,
    int alpha_stride,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
  ) {
    return _I420Blend(
      src_y0,
      src_stride_y0,
      src_u0,
      src_stride_u0,
      src_v0,
      src_stride_v0,
      src_y1,
      src_stride_y1,
      src_u1,
      src_stride_u1,
      src_v1,
      src_stride_v1,
      alpha,
      alpha_stride,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
    );
  }

  late final _I420BlendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420Blend');
  late final _I420Blend = _I420BlendPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Multiply ARGB image by ARGB image. Shifted down by 8. Saturates to 255.
  int ARGBMultiply(
    ffi.Pointer<ffi.Uint8> src_argb0,
    int src_stride_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    int src_stride_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBMultiply(
      src_argb0,
      src_stride_argb0,
      src_argb1,
      src_stride_argb1,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBMultiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBMultiply');
  late final _ARGBMultiply = _ARGBMultiplyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Add ARGB image with ARGB image. Saturates to 255.
  int ARGBAdd(
    ffi.Pointer<ffi.Uint8> src_argb0,
    int src_stride_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    int src_stride_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBAdd(
      src_argb0,
      src_stride_argb0,
      src_argb1,
      src_stride_argb1,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBAdd');
  late final _ARGBAdd = _ARGBAddPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Subtract ARGB image (argb1) from ARGB image (argb0). Saturates to 0.
  int ARGBSubtract(
    ffi.Pointer<ffi.Uint8> src_argb0,
    int src_stride_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    int src_stride_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBSubtract(
      src_argb0,
      src_stride_argb0,
      src_argb1,
      src_stride_argb1,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBSubtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBSubtract');
  late final _ARGBSubtract = _ARGBSubtractPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Convert I422 to YUY2.
  int I422ToYUY2(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_yuy2,
    int dst_stride_yuy2,
    int width,
    int height,
  ) {
    return _I422ToYUY2(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_yuy2,
      dst_stride_yuy2,
      width,
      height,
    );
  }

  late final _I422ToYUY2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToYUY2');
  late final _I422ToYUY2 = _I422ToYUY2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert I422 to UYVY.
  int I422ToUYVY(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_uyvy,
    int dst_stride_uyvy,
    int width,
    int height,
  ) {
    return _I422ToUYVY(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_uyvy,
      dst_stride_uyvy,
      width,
      height,
    );
  }

  late final _I422ToUYVYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I422ToUYVY');
  late final _I422ToUYVY = _I422ToUYVYPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int)>();

  /// Convert unattentuated ARGB to preattenuated ARGB.
  int ARGBAttenuate(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBAttenuate(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBAttenuatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBAttenuate');
  late final _ARGBAttenuate = _ARGBAttenuatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Convert preattentuated ARGB to unattenuated ARGB.
  int ARGBUnattenuate(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBUnattenuate(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBUnattenuatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBUnattenuate');
  late final _ARGBUnattenuate = _ARGBUnattenuatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Internal function - do not call directly.
  /// Computes table of cumulative sum for image where the value is the sum
  /// of all values above and to the left of the entry. Used by ARGBBlur.
  int ARGBComputeCumulativeSum(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Int32> dst_cumsum,
    int dst_stride32_cumsum,
    int width,
    int height,
  ) {
    return _ARGBComputeCumulativeSum(
      src_argb,
      src_stride_argb,
      dst_cumsum,
      dst_stride32_cumsum,
      width,
      height,
    );
  }

  late final _ARGBComputeCumulativeSumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Int32>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBComputeCumulativeSum');
  late final _ARGBComputeCumulativeSum =
      _ARGBComputeCumulativeSumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Int32>, int,
              int, int)>();

  /// Blur ARGB image.
  /// dst_cumsum table of width * (height + 1) * 16 bytes aligned to
  /// 16 byte boundary.
  /// dst_stride32_cumsum is number of ints in a row (width * 4).
  /// radius is number of pixels around the center.  e.g. 1 = 3x3. 2=5x5.
  /// Blur is optimized for radius of 5 (11x11) or less.
  int ARGBBlur(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Int32> dst_cumsum,
    int dst_stride32_cumsum,
    int width,
    int height,
    int radius,
  ) {
    return _ARGBBlur(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      dst_cumsum,
      dst_stride32_cumsum,
      width,
      height,
      radius,
    );
  }

  late final _ARGBBlurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Int32>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBBlur');
  late final _ARGBBlur = _ARGBBlurPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Int32>, int, int, int, int)>();

  /// Gaussian 5x5 blur a float plane.
  /// Coefficients of 1, 4, 6, 4, 1.
  /// Each destination pixel is a blur of the 5x5
  /// pixels from the source.
  /// Source edges are clamped.
  int GaussPlane_F32(
    ffi.Pointer<ffi.Float> src,
    int src_stride,
    ffi.Pointer<ffi.Float> dst,
    int dst_stride,
    int width,
    int height,
  ) {
    return _GaussPlane_F32(
      src,
      src_stride,
      dst,
      dst_stride,
      width,
      height,
    );
  }

  late final _GaussPlane_F32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('GaussPlane_F32');
  late final _GaussPlane_F32 = _GaussPlane_F32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int,
          int, int)>();

  /// Multiply ARGB image by ARGB value.
  int ARGBShade(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
    int value,
  ) {
    return _ARGBShade(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
      value,
    );
  }

  late final _ARGBShadePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Uint32)>>('ARGBShade');
  late final _ARGBShade = _ARGBShadePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int)>();

  /// Interpolate between two images using specified amount of interpolation
  /// (0 to 255) and store to destination.
  /// 'interpolation' is specified as 8 bit fraction where 0 means 100% src0
  /// and 255 means 1% src0 and 99% src1.
  int InterpolatePlane(
    ffi.Pointer<ffi.Uint8> src0,
    int src_stride0,
    ffi.Pointer<ffi.Uint8> src1,
    int src_stride1,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_stride,
    int width,
    int height,
    int interpolation,
  ) {
    return _InterpolatePlane(
      src0,
      src_stride0,
      src1,
      src_stride1,
      dst,
      dst_stride,
      width,
      height,
      interpolation,
    );
  }

  late final _InterpolatePlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('InterpolatePlane');
  late final _InterpolatePlane = _InterpolatePlanePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  /// Interpolate between two ARGB images using specified amount of interpolation
  /// Internally calls InterpolatePlane with width * 4 (bpp).
  int ARGBInterpolate(
    ffi.Pointer<ffi.Uint8> src_argb0,
    int src_stride_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    int src_stride_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
    int interpolation,
  ) {
    return _ARGBInterpolate(
      src_argb0,
      src_stride_argb0,
      src_argb1,
      src_stride_argb1,
      dst_argb,
      dst_stride_argb,
      width,
      height,
      interpolation,
    );
  }

  late final _ARGBInterpolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBInterpolate');
  late final _ARGBInterpolate = _ARGBInterpolatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  /// Interpolate between two YUV images using specified amount of interpolation
  /// Internally calls InterpolatePlane on each plane where the U and V planes
  /// are half width and half height.
  int I420Interpolate(
    ffi.Pointer<ffi.Uint8> src0_y,
    int src0_stride_y,
    ffi.Pointer<ffi.Uint8> src0_u,
    int src0_stride_u,
    ffi.Pointer<ffi.Uint8> src0_v,
    int src0_stride_v,
    ffi.Pointer<ffi.Uint8> src1_y,
    int src1_stride_y,
    ffi.Pointer<ffi.Uint8> src1_u,
    int src1_stride_u,
    ffi.Pointer<ffi.Uint8> src1_v,
    int src1_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
    int interpolation,
  ) {
    return _I420Interpolate(
      src0_y,
      src0_stride_y,
      src0_u,
      src0_stride_u,
      src0_v,
      src0_stride_v,
      src1_y,
      src1_stride_y,
      src1_u,
      src1_stride_u,
      src1_v,
      src1_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
      interpolation,
    );
  }

  late final _I420InterpolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('I420Interpolate');
  late final _I420Interpolate = _I420InterpolatePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Shuffle ARGB channel order.  e.g. BGRA to ARGB.
  /// shuffler is 16 bytes.
  int ARGBShuffle(
    ffi.Pointer<ffi.Uint8> src_bgra,
    int src_stride_bgra,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
    int height,
  ) {
    return _ARGBShuffle(
      src_bgra,
      src_stride_bgra,
      dst_argb,
      dst_stride_argb,
      shuffler,
      width,
      height,
    );
  }

  late final _ARGBShufflePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('ARGBShuffle');
  late final _ARGBShuffle = _ARGBShufflePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int)>();

  /// Shuffle AR64 channel order.  e.g. AR64 to AB64.
  /// shuffler is 16 bytes.
  int AR64Shuffle(
    ffi.Pointer<ffi.Uint16> src_ar64,
    int src_stride_ar64,
    ffi.Pointer<ffi.Uint16> dst_ar64,
    int dst_stride_ar64,
    ffi.Pointer<ffi.Uint8> shuffler,
    int width,
    int height,
  ) {
    return _AR64Shuffle(
      src_ar64,
      src_stride_ar64,
      dst_ar64,
      dst_stride_ar64,
      shuffler,
      width,
      height,
    );
  }

  late final _AR64ShufflePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('AR64Shuffle');
  late final _AR64Shuffle = _AR64ShufflePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int,
          ffi.Pointer<ffi.Uint8>, int, int)>();

  /// Sobel ARGB effect with planar output.
  int ARGBSobelToPlane(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    int width,
    int height,
  ) {
    return _ARGBSobelToPlane(
      src_argb,
      src_stride_argb,
      dst_y,
      dst_stride_y,
      width,
      height,
    );
  }

  late final _ARGBSobelToPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBSobelToPlane');
  late final _ARGBSobelToPlane = _ARGBSobelToPlanePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Sobel ARGB effect.
  int ARGBSobel(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBSobel(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBSobelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)>>('ARGBSobel');
  late final _ARGBSobel = _ARGBSobelPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Sobel ARGB effect w/ Sobel X, Sobel, Sobel Y in ARGB.
  int ARGBSobelXY(
    ffi.Pointer<ffi.Uint8> src_argb,
    int src_stride_argb,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    int width,
    int height,
  ) {
    return _ARGBSobelXY(
      src_argb,
      src_stride_argb,
      dst_argb,
      dst_stride_argb,
      width,
      height,
    );
  }

  late final _ARGBSobelXYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ARGBSobelXY');
  late final _ARGBSobelXY = _ARGBSobelXYPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Rotate I420 frame.
  int I420Rotate(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
    int mode,
  ) {
    return _I420Rotate(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
      mode,
    );
  }

  late final _I420RotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('I420Rotate');
  late final _I420Rotate = _I420RotatePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Rotate I444 frame.
  int I444Rotate(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
    int mode,
  ) {
    return _I444Rotate(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
      mode,
    );
  }

  late final _I444RotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('I444Rotate');
  late final _I444Rotate = _I444RotatePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Rotate NV12 input and store in I420.
  int NV12ToI420Rotate(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int width,
    int height,
    int mode,
  ) {
    return _NV12ToI420Rotate(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      width,
      height,
      mode,
    );
  }

  late final _NV12ToI420RotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('NV12ToI420Rotate');
  late final _NV12ToI420Rotate = _NV12ToI420RotatePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  /// Rotate a plane by 0, 90, 180, or 270.
  int RotatePlane(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_stride,
    int width,
    int height,
    int mode,
  ) {
    return _RotatePlane(
      src,
      src_stride,
      dst,
      dst_stride,
      width,
      height,
      mode,
    );
  }

  late final _RotatePlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('RotatePlane');
  late final _RotatePlane = _RotatePlanePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int)>();

  /// Rotate planes by 90, 180, 270. Deprecated.
  void RotatePlane90(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_stride,
    int width,
    int height,
  ) {
    return _RotatePlane90(
      src,
      src_stride,
      dst,
      dst_stride,
      width,
      height,
    );
  }

  late final _RotatePlane90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RotatePlane90');
  late final _RotatePlane90 = _RotatePlane90Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  void RotatePlane180(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_stride,
    int width,
    int height,
  ) {
    return _RotatePlane180(
      src,
      src_stride,
      dst,
      dst_stride,
      width,
      height,
    );
  }

  late final _RotatePlane180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RotatePlane180');
  late final _RotatePlane180 = _RotatePlane180Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  void RotatePlane270(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_stride,
    int width,
    int height,
  ) {
    return _RotatePlane270(
      src,
      src_stride,
      dst,
      dst_stride,
      width,
      height,
    );
  }

  late final _RotatePlane270Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RotatePlane270');
  late final _RotatePlane270 = _RotatePlane270Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  /// Rotations for when U and V are interleaved.
  /// These functions take one input pointer and
  /// split the data into two buffers while
  /// rotating them. Deprecated.
  void RotateUV90(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_a,
    int dst_stride_a,
    ffi.Pointer<ffi.Uint8> dst_b,
    int dst_stride_b,
    int width,
    int height,
  ) {
    return _RotateUV90(
      src,
      src_stride,
      dst_a,
      dst_stride_a,
      dst_b,
      dst_stride_b,
      width,
      height,
    );
  }

  late final _RotateUV90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RotateUV90');
  late final _RotateUV90 = _RotateUV90Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void RotateUV180(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_a,
    int dst_stride_a,
    ffi.Pointer<ffi.Uint8> dst_b,
    int dst_stride_b,
    int width,
    int height,
  ) {
    return _RotateUV180(
      src,
      src_stride,
      dst_a,
      dst_stride_a,
      dst_b,
      dst_stride_b,
      width,
      height,
    );
  }

  late final _RotateUV180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RotateUV180');
  late final _RotateUV180 = _RotateUV180Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void RotateUV270(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_a,
    int dst_stride_a,
    ffi.Pointer<ffi.Uint8> dst_b,
    int dst_stride_b,
    int width,
    int height,
  ) {
    return _RotateUV270(
      src,
      src_stride,
      dst_a,
      dst_stride_a,
      dst_b,
      dst_stride_b,
      width,
      height,
    );
  }

  late final _RotateUV270Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('RotateUV270');
  late final _RotateUV270 = _RotateUV270Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// The 90 and 270 functions are based on transposes.
  /// Doing a transpose with reversing the read/write
  /// order will result in a rotation by +- 90 degrees.
  /// Deprecated.
  void TransposePlane(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_stride,
    int width,
    int height,
  ) {
    return _TransposePlane(
      src,
      src_stride,
      dst,
      dst_stride,
      width,
      height,
    );
  }

  late final _TransposePlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('TransposePlane');
  late final _TransposePlane = _TransposePlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int)>();

  void TransposeUV(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> dst_a,
    int dst_stride_a,
    ffi.Pointer<ffi.Uint8> dst_b,
    int dst_stride_b,
    int width,
    int height,
  ) {
    return _TransposeUV(
      src,
      src_stride,
      dst_a,
      dst_stride_a,
      dst_b,
      dst_stride_b,
      width,
      height,
    );
  }

  late final _TransposeUVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('TransposeUV');
  late final _TransposeUV = _TransposeUVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Scale a YUV plane.
  void ScalePlane(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint8> dst,
    int dst_stride,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _ScalePlane(
      src,
      src_stride,
      src_width,
      src_height,
      dst,
      dst_stride,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _ScalePlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('ScalePlane');
  late final _ScalePlane = _ScalePlanePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  void ScalePlane_16(
    ffi.Pointer<ffi.Uint16> src,
    int src_stride,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_stride,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _ScalePlane_16(
      src,
      src_stride,
      src_width,
      src_height,
      dst,
      dst_stride,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _ScalePlane_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('ScalePlane_16');
  late final _ScalePlane_16 = _ScalePlane_16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, int, int, int,
          ffi.Pointer<ffi.Uint16>, int, int, int, int)>();

  /// Sample is expected to be in the low 12 bits.
  void ScalePlane_12(
    ffi.Pointer<ffi.Uint16> src,
    int src_stride,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint16> dst,
    int dst_stride,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _ScalePlane_12(
      src,
      src_stride,
      src_width,
      src_height,
      dst,
      dst_stride,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _ScalePlane_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('ScalePlane_12');
  late final _ScalePlane_12 = _ScalePlane_12Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, int, int, int,
          ffi.Pointer<ffi.Uint16>, int, int, int, int)>();

  /// Scales a YUV 4:2:0 image from the src width and height to the
  /// dst width and height.
  /// If filtering is kFilterNone, a simple nearest-neighbor algorithm is
  /// used. This produces basic (blocky) quality at the fastest speed.
  /// If filtering is kFilterBilinear, interpolation is used to produce a better
  /// quality image, at the expense of speed.
  /// If filtering is kFilterBox, averaging is used to produce ever better
  /// quality image, at further expense of speed.
  /// Returns 0 if successful.
  int I420Scale(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _I420Scale(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_width,
      src_height,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _I420ScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('I420Scale');
  late final _I420Scale = _I420ScalePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  int I420Scale_16(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _I420Scale_16(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_width,
      src_height,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _I420Scale_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('I420Scale_16');
  late final _I420Scale_16 = _I420Scale_16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          int)>();

  int I420Scale_12(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _I420Scale_12(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_width,
      src_height,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _I420Scale_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('I420Scale_12');
  late final _I420Scale_12 = _I420Scale_12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          int)>();

  /// Scales a YUV 4:4:4 image from the src width and height to the
  /// dst width and height.
  /// If filtering is kFilterNone, a simple nearest-neighbor algorithm is
  /// used. This produces basic (blocky) quality at the fastest speed.
  /// If filtering is kFilterBilinear, interpolation is used to produce a better
  /// quality image, at the expense of speed.
  /// If filtering is kFilterBox, averaging is used to produce ever better
  /// quality image, at further expense of speed.
  /// Returns 0 if successful.
  int I444Scale(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint8> src_v,
    int src_stride_v,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint8> dst_v,
    int dst_stride_v,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _I444Scale(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_width,
      src_height,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _I444ScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('I444Scale');
  late final _I444Scale = _I444ScalePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  int I444Scale_16(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _I444Scale_16(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_width,
      src_height,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _I444Scale_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('I444Scale_16');
  late final _I444Scale_16 = _I444Scale_16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          int)>();

  int I444Scale_12(
    ffi.Pointer<ffi.Uint16> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint16> src_u,
    int src_stride_u,
    ffi.Pointer<ffi.Uint16> src_v,
    int src_stride_v,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint16> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint16> dst_u,
    int dst_stride_u,
    ffi.Pointer<ffi.Uint16> dst_v,
    int dst_stride_v,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _I444Scale_12(
      src_y,
      src_stride_y,
      src_u,
      src_stride_u,
      src_v,
      src_stride_v,
      src_width,
      src_height,
      dst_y,
      dst_stride_y,
      dst_u,
      dst_stride_u,
      dst_v,
      dst_stride_v,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _I444Scale_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Pointer<ffi.Uint16>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('I444Scale_12');
  late final _I444Scale_12 = _I444Scale_12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          ffi.Pointer<ffi.Uint16>,
          int,
          int,
          int,
          int)>();

  /// Scales an NV12 image from the src width and height to the
  /// dst width and height.
  /// If filtering is kFilterNone, a simple nearest-neighbor algorithm is
  /// used. This produces basic (blocky) quality at the fastest speed.
  /// If filtering is kFilterBilinear, interpolation is used to produce a better
  /// quality image, at the expense of speed.
  /// kFilterBox is not supported for the UV channel and will be treated as
  /// bilinear.
  /// Returns 0 if successful.
  int NV12Scale(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    int src_width,
    int src_height,
    ffi.Pointer<ffi.Uint8> dst_y,
    int dst_stride_y,
    ffi.Pointer<ffi.Uint8> dst_uv,
    int dst_stride_uv,
    int dst_width,
    int dst_height,
    int filtering,
  ) {
    return _NV12Scale(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      src_width,
      src_height,
      dst_y,
      dst_stride_y,
      dst_uv,
      dst_stride_uv,
      dst_width,
      dst_height,
      filtering,
    );
  }

  late final _NV12ScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int32)>>('NV12Scale');
  late final _NV12Scale = _NV12ScalePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();
}

abstract class RotationMode {
  static const int kRotate0 = 0;
  static const int kRotate90 = 90;
  static const int kRotate180 = 180;
  static const int kRotate270 = 270;
  static const int kRotateNone = 0;
  static const int kRotateClockwise = 90;
  static const int kRotateCounterClockwise = 270;
}

/// This struct is for Intel color conversion.
final class YuvConstants extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> kUVToB;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> kUVToG;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> kUVToR;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int16> kYToRgb;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int16> kYBiasToRgb;
}

typedef ptrdiff_t = ffi.Long;
typedef Dartptrdiff_t = int;

abstract class FilterMode {
  static const int kFilterNone = 0;
  static const int kFilterLinear = 1;
  static const int kFilterBilinear = 2;
  static const int kFilterBox = 3;
}

/// FourCC codes grouped according to implementation efficiency.
/// Primary formats should convert in 1 efficient step.
/// Secondary formats are converted in 2 steps.
/// Auxilliary formats call primary converters.
abstract class FourCC {
  /// 10 Primary YUV formats: 5 planar, 2 biplanar, 2 packed.
  static const int FOURCC_I420 = 808596553;
  static const int FOURCC_I422 = 842150985;
  static const int FOURCC_I444 = 875836489;
  static const int FOURCC_I400 = 808465481;
  static const int FOURCC_NV21 = 825382478;
  static const int FOURCC_NV12 = 842094158;
  static const int FOURCC_YUY2 = 844715353;
  static const int FOURCC_UYVY = 1498831189;

  /// bt.601 10 bit 420
  static const int FOURCC_I010 = 808529993;

  /// bt.601 10 bit 422
  static const int FOURCC_I210 = 808530505;

  /// 1 Secondary YUV format: row biplanar.  deprecated.
  static const int FOURCC_M420 = 808596557;

  /// 13 Primary RGB formats: 4 32 bpp, 2 24 bpp, 3 16 bpp, 1 10 bpc 2 64 bpp
  static const int FOURCC_ARGB = 1111970369;
  static const int FOURCC_BGRA = 1095911234;
  static const int FOURCC_ABGR = 1380401729;

  /// 10 bit per channel. 2101010.
  static const int FOURCC_AR30 = 808669761;

  /// ABGR version of 10 bit
  static const int FOURCC_AB30 = 808665665;

  /// 16 bit per channel.
  static const int FOURCC_AR64 = 875975233;

  /// ABGR version of 16 bit
  static const int FOURCC_AB64 = 875971137;
  static const int FOURCC_24BG = 1195521074;
  static const int FOURCC_RAW = 544694642;
  static const int FOURCC_RGBA = 1094862674;

  /// rgb565 LE.
  static const int FOURCC_RGBP = 1346520914;

  /// argb1555 LE.
  static const int FOURCC_RGBO = 1329743698;

  /// argb4444 LE.
  static const int FOURCC_R444 = 875836498;

  /// 1 Primary Compressed YUV format.
  static const int FOURCC_MJPG = 1196444237;

  /// 14 Auxiliary YUV variations: 3 with U and V planes are swapped, 1 Alias.
  static const int FOURCC_YV12 = 842094169;
  static const int FOURCC_YV16 = 909203033;
  static const int FOURCC_YV24 = 875714137;

  /// Linux version of I420.
  static const int FOURCC_YU12 = 842093913;
  static const int FOURCC_J420 = 808596554;
  static const int FOURCC_J422 = 842150986;
  static const int FOURCC_J444 = 875836490;
  static const int FOURCC_J400 = 808465482;

  /// bt.709 full, unofficial fourcc
  static const int FOURCC_F420 = 808596550;

  /// bt.709 full, unofficial fourcc
  static const int FOURCC_F422 = 842150982;

  /// bt.709 full, unofficial fourcc
  static const int FOURCC_F444 = 875836486;

  /// bt.709, unofficial fourcc
  static const int FOURCC_H420 = 808596552;

  /// bt.709, unofficial fourcc
  static const int FOURCC_H422 = 842150984;

  /// bt.709, unofficial fourcc
  static const int FOURCC_H444 = 875836488;

  /// bt.2020, unofficial fourcc
  static const int FOURCC_U420 = 808596565;

  /// bt.2020, unofficial fourcc
  static const int FOURCC_U422 = 842150997;

  /// bt.2020, unofficial fourcc
  static const int FOURCC_U444 = 875836501;

  /// bt.709 full range 10 bit 420
  static const int FOURCC_F010 = 808529990;

  /// bt.709 10 bit 420
  static const int FOURCC_H010 = 808529992;

  /// bt.2020 10 bit 420
  static const int FOURCC_U010 = 808530005;

  /// bt.709 full range 10 bit 422
  static const int FOURCC_F210 = 808530502;

  /// bt.709 10 bit 422
  static const int FOURCC_H210 = 808530504;

  /// bt.2020 10 bit 422
  static const int FOURCC_U210 = 808530517;
  static const int FOURCC_P010 = 808530000;
  static const int FOURCC_P210 = 808530512;

  /// Alias for I420.
  static const int FOURCC_IYUV = 1448433993;

  /// Alias for I422.
  static const int FOURCC_YU16 = 909202777;

  /// Alias for I444.
  static const int FOURCC_YU24 = 875713881;

  /// Alias for YUY2.
  static const int FOURCC_YUYV = 1448695129;

  /// Alias for YUY2 on Mac.
  static const int FOURCC_YUVS = 1937143161;

  /// Alias for UYVY.
  static const int FOURCC_HDYC = 1129923656;

  /// Alias for UYVY on Mac.
  static const int FOURCC_2VUY = 2037741106;

  /// Alias for MJPG.
  static const int FOURCC_JPEG = 1195724874;

  /// Alias for MJPG on Mac.
  static const int FOURCC_DMB1 = 828534116;

  /// Alias for BGGR.
  static const int FOURCC_BA81 = 825770306;

  /// Alias for RAW.
  static const int FOURCC_RGB3 = 859981650;

  /// Alias for 24BG.
  static const int FOURCC_BGR3 = 861030210;

  /// Alias for BGRA kCMPixelFormat_32ARGB
  static const int FOURCC_CM32 = 536870912;

  /// Alias for RAW kCMPixelFormat_24RGB
  static const int FOURCC_CM24 = 402653184;

  /// Alias for RGBO.
  static const int FOURCC_L555 = 892679500;

  /// Alias for RGBP.
  static const int FOURCC_L565 = 892745036;

  /// Alias for RGBO.
  static const int FOURCC_5551 = 825570613;

  /// deprecated formats.  Not supported, but defined for backward compatibility.
  static const int FOURCC_I411 = 825308233;
  static const int FOURCC_Q420 = 808596561;
  static const int FOURCC_RGGB = 1111967570;
  static const int FOURCC_BGGR = 1380403010;
  static const int FOURCC_GRBG = 1195528775;
  static const int FOURCC_GBRG = 1196573255;
  static const int FOURCC_H264 = 875967048;

  /// Match any fourcc.
  static const int FOURCC_ANY = -1;
}

abstract class FourCCBpp {
  /// Canonical fourcc codes used in our code.
  static const int FOURCC_BPP_I420 = 12;
  static const int FOURCC_BPP_I422 = 16;
  static const int FOURCC_BPP_I444 = 24;
  static const int FOURCC_BPP_I411 = 12;
  static const int FOURCC_BPP_I400 = 8;
  static const int FOURCC_BPP_NV21 = 12;
  static const int FOURCC_BPP_NV12 = 12;
  static const int FOURCC_BPP_YUY2 = 16;
  static const int FOURCC_BPP_UYVY = 16;

  /// deprecated
  static const int FOURCC_BPP_M420 = 12;
  static const int FOURCC_BPP_Q420 = 12;
  static const int FOURCC_BPP_ARGB = 32;
  static const int FOURCC_BPP_BGRA = 32;
  static const int FOURCC_BPP_ABGR = 32;
  static const int FOURCC_BPP_RGBA = 32;
  static const int FOURCC_BPP_AR30 = 32;
  static const int FOURCC_BPP_AB30 = 32;
  static const int FOURCC_BPP_AR64 = 64;
  static const int FOURCC_BPP_AB64 = 64;
  static const int FOURCC_BPP_24BG = 24;
  static const int FOURCC_BPP_RAW = 24;
  static const int FOURCC_BPP_RGBP = 16;
  static const int FOURCC_BPP_RGBO = 16;
  static const int FOURCC_BPP_R444 = 16;
  static const int FOURCC_BPP_RGGB = 8;
  static const int FOURCC_BPP_BGGR = 8;
  static const int FOURCC_BPP_GRBG = 8;
  static const int FOURCC_BPP_GBRG = 8;
  static const int FOURCC_BPP_YV12 = 12;
  static const int FOURCC_BPP_YV16 = 16;
  static const int FOURCC_BPP_YV24 = 24;
  static const int FOURCC_BPP_YU12 = 12;
  static const int FOURCC_BPP_J420 = 12;
  static const int FOURCC_BPP_J400 = 8;
  static const int FOURCC_BPP_H420 = 12;
  static const int FOURCC_BPP_H422 = 16;
  static const int FOURCC_BPP_I010 = 15;
  static const int FOURCC_BPP_I210 = 20;
  static const int FOURCC_BPP_H010 = 15;
  static const int FOURCC_BPP_H210 = 20;
  static const int FOURCC_BPP_P010 = 15;
  static const int FOURCC_BPP_P210 = 20;

  /// 0 means unknown.
  static const int FOURCC_BPP_MJPG = 0;
  static const int FOURCC_BPP_H264 = 0;
  static const int FOURCC_BPP_IYUV = 12;
  static const int FOURCC_BPP_YU16 = 16;
  static const int FOURCC_BPP_YU24 = 24;
  static const int FOURCC_BPP_YUYV = 16;
  static const int FOURCC_BPP_YUVS = 16;
  static const int FOURCC_BPP_HDYC = 16;
  static const int FOURCC_BPP_2VUY = 16;
  static const int FOURCC_BPP_JPEG = 1;
  static const int FOURCC_BPP_DMB1 = 1;
  static const int FOURCC_BPP_BA81 = 8;
  static const int FOURCC_BPP_RGB3 = 24;
  static const int FOURCC_BPP_BGR3 = 24;
  static const int FOURCC_BPP_CM32 = 32;
  static const int FOURCC_BPP_CM24 = 24;

  /// 0 means unknown.
  static const int FOURCC_BPP_ANY = 0;
}

typedef ARGBBlendRow = ffi.Pointer<ffi.NativeFunction<ARGBBlendRowFunction>>;
typedef ARGBBlendRowFunction = ffi.Void Function(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    ffi.Int width);
typedef DartARGBBlendRowFunction = void Function(
    ffi.Pointer<ffi.Uint8> src_argb0,
    ffi.Pointer<ffi.Uint8> src_argb1,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int width);

const int LIBYUV_FALSE = 0;

const int LIBYUV_TRUE = 1;

const int CLANG_HAS_AVX2 = 1;

const int CLANG_HAS_AVX512 = 1;

const int KUVTOB = 0;

const int KUVTOG = 32;

const int KUVTOR = 64;

const int KYTORGB = 96;

const int KYBIASTORGB = 128;

const String IACA_ASM_START =
    '.byte 0x0F, 0x0B\n movl \$111, %%ebx\n.byte 0x64, 0x67, 0x90\n';

const String IACA_ASM_END =
    ' movl \$222, %%ebx\n.byte 0x64, 0x67, 0x90\n.byte 0x0F, 0x0B\n';

const int LIBYUV_VERSION = 1787;
